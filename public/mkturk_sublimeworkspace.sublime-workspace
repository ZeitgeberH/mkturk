{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"touch",
				"touchcxyt"
			],
			[
				"boundingBoxes",
				"boundingBoxesTestOrder"
			],
			[
				"bounding",
				"boundingBoxesChoice"
			],
			[
				"task",
				"TASK_idx"
			],
			[
				"start",
				"trialStartNumber"
			],
			[
				"TRIAL",
				"TRIALDATA_SAVE_TIMEOUT_PERIOD_IN_SECONDS"
			],
			[
				"need2",
				"need2loadParameters"
			],
			[
				"Current",
				"CurrentAutomatorStage"
			],
			[
				"Curre",
				"CurrentAutomatorStage"
			],
			[
				"num_train",
				"num_train_per_obj"
			],
			[
				"objA",
				"objAobjB_2_negative_tasks_idx"
			],
			[
				"im1obj",
				"im1objB_2_negative_tasks_idx"
			],
			[
				"objAobjB_2",
				"objAobjB_2_positive_tasks_idx"
			],
			[
				"obj0",
				"obj0_is_correct_and_obj1_is_distractor_trial_idx"
			],
			[
				"obj_2_is",
				"obj_2_is_distractor_idx"
			],
			[
				"tk_2_",
				"tk_2_permuted_idx"
			],
			[
				"random",
				"random_state"
			],
			[
				"c",
				"c"
			],
			[
				"x_novel",
				"x_novel_embedded"
			],
			[
				"x_support",
				"x_support_embedded"
			],
			[
				"drop",
				"dropout_keep_prob"
			],
			[
				"inverse",
				"inverse_mapping"
			],
			[
				"y_novel",
				"y_novel_vectorized"
			],
			[
				"int_label",
				"int_label_space"
			],
			[
				"y_support",
				"y_support_vectorized"
			],
			[
				"exemplars",
				"exemplars_per_class_in_batch"
			],
			[
				"exemplar",
				"exemplars_per_class_in_batch"
			],
			[
				"reuse",
				"reuse_variables"
			],
			[
				"embedde",
				"embedded_x_support"
			],
			[
				"embe",
				"embedded_x_novel"
			],
			[
				"image_resize",
				"image_resize_dims"
			],
			[
				"emb",
				"embedded_support_set"
			],
			[
				"checkpoin",
				"checkpoint_path"
			],
			[
				"check",
				"checkpoint_path"
			],
			[
				"image_resi",
				"image_resize_dims"
			],
			[
				"_image",
				"_image_resize_dims"
			],
			[
				"_train",
				"_train_writer"
			],
			[
				"num_obj",
				"num_obj_dimensions"
			],
			[
				"cell_state",
				"cell_state"
			],
			[
				"_predi",
				"_predictor_constructor"
			],
			[
				"_last",
				"_lastinternalpreds"
			],
			[
				"TaskStream",
				"TaskStreamSampling_RNGseed"
			],
			[
				"qval",
				"qval_test"
			],
			[
				"cheby",
				"chebyshev_polynomials"
			],
			[
				"j",
				"j"
			],
			[
				"_coef",
				"_coef"
			],
			[
				"_laststa",
				"_last_state_val"
			],
			[
				"_lastst",
				"_last_state_val"
			],
			[
				"regress",
				"regression_variables"
			],
			[
				"x_action",
				"x_action_internal"
			],
			[
				"state",
				"state_b"
			],
			[
				"_last_state",
				"_last_state_b"
			],
			[
				"sigma",
				"sigma_grad_numerator"
			],
			[
				"_laststate",
				"_last_state_b"
			],
			[
				"_lastact",
				"_lastaction_value_predictions"
			],
			[
				"_last_st",
				"_last_state_val"
			],
			[
				"_lastaction",
				"_lastactionprob"
			],
			[
				"_last_X",
				"_last_X_mu"
			],
			[
				"_policy",
				"_policy_Xstdev_coef"
			],
			[
				"len",
				"len"
			],
			[
				"_policy_X",
				"_policy_Xmu_coef"
			],
			[
				"num_exem",
				"num_exemplars_per_obj"
			],
			[
				"F",
				"F"
			],
			[
				"reward",
				"reward_sigma_proportion"
			],
			[
				"image",
				"image_x"
			],
			[
				"d",
				"d"
			],
			[
				"trial",
				"trial_number"
			],
			[
				"_acti",
				"_action_2_internallabel_dict"
			],
			[
				"_internal",
				"_internallabels"
			],
			[
				"_inte",
				"_internallabels"
			],
			[
				"_in",
				"_internallabel_2_action_dict"
			],
			[
				"pool",
				"pool_objlabels"
			],
			[
				"typ",
				"typ"
			],
			[
				"target",
				"target_to_image_ratio"
			],
			[
				"IMAGE",
				"IMAGE_SCALE"
			],
			[
				"Task",
				"TaskStream_progressbar"
			],
			[
				"_Task",
				"_TaskStreamIDs"
			],
			[
				"_summ",
				"_summary_stats"
			],
			[
				"base",
				"base_agent_key"
			],
			[
				"model",
				"model_archetype"
			],
			[
				"to",
				"to_hdf"
			],
			[
				"num",
				"num_TaskStream_instantiations"
			],
			[
				"num_",
				"num_TaskStream_instantiations"
			],
			[
				"input",
				"input_dimensionality"
			],
			[
				"memory",
				"memory_entries"
			],
			[
				"episode",
				"episode_transition_rule"
			],
			[
				"object",
				"object_names"
			],
			[
				"sequence",
				"sequence_construction_rng"
			],
			[
				"trial_",
				"trial_seq"
			],
			[
				"test_obj2_image",
				"test_obj2_imagenames"
			],
			[
				"obj1_images",
				"obj1_images_easy"
			],
			[
				"encoding",
				"encoding_model_constructor"
			],
			[
				"obj2_image",
				"obj2_images_easy"
			],
			[
				"RSVP_probe",
				"RSVP_probe_layers_valid"
			],
			[
				"RSVP_",
				"RSVP_probe_layers_valid"
			],
			[
				"RSVP",
				"RSVP_probe_layers"
			],
			[
				"ord",
				"OrderedDict"
			],
			[
				"epoch2",
				"epoch2_numtrials"
			],
			[
				"button",
				"button_layer"
			],
			[
				"Features",
				"Features_test"
			],
			[
				"tensor_",
				"tensor_shape"
			],
			[
				"C",
				"COUNTERBALANCE_CONDITION"
			],
			[
				"group_",
				"group_start_time"
			],
			[
				"EFFEC",
				"EFFECTOR_SWITCH_TRIAL"
			],
			[
				"EFF",
				"EFFECTOR_SWITCH_TRIAL"
			],
			[
				"AUTOMATOR_TEST",
				"AUTOMATOR_TEST_BAG_LABELS"
			],
			[
				"AUTOMATOR",
				"AUTOMATOR_SAMPLE_BAG_LABELS"
			],
			[
				"AUTOM",
				"AUTOMATOR_SAMPLE_BAG_PATHS"
			],
			[
				"not",
				"not_downloaded_filenames"
			],
			[
				"trial_s",
				"trial_sampleImage_index"
			],
			[
				"trial_xyt",
				"trial_xytfixation"
			],
			[
				"need2load",
				"need2loadImages"
			],
			[
				"current",
				"currentAutomatorStage"
			],
			[
				"bagitem",
				"bagitems_paths"
			],
			[
				"curren",
				"currentAutomatorStage"
			],
			[
				"automator",
				"automatorFilePath"
			],
			[
				"sample_fold",
				"sample_foldernum_sequence"
			],
			[
				"num_component_",
				"num_component_sequence_PCA"
			],
			[
				"num_component",
				"num_component_sequence_svm"
			],
			[
				"num_compon",
				"num_component_sequence_svm"
			],
			[
				"summ",
				"summary_results"
			],
			[
				"sparse_n",
				"sparse_n_components"
			],
			[
				"pk",
				"pksave_stringer"
			],
			[
				"y_obj",
				"y_obj_train"
			],
			[
				"pcX_obj",
				"pcX_obj_train"
			],
			[
				"X_obj",
				"X_obj_train"
			],
			[
				"num_positive_",
				"num_positive_exemplars_per_obj"
			],
			[
				"obj",
				"obj"
			]
		]
	},
	"buffers":
	[
		{
			"file": "mkturk_bluetooth.js",
			"settings":
			{
				"buffer_size": 9766,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "mkturk_dropbox.js",
			"settings":
			{
				"buffer_size": 16648,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "mkturk.html",
			"settings":
			{
				"buffer_size": 9715,
				"line_ending": "Unix"
			}
		},
		{
			"file": "mkturk_runtrial.js",
			"settings":
			{
				"buffer_size": 9198,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "mkturk_automator.js",
			"settings":
			{
				"buffer_size": 11174,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "mkturk_TrialQueue.js",
			"settings":
			{
				"buffer_size": 6182,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "mkturk_installsettings.js",
			"settings":
			{
				"buffer_size": 2157,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "mkturk_globalvariables.js",
			"settings":
			{
				"buffer_size": 4668,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "mkturk_ImageBuffer.js",
			"settings":
			{
				"buffer_size": 3167,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "mkturk_utils.js",
			"settings":
			{
				"buffer_size": 7739,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "seedrandom.js",
			"settings":
			{
				"buffer_size": 13992,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "Searching 13 files for \"frame\"\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_globalvariables.js:\n   90  }\n   91  \n   92: var frame = {\n   93  \tcurrent: 0,\n   94  \tshown: [],\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_runtrial.js:\n  106      // Start timer for this fixation render trial. \n  107      CURRTRIAL.starttime=Math.round(performance.now());\n  108:     frame.shown=[];\n  109      for (var q in CANVAS.sequencepre){\n  110:         frame.shown[q]=0\n  111      }; \n  112:     frame.current=0;\n  113  \n  114      //========= AWAIT SHOW FIXATION =========//\n  ...\n  126  \n  127      //========= AWAIT CLEAR FIXATION =========//\n  128:     for (var q in CANVAS.sequenceblank){frame.shown[q]=0}\n  129:     frame.current=0;\n  130      if (FLAGS.waitingforTouches > 0){\n  131          await displayTrial(CANVAS.sequenceblank,CANVAS.tsequenceblank);\n  ...\n  135  //============== AWAIT SHOW SAMPLE THEN TEST ==============//\n  136  if (TASK.RewardStage === 1){\n  137:     frame.shown=[]\n  138      for (var q in CANVAS.sequence){\n  139:         frame.shown[q]=0\n  140      } \n  141      \n  142:     frame.current=0\n  143      \n  144      CURRTRIAL.tsequenceactual = await displayTrial(CANVAS.sequence,CANVAS.tsequence);\n  ...\n  184  \n  185      for (var q = 0; q <= CURRTRIAL.nreward-1; q++){\n  186:         frame.shown=[];\n  187:         for (var q2 in CANVAS.sequencepost){frame.shown[q2]=0}; frame.current=0;\n  188  \n  189          SP.playSound(2);\n  ...\n  203      CANVAS.sequencepost[1] = \"punish\";\n  204      CANVAS.tsequencepost[2] = CANVAS.tsequencepost[1]+TASK.PunishTimeOut;\n  205:     frame.shown=[];\n  206:     for (var q in CANVAS.sequencepost){frame.shown[q]=0}; frame.current=0;\n  207  \n  208      var p1 = displayTrial(CANVAS.sequencepost,CANVAS.tsequencepost);\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_screenfunctions.js:\n  264  \t\tif (!start) start = timestamp;\n  265  \n  266: \t\t// If time to show new frame, \n  267: \t\tif (timestamp - start > tsequence[frame.current]){\n  268: \t\t\t//console.log('Frame =' + frame.current+'. Duration ='+(timestamp-start)+'. Timestamp = ' + timestamp)\n  269: \t\t\ttActual[frame.current] = Math.round(100*(timestamp - start))/100 //in milliseconds, rounded to nearest hundredth of a millisecond\n  270  \t\t\t// Move canvas in front\n  271  \t\t\tvar prev_canvasobj=CANVAS.obj[CANVAS.front]\n  272: \t\t\tvar curr_canvasobj=CANVAS.obj[sequence[frame.current]]\n  273  \t\t\tif (CANVAS.front != \"blank\"){\n  274  \t\t\t\t// Move to back\n  275  \t\t\t\tprev_canvasobj.style.zIndex=\"0\";\n  276  \t\t\t} \n  277: \t\t\tif (sequence[frame.current] != \"blank\"){\n  278  \t\t\t\tcurr_canvasobj.style.zIndex=\"100\";\n  279: \t\t\t\tCANVAS.front = sequence[frame.current];\n  280  \t\t\t} // move to front\n  281  \t\t\telse{\n  ...\n  283  \t\t\t}\n  284  \t\t\t\n  285: \t\t\tframe.shown[frame.current]=1;\n  286: \t\t\tframe.current++;\n  287  \t\t}; \n  288: \t\t// continue if not all frames shown\n  289: \t\tif (frame.shown[frame.shown.length-1] != 1){\n  290: \t\t\twindow.requestAnimationFrame(updateCanvas);\n  291  \t\t}\n  292  \t\telse{\n  ...\n  294  \t\t}\n  295  \t}\n  296: \t//requestAnimationFrame advantages: goes on next screen refresh and syncs to browsers refresh rate on separate clock (not js clock)\n  297: \twindow.requestAnimationFrame(updateCanvas); // kick off async work\n  298  \treturn p\n  299  } \n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_utils.js:\n   73  // ----- Array equality ---- \n   74  if(Array.prototype.equals)\n   75:     console.warn(\"Overriding existing Array.prototype.equals. Possible causes: New API defines the method, there's a framework conflict or you've got double inclusions in your code.\");\n   76  // attach the .equals method to Array's prototype to call it on any array\n   77  Array.prototype.equals = function (array) {\n\n33 matches across 4 files\n\n\nSearching 13 files for \"StaticFixationGridIndex\"\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_runtrial.js:\n   98  while (FLAGS.waitingforTouches > 0){\n   99      \n  100:     CURRTRIAL.fixationgridindex = TASK.StaticFixationGridIndex;\n  101  \n  102      // Render fixation screen \n\n1 match in 1 file\n\n\nSearching 13 files for \"CURRTRIAL.fixationgridindex\"\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_globalvariables.js:\n   97  var CURRTRIAL = {}\n   98  CURRTRIAL.starttime = NaN; \n   99: CURRTRIAL.fixationgridindex = NaN; \n  100  CURRTRIAL.fixationxyt = [];\n  101  CURRTRIAL.allfixationxyt = [];\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_runtrial.js:\n   98  while (FLAGS.waitingforTouches > 0){\n   99      \n  100:     CURRTRIAL.fixationgridindex = TASK.StaticFixationGridIndex;\n  101  \n  102      // Render fixation screen \n  103      var color = \"white\" // todo move into task    \n  104:     renderFixationUsingDot(color, CURRTRIAL.fixationgridindex, FixationRadius, CANVAS.obj.touchfix);\n  105      \n  106      // Start timer for this fixation render trial. \n  ...\n  215  //================= Record results of trial =================//\n  216  TRIAL.StartTime.push(CURRTRIAL.starttime)\n  217: TRIAL.FixationGridIndex.push(CURRTRIAL.fixationgridindex)\n  218  TRIAL.FixationXYT.push(CURRTRIAL.fixationxyt)\n  219  TRIAL.AllFixationXYT.push(CURRTRIAL.allfixationxyt  )\n\n4 matches across 2 files\n\n\nSearching 13 files for \"RewardStage\"\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_runtrial.js:\n  134  \n  135  //============== AWAIT SHOW SAMPLE THEN TEST ==============//\n  136: if (TASK.RewardStage === 1){\n  137      frame.shown=[]\n  138      for (var q in CANVAS.sequence){\n\n1 match in 1 file\n\n\nSearching 13 files for \"NFixations\"\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_runtrial.js:\n   93  \n   94  //============ FIXATION SCREEN ============//\n   95: FLAGS.waitingforTouches = TASK.NFixations\n   96  \n   97  CURRTRIAL.allfixationxyt = []\n   ..\n  120      CURRTRIAL.fixationtouchevent = touchhold_return.type\n  121      CURRTRIAL.fixationxyt = [touchhold_return.cxyt[1], touchhold_return.cxyt[2], touchhold_return.cxyt[3]]\n  122:     CURRTRIAL.allfixationxyt[TASK.NFixations - FLAGS.waitingforTouches - 1] = CURRTRIAL.fixationxyt\n  123      if (CURRTRIAL.fixationtouchevent == \"touchheld\"){\n  124          CURRTRIAL.response = CURRTRIAL.correctitem\n\n2 matches in 1 file\n\n\nSearching 13 files for \"FLAGS.waitingforTouches\"\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_eventlisteners.js:\n   38  \t\t\t// Get CHOICE,XYT\n   39  \t\t\tvar touchcxyt = [-1, -1, -1, -1]\n   40: \t\t\tif (FLAGS.waitingforTouches > 0 && touchevent.type != \"touchend\" && touchevent.type != \"mouseup\"){\n   41  \t\t\t\tvar chosenbox = -1\n   42  \t\t\t\tif (touchevent.type == \"touchstart\" || touchevent.type == \"touchmove\"){\n   ..\n   78  \t\t\t\t\t\t//Start timer\n   79  \t\t\t\t\t\ttouchTimer = setTimeout(function(){\n   80: \t\t\t\t\t\t\tFLAGS.waitingforTouches--\n   81  \t\t\t\t\t\t\tFLAGS.acquiredTouch = 0\n   82  \t\t\t\t\t\t\tFLAGS.touchGeneratorCreated = 0 //block other callbacks\n   ..\n   85  \t\t\t\t\t} //if touch hold required\n   86  \t\t\t\t\telse {\n   87: \t\t\t\t\t\tFLAGS.waitingforTouches--\n   88  \t\t\t\t\t\tFLAGS.acquiredTouch = 0\n   89  \t\t\t\t\t\treturn_event.type = \"touchheld\"\n   ..\n  120  \twaitforEvent = waitforeventGenerator(); // start async function\n  121  \tFLAGS.touchGeneratorCreated = 1\n  122: \t////console.log('GENERATOR CREATED waiting for ntouches',FLAGS.waitingforTouches)\n  123  \twaitforEvent.next(); //move out of default state\n  124  \treturn p;\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_globalvariables.js:\n   64  FLAGS.debug_mode = 1; \n   65  \n   66: FLAGS.waitingforTouches = 0\n   67  FLAGS.punishOutsideTouch = 0\n   68  FLAGS.acquiredTouch = 0\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_runtrial.js:\n   93  \n   94  //============ FIXATION SCREEN ============//\n   95: FLAGS.waitingforTouches = TASK.NFixations\n   96  \n   97  CURRTRIAL.allfixationxyt = []\n   98: while (FLAGS.waitingforTouches > 0){\n   99      \n  100      CURRTRIAL.fixationgridindex = TASK.StaticFixationGridIndex;\n  ...\n  120      CURRTRIAL.fixationtouchevent = touchhold_return.type\n  121      CURRTRIAL.fixationxyt = [touchhold_return.cxyt[1], touchhold_return.cxyt[2], touchhold_return.cxyt[3]]\n  122:     CURRTRIAL.allfixationxyt[TASK.NFixations - FLAGS.waitingforTouches - 1] = CURRTRIAL.fixationxyt\n  123      if (CURRTRIAL.fixationtouchevent == \"touchheld\"){\n  124          CURRTRIAL.response = CURRTRIAL.correctitem\n  ...\n  128      for (var q in CANVAS.sequenceblank){frame.shown[q]=0}\n  129      frame.current=0;\n  130:     if (FLAGS.waitingforTouches > 0){\n  131          await displayTrial(CANVAS.sequenceblank,CANVAS.tsequenceblank);\n  132      } //blank out screen\n  ...\n  146  \n  147  //========= AWAIT TOUCH RESPONSE =========//\n  148: FLAGS.waitingforTouches = 1    \n  149  FLAGS.punishOutsideTouch = 0            \n  150  \n\n10 matches across 3 files\n\n\nSearching 13 files for \"FixationDuration\"\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_runtrial.js:\n  117  \n  118      //========= AWAIT HOLD FIXATION TOUCH =========//\n  119:     var touchhold_return = await touchhold_promise(TASK.FixationDuration,boundingBoxesFixation,FLAGS.punishOutsideTouch)\n  120      CURRTRIAL.fixationtouchevent = touchhold_return.type\n  121      CURRTRIAL.fixationxyt = [touchhold_return.cxyt[1], touchhold_return.cxyt[2], touchhold_return.cxyt[3]]\n\n1 match in 1 file\n\n\nSearching 13 files for \"NStickyResponse\"\n\n0 matches\n\nSearching 13 files for \"ConsecutiveHitsITI\"\n\n0 matches\n\nSearching 13 files for \"NConsecutiveHitsforBonus\"\n\n0 matches\n\nSearching 13 files for \"NRewardMax\"\n\n0 matches\n\nSearching 13 files for \"task\"\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk.html:\n   52  \t<button name=\"doneEditingParams\" style=\"visibility:hidden; position: absolute; top: 45%; left: 70%; height: 75px; width: 100px; border-radius: 20px\">Done editing params</button>\n   53  \n   54: \t<button name=\"doneTestingTask\" style=\"visibility:hidden; position: absolute; top: 55%; left: 70%; height: 75px; width: 200px; border-radius: 20px; z-index:101\">Done with testing trials</button>\n   55  \n   56  \t<button name=\"SyncButton\" style=\"visibility:hidden; position: absolute; top: 1%; left: 92%; height: 30px; width: 50px; font-size: 10px; color: green; border-radius: 10px; z-index:101\">Sync data</button>\n   ..\n  132  document.querySelector(\"button[name=doneEditingParams]\").addEventListener(\n  133  \t'mouseup',doneEditingParams_listener,false)\n  134: document.querySelector(\"button[name=doneTestingTask]\").addEventListener(\n  135: \t'touchend',doneTestingTask_listener,false)\n  136: document.querySelector(\"button[name=doneTestingTask]\").addEventListener(\n  137: \t'mouseup',doneTestingTask_listener,false)\n  138  \n  139  document.querySelector(\"button[name=SyncButton]\").addEventListener(\n  ...\n  194  \tParamFilePath = PARAM_DIRPATH + SESSION.Subject + \"_params.txt\";\n  195  \t_funcreturn = await DW.loadParametersfromDropbox(ParamFilePath)\n  196: \tTASK = _funcreturn[0]\n  197  \tParamFileRev = _funcreturn[1]\n  198  \t\n  ...\n  200  \t\n  201  \t//========= Start in TEST mode =======//\n  202: \tdocument.querySelector(\"button[name=doneTestingTask]\").style.display = \"block\"\n  203: \tdocument.querySelector(\"button[name=doneTestingTask]\").style.visibility = \"visible\"\n  204  \t\n  205  \n  ...\n  209  \n  210  // ============ MAIN LOOP ==================================================================================== // \n  211: console.log('LINE 206', TASK)\n  212: __initial_load_TASK = TASK\n  213: __initial_load_TASK_ARCHIVE = TASK_ARCHIVE // Reset to this once you transition from debug to test mode\n  214  \n  215: if (TASK.Automator == 1){\n  216  \tAM = new Automator(\"uniform_with_replacement\")\n  217  \tawait AM.build(5)\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_TrialQueue.js:\n    1  class TrialQueue { \n    2  \n    3: constructor(samplingStrategy, ImageBagsSample, ImageBagsTest, ObjectGridIndex, TestGridIndex, samplingRNGseed, trial_num_TaskStream, ){\n    4  \t// Sampling properties\n    5  \tthis.samplingStrategy = samplingStrategy; \n    6: \tthis.trialStartNumber = trial_num_TaskStream; \n    7  \tthis.samplingRNGseed = samplingRNGseed; \n    8  \n    .\n  155  \n  156  \t// Outputs: \n  157: \t//\t[0]: testIndices: array of ints, of length TASK.TestGridIndex.length. The elements are indexes of testbag_labels. The order corresponds to TestGridIndex. \n  158  \t//\t[1]: correctSelection: int. It indexes testIndices / TestGridIndex to convey the correct element. \n  159  \n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_automator.js:\n   14  \t\t\tvar _property = this.automator_data[a][property]\n   15  \t\t}\n   16: \t\telse if(property == 'trial_num_TaskStream'){\n   17: \t\t\t//console.log('Reverting to 0 for trial_num_TaskStream')\n   18  \t\t\tvar _property = 0\n   19  \t\t}\n   20  \t\telse{\n   21: \t\t\t//console.log('Reverting to TASK setting for '+property)\n   22: \t\t\tvar _property = TASK[property]\n   23  \t\t}\n   24  \t\treturn _property\n   ..\n   34  \t\t// trialhistory.correct \n   35  \t\t// trialhistory.trialnumber \t\t\n   36: \t\tthis.automator_data = await DW.parseAutomatorFilefromDropbox(TASK.AutomatorFilePath)\n   37  \t\t// await DW.saveParameterstoDropbox() \n   38  \n   ..\n   41  \n   42  \n   43: \t\tfor (var a = TASK.CurrentAutomatorStage; a < this.automator_data.length; a++){\n   44  \t\t\t\n   45  \t\t\tconsole.time('Stage '+a)\n   ..\n   49  \t\t\tvar _ImageBagsTest = this._populate_default(a, 'ImageBagsTest')\n   50  \t\t\tvar _samplingRNGseed = this._populate_default(a, 'samplingRNGseed')\n   51: \t\t\tvar _trial_num_TaskStream = this._populate_default(a, 'trial_num_TaskStream')\n   52  \t\t\t\n   53  \t\t\tvar _ObjectGridIndex = this._populate_default(a, 'ObjectGridIndex') \n   ..\n   62  \t\t\t\t_TestGridIndex,\n   63  \t\t\t\t_samplingRNGseed, \n   64: \t\t\t\t_trial_num_TaskStream,\n   65  \t\t\t\t); \n   66  \n   ..\n   77  \t\tthis.__initial_trial_history_on_load = undefined\n   78  \t}\n   79: \tasync monitorStage_State_and_Transition(TASK){\n   80  \n   81  \t\t// Call this at the beginning of each trial. \n   82: \t\t// Check for stage transitions, and if necessary, change TASK. \n   83  \t\t// Enforce adherence to the automator file if user has changed paramfile.\n   84  \n   85: \t\tvar current_stage_hash = stageHash(TASK); \n   86: \t\tvar i_current_stage = TASK.CurrentAutomatorStage\n   87  \n   88: \t\t// Overwrite any user-generated changes to TASK to adhere to i_current_stage\n   89  \t\tfor (var property in this.automator_data[i_current_stage]){\n   90  \t\t\tif (this.automator_data[i_current_stage].hasOwnProperty(property)){ // Apparently a necessary 'if' statement, as explained in: http://stackoverflow.com/questions/8312459/iterate-through-object-properties\n   ..\n   93  \t\t\t\t\tcontinue \n   94  \t\t\t\t}\n   95: \t\t\t\tif (!(TASK[property].toString() == this.automator_data[i_current_stage][property].toString())){\n   96  \n   97: \t\t\t\t\tTASK[property] = this.automator_data[i_current_stage][property]\n   98  \t\t\t\t\tFLAGS.need2writeParameters=1\n   99  \t\t\t\t}\n  ...\n  114  \t\tconsole.log('For '+ntrials+' trials, pctcorrect='+pctcorrect)\n  115  \n  116: \t\t// ---------- CHANGE TASK.STUFF TO AUTOMATOR DATA [ NEXT_STAGE ] --------------------------------------- \n  117  \t\tif(pctcorrect >= MinPercentCriterion && ntrials >= MinTrialsCriterion){\n  118: \t\t\tTRIAL_NUMBER_FROM_TASKSTREAM_START = 0 // todo: read from disk \n  119: \t\t\tconsole.log('TASK_ARCHIVE.push @ stage transition')\n  120: \t\t\tTASK_ARCHIVE.push(TASK) // Archive current TASK state\n  121: \t\t\tTASK_ARCHIVE_COUNTER++\n  122  \t\t\t// If finished final stage of automator,\n  123  \n  124: \t\t\tif(TASK.CurrentAutomatorStage+1 >= this.automator_data.length){\n  125  \t\t\t\t// Stay in current stage settings, and \n  126  \t\t\t\t// Turn automator off\n  127: \t\t\t\tTASK.Automator = 0; \n  128: \t\t\t\tTASK.CurrentAutomatorStage = 'off';\n  129  \t\t\t\tconsole.log('COMPLETED FINAL STAGE, TURNING AUTOMATOR OFF')\n  130  \t\t\t\tconsole.log('With '+pctcorrect+'\\% performance on n='+ntrials+', subject completed the final stage '+(i_current_stage)+' of '+(this.automator_data.length-1)+' (zero indexing) of automator.')\n  131: \t\t\t\treturn TASK\n  132  \t\t\t}\n  133  \t\t\telse{\n  134  \t\t\t\t// Otherwise, advance to the next stage.\n  135: \t\t\t\tTASK.CurrentAutomatorStage = TASK.CurrentAutomatorStage + 1; \n  136  \t\t\t\tFLAGS.need2saveParameters=1\n  137  \t\t\t\tconsole.log('SUBJECT ADVANCED TO STAGE ' + (i_current_stage+1) + ' of '+(this.automator_data.length-1) + ' with ' + pctcorrect+'\\% performance on n='+ntrials)\n  138  \t\t\t\tconsole.log('With '+pctcorrect+'\\% performance on n='+ntrials+', subject advanced to stage '+(i_current_stage+1)+' of '+(this.automator_data.length-1)+' (zero indexing) of automator.')\n  139  \n  140: \t\t\t\t// Update TASK \n  141: \t\t\t\tvar old_imageBagsSample = TASK.ImageBagsSample\n  142: \t\t\t\tvar old_imageBagsTest = TASK.ImageBagsTest\n  143  \n  144  \t\t\t\tfor (var property in this.automator_data[i_current_stage+1]){\n  ...\n  148  \t\t\t\t\t}\n  149  \t\t\t\t\tif (this.automator_data[i_current_stage+1].hasOwnProperty(property)){ \n  150: \t\t\t\t\t\tif (!(TASK[property].toString() == this.automator_data[i_current_stage+1][property].toString())){\n  151: \t\t\t\t\t\t\tconsole.log('\\\"'+property+'\\\" changed from '+TASK[property]+' to '+this.automator_data[i_current_stage+1][property])\n  152  \n  153: \t\t\t\t\t\t\tTASK[property] = this.automator_data[i_current_stage+1][property]\n  154  \t\t\t\t\t\t\t\n  155  \t\t\t\t\t\t}\n  ...\n  158  \n  159  \t\t\t\t// If imagebags are changed by automator, load images at beginning of next trial. \n  160: \t\t\t\tif(!old_imageBagsTest.equals(TASK.ImageBagsTest) || !old_imageBagsSample.equals(TASK.ImageBagsSample)){\n  161  \t\t\t\t\tFLAGS.need2loadImages = 1; \n  162  \t\t\t\t}\n  ...\n  164  \t\t}\n  165  \n  166: \t\treturn TASK  \n  167  \t}\n  168  }\n  ...\n  172  \n  173  \n  174: function stageHash(task){\n  175  \t// Returns a value that uniquely describes the automator and stage of the automator\n  176  \tvar current_stage_hash_string = ''\n  177: \tif (task.Automator != 0){\n  178: \t\tcurrent_stage_hash_string = task.AutomatorFilePath+'_stage'+task.CurrentAutomatorStage; \n  179  \t}\n  180  \n  ...\n  185  \treturn current_stage_hash_string\n  186  \n  187: \t// Todo: decide whether to count trials which have TASK that is consistent with an automator stage, as being part of that stage\n  188  }\n  189  \n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_dropbox.js:\n  203  \t\t\tvar data = JSON.parse(datastring)\n  204  \n  205: \t\t\tvar TASK_entry = data\n  206  \t\t\tvar ParamFileRev = filemeta.rev\n  207: \t\t\treturn [TASK_entry, ParamFileRev]; \n  208  \t\t}\n  209  \t\tcatch(error){\n  ...\n  409  \t\t\tvar session_data = data[0]\n  410  \t\t\tvar UnixTimeStampAtStart = session_data.UnixTimeStampAtStart\n  411: \t\t\tvar task_archive_data = data[2]\n  412  \t\t\tvar trial_data = data[4]\n  413  \n  ...\n  420  \n  421  \t\t\t\t// Current automator stage \n  422: \t\t\t\tvar current_stage = stageHash(task_archive_data[task_archive_data.length-1])\n  423  \t\t\t\ttrialhistory.trainingstage.push(current_stage)\n  424  \n  ...\n  434  \n  435  \t//================== WRITE JSON ==================//\n  436: \tasync saveTrialDatatoDropbox(SESSION, DEVICE, TASK_ARCHIVE, CANVAS, TRIAL, save_to_debug_directory){\n  437  \t\t// Add request to queue \n  438  \n  ...\n  440  \t\tdataobj.push(SESSION)\n  441  \t\tdataobj.push(DEVICE)\n  442: \t\tdataobj.push(TASK_ARCHIVE)\n  443  \t\tdataobj.push(CANVAS)\n  444  \t\tdataobj.push(TRIAL)\n  ...\n  460  \t\t\t\tcontents: datastr,\n  461  \t\t\t\tmode: {[\".tag\"]: \"overwrite\"} })\n  462: \t\t\t\tconsole.log(TASK.CurrentAutomatorStage+\" BEHAVIOR FILE UPLOADED at \"+savepath)\n  463  \t\t\t\n  464  \n  ...\n  561  \t\ttry{\n  562  \t\t\tvar savepath = ParamFilePath\n  563: \t\t    var datastr = JSON.stringify(TASK ,null,' ');\n  564  \n  565  \t\t\tvar response = await this.dbx.filesUpload({\n  ...\n  572  \t\t\t\tParamFileRev = filemeta.rev\n  573  \t\t\t}\n  574: \t\t\tconsole.log(\"TASK written to disk as \"+ParamFilePath+\". Size: \" + response.size)\n  575  \t\t\treturn 0; //need2saveParameters\n  576  \t\t}\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_eventlisteners.js:\n  167  }\n  168  \n  169: function doneTestingTask_listener(event){\n  170  \tevent.preventDefault()\n  171  \t//console.log(\"User is done testing. Start saving data\");\n  ...\n  173  \t\n  174  \trenderBlank(CANVAS.obj.blank)\n  175: \tdocument.querySelector(\"button[name=doneTestingTask]\").style.display = \"none\"\n  176  \treturn\n  177  }\n  ...\n  187  async function sync_data_listener(event){\n  188  \tconsole.log(\"Called data save from sync button\")\n  189: \tawait DW.saveTrialDatatoDropbox(TASK_ARCHIVE, CANVAS, TRIAL, FLAGS.debug_mode)\n  190  \tawait DW.saveTouchestoDropbox(FLAGS.debug_mode)\n  191  \n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_globalvariables.js:\n   10  \n   11  TRIAL_NUMBER_FROM_SESSION_START = 0 \n   12: TRIAL_NUMBER_FROM_TASKSTREAM_START = 0\n   13  RewardDuration = 0 \n   14  \n   15  var ParamFilePath = ''; \n   16: var ParamFileRev = ''; // Tracks revision number of the TASK file on disk. \n   17  \n   18: TASK_ARCHIVE_COUNTER = 0 // attached to trial data\n   19: var TASK_ARCHIVE = []; // Array whose entries are objects that encapsulates state of the current task, read from Subject's Params file\n   20: var TASK // Current \n   21  \n   22  var TRIAL = {} // Global that contains data variables that are incremented every trial, and are dumped to disk for scientific purposes.\n   ..\n   37  TRIAL.TSequenceActual = []\n   38  TRIAL.trial_num_Session = []\n   39: TRIAL.trial_num_TaskStream = []\n   40  TRIAL.reward_duration = []\n   41: TRIAL.TASK_ARCHIVE_counter = []\n   42  \n   43  var DEVICE = {} // Does not change during a session on a particular device \n   ..\n  113  CURRTRIAL.tsequenceactual = []\n  114  CURRTRIAL.tsequencedesired = []\n  115: CURRTRIAL.TASK_idx = []\n  116  \n  117  var boundingBoxesFixation={}; //where the fixation touch targets are on the canvas\n  ...\n  131  function transition_from_debug_to_science_trials(){\n  132  \n  133: \t// Reset TASK to initial load state \n  134: \tTASK_ARCHIVE = __initial_load_TASK_ARCHIVE\n  135: \t__initial_load_TASK_ARCHIVE = undefined\n  136: \tTASK = __initial_load_TASK\n  137: \t__initial_load_TASK = undefined\n  138: \tTASK_ARCHIVE_COUNTER = 0\n  139  \n  140  \t// Reset automator \n  141: \tif(TASK.Automator == 1){\n  142  \t\tconsole.log(\"Reset AM\")\n  143  \t\tAM.resetToInitialLoadState()\n  ...\n  166  \tTRIAL.TSequenceActual = []\n  167  \tTRIAL.trial_num_Session = []\n  168: \tTRIAL.trial_num_TaskStream = []\n  169  \tTRIAL.reward_duration = []\n  170: \tTRIAL.TASK_ARCHIVE_counter = []\n  171  \n  172  \n  173  \tTRIAL_NUMBER_FROM_SESSION_START = 0\n  174: \tTRIAL_NUMBER_FROM_TASKSTREAM_START = 0 // todo: read from disk\n  175: \tTASK_ARCHIVE_COUNTER = 0\n  176  \n  177  \treturn \n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_installsettings.js:\n   24  \n   25  \n   26: var PARAM_DIRPATH = \"/Tasks/SubjectParameters/\"\n   27  var SOUND_FILEPREFIX = \"/Resources/sounds/au\"\n   28  var AUTOMATOR_FILEPATH\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_runtrial.js:\n    2  async function runtrial(){\n    3  RewardDuration = 0 \n    4: if (TASK.Automator !=0){    \n    5:     TASK = await AM.monitorStage_State_and_Transition(TASK);\n    6  }\n    7  \n    .\n   11      INITIALIZE = false \n   12  \n   13:     var old_ImageBagsSample = TASK.ImageBagsSample\n   14:     var old_ImageBagsTest = TASK.ImageBagsTest\n   15      var _funcreturn = await DW.loadParametersfromDropbox(ParamFilePath)\n   16:     TASK =_funcreturn[0]\n   17      ParamFileRev = _funcreturn[1]\n   18  \n   19:     TASK_ARCHIVE.push(TASK)\n   20:     TASK_ARCHIVE_COUNTER++\n   21      //============= SET UP CANVAS =============//\n   22:     // Update canvas based on latest TASK state: \n   23:     refreshCanvasSettings(TASK, RewardDuration); \n   24      setupCanvasHeadsUp()\n   25      windowWidth = document.body.clientWidth; //get true window dimensions at last possible moment\n   ..\n   40      ]\n   41  \n   42:     if(!old_ImageBagsTest.equals(TASK.ImageBagsTest) || !old_ImageBagsSample.equals(TASK.ImageBagsSample)){\n   43          FLAGS.need2loadImages = 1; \n   44      }\n   ..\n   47  // Check if images need to be reloaded. \n   48  if (FLAGS.need2loadImages == 1){\n   49:     if(TASK.Automator != 1){\n   50          var samplingStrategy = 'uniform_with_replacement'\n   51:         TQ = new TrialQueue(samplingStrategy, TASK.ImageBagsSample, TASK.ImageBagsTest, TASK.ObjectGridIndex, TASK.TestGridIndex, TASK.samplingRNGseed, TRIAL_NUMBER_FROM_TASKSTREAM_START)\n   52          await TQ.build(1)\n   53      }   \n   54  \n   55:     else if(TASK.Automator == 1){\n   56:         TQ = AM.AutomatorPreBuffer.TrialQueue[TASK.CurrentAutomatorStage]\n   57      } \n   58  \n   ..\n   63  \n   64      // Write down dimensions of (assumedly) all images in samplebag and testbag, based on the first sample image.\n   65:     await TQ.get_trial(TRIAL_NUMBER_FROM_TASKSTREAM_START)\n   66      var representative_image = await TQ.IB.get_by_name(TQ.sampleq.filename[0])\n   67      DEVICE.source_ImageWidthPixels = representative_image.width\n   ..\n   72  \n   73  // define image display grid\n   74: FixationRadius=(DEVICE.source_ImageWidthPixels/2)*TASK.FixationScale*DEVICE.CanvasRatio\n   75: funcreturn = defineImageGrid(TASK.NGridPoints, DEVICE.source_ImageWidthPixels, DEVICE.source_ImageHeightPixels, TASK.GridScale);\n   76  xcanvascenter = funcreturn[0]\n   77  ycanvascenter = funcreturn[1]\n   ..\n   86  //============ SELECT SAMPLE & TEST IMAGES ============//\n   87  // Draw one (1) sample image from samplebag\n   88: [CURRTRIAL.sampleimage, CURRTRIAL.sampleindex, CURRTRIAL.testimages, CURRTRIAL.testindices, CURRTRIAL.correctitem] = await TQ.get_trial(TRIAL_NUMBER_FROM_TASKSTREAM_START);\n   89  \n   90  \n   91  //============ AWAIT BUFFER CANVASES WITH SAMPLE & TEST IMAGES ============//\n   92: await bufferTrialImages(CURRTRIAL.sampleimage, TASK.SampleGridIndex, CURRTRIAL.testimages, TASK.TestGridIndex, CURRTRIAL.correctitem);\n   93  \n   94  //============ FIXATION SCREEN ============//\n   95: FLAGS.waitingforTouches = TASK.NFixations\n   96  \n   97  CURRTRIAL.allfixationxyt = []\n   98  while (FLAGS.waitingforTouches > 0){\n   99      \n  100:     CURRTRIAL.fixationgridindex = TASK.StaticFixationGridIndex;\n  101  \n  102      // Render fixation screen \n  103:     var color = \"white\" // todo move into task    \n  104      renderFixationUsingDot(color, CURRTRIAL.fixationgridindex, FixationRadius, CANVAS.obj.touchfix);\n  105      \n  ...\n  117  \n  118      //========= AWAIT HOLD FIXATION TOUCH =========//\n  119:     var touchhold_return = await touchhold_promise(TASK.FixationDuration,boundingBoxesFixation,FLAGS.punishOutsideTouch)\n  120      CURRTRIAL.fixationtouchevent = touchhold_return.type\n  121      CURRTRIAL.fixationxyt = [touchhold_return.cxyt[1], touchhold_return.cxyt[2], touchhold_return.cxyt[3]]\n  122:     CURRTRIAL.allfixationxyt[TASK.NFixations - FLAGS.waitingforTouches - 1] = CURRTRIAL.fixationxyt\n  123      if (CURRTRIAL.fixationtouchevent == \"touchheld\"){\n  124          CURRTRIAL.response = CURRTRIAL.correctitem\n  ...\n  150  \n  151  var p1 = touchhold_promise(0,boundingBoxesChoice,FLAGS.punishOutsideTouch)\n  152: var p2 = choiceTimeOut(TASK.ChoiceTimeOut)\n  153  \n  154  var race_return = await Promise.race([p1,p2])\n  ...\n  200  else if (CURRTRIAL.correct == 0) {\n  201      CANVAS.sequencepost[1] = \"punish\";\n  202:     CANVAS.tsequencepost[2] = CANVAS.tsequencepost[1]+TASK.PunishTimeOut;\n  203      frame.shown=[];\n  204      for (var q in CANVAS.sequencepost){frame.shown[q]=0}; frame.current=0;\n  ...\n  224  TRIAL.CorrectItem.push(CURRTRIAL.correctitem)\n  225  TRIAL.NReward.push(CURRTRIAL.nreward)\n  226: TRIAL.AutomatorStage.push(TASK.CurrentAutomatorStage)\n  227  TRIAL.TSequenceDesired.push(CURRTRIAL.tsequencedesired)\n  228  TRIAL.TSequenceActual.push(CURRTRIAL.tsequenceactual)\n  229  TRIAL.trial_num_Session.push(TRIAL_NUMBER_FROM_SESSION_START)\n  230: TRIAL.trial_num_TaskStream.push(TRIAL_NUMBER_FROM_TASKSTREAM_START)\n  231  TRIAL.reward_duration.push(RewardDuration)\n  232: TRIAL.TASK_ARCHIVE_counter.push(TASK_ARCHIVE_COUNTER)\n  233  \n  234: if (TASK.Automator == 1){\n  235  \n  236:     var current_stage = stageHash(TASK); \n  237      AM.trialhistory.trainingstage.push(current_stage);\n  238      AM.trialhistory.starttime.push(CURRTRIAL.starttime)\n  ...\n  241  }\n  242  TRIAL_NUMBER_FROM_SESSION_START++\n  243: TRIAL_NUMBER_FROM_TASKSTREAM_START++\n  244  \n  245  // Asynchronous save at most every T seconds\n  ...\n  248  var _ms_since_last_touch_data_save = performance.now() - last_touch_save\n  249  if ( _ms_since_last_trial_data_save > TRIALDATA_SAVE_TIMEOUT_PERIOD){ \n  250:     // console.log(_ms_since_last_trial_data_save/1000+'s since last trial data save. At trial'+ TRIAL_NUMBER_FROM_SESSION_START +'. automator stage:'+TASK.CurrentAutomatorStage)\n  251:     DW.saveTrialDatatoDropbox(SESSION, DEVICE, TASK_ARCHIVE, CANVAS, TRIAL, FLAGS.debug_mode)\n  252      last_trial_data_save = performance.now()\n  253  }\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_screenfunctions.js:\n   19  \n   20  //================== LOAD STATUS DISPLAY ==================//\n   21: function refreshCanvasSettings(TASK_entry){\n   22  \t// TODO: cleanup CANVAS; separate canvas ID from sequence logic; 'tsequence' variables coded by length rather than absolute time\n   23  \n   24  \t// Adjust length / toggle presence of gray screen between sample and test screens\n   25: \tif (TASK_entry.SampleOFF > 0){\n   26  \t\tCANVAS.sequence = [\"blank\", \"sample\",\"blank\",\"test\"]\n   27: \t\tCANVAS.tsequence = [0,100,100+TASK_entry.SampleON,100+TASK_entry.SampleON+TASK_entry.SampleOFF]; \n   28  \t}\n   29: \telse if (TASK_entry.SampleOFF <= 0 ){\n   30  \t\tCANVAS.sequence = [\"blank\",\"sample\",\"test\"]\n   31: \t\tCANVAS.tsequence = [0,100,100+TASK_entry.SampleON]; \n   32  \t}\n   33  \t\n   ..\n   36  \n   37  \t// Adjust location of CANVAS based on species-specific setup\n   38: \tif (TASK_entry.Species == \"macaque\" || TASK_entry.Species == \"human\"){\n   39  \t\tCANVAS.headsupfraction=0;\n   40  \t}\n   41: \telse if (TASK_entry.Species == \"marmoset\"){\n   42  \t\tCANVAS.headsupfraction=1/3-0.06;\n   43  \t}\n   ..\n  175  \tcontext.fillStyle=\"#7F7F7F\";  // Gray out before buffering sample\n  176  \tcontext.fillRect(0,100, canvasobj.width,canvasobj.height); // 100 is for the photodiode bar at the top of the screen\n  177: \tawait renderImageOnCanvas(sample_image, sample_image_grid_index, TASK.SampleScale, CANVAS.obj.sample)\n  178  \t\n  179  \t//========== BUFFER TEST CANVAS ==========//\n  ...\n  192  \tfor (i = 0; i<test_images.length; i++){\n  193  \t\t// If HideTestDistractors, simply do not draw the image\n  194: \t\tif(TASK.HideTestDistractors == 1){\n  195  \t\t\tif (correct_index != i){\n  196  \t\t\t\tboundingBoxesChoice.x.push([NaN, NaN]); \n  ...\n  200  \t\t}\t\t\n  201  \n  202: \t\tfuncreturn = await renderImageOnCanvas(test_images[i], test_image_grid_indices[i], TASK.TestScale, CANVAS.obj.test); \n  203  \t\tboundingBoxesChoice.x.push(funcreturn[0]); \n  204  \t\tboundingBoxesChoice.y.push(funcreturn[1]); \n  ...\n  206  \n  207  \t// Option: draw sample (TODO: remove the blink between sample screen and test screen)\n  208: \tif (TASK.KeepSampleON==1){\n  209: \t\tawait renderImageOnCanvas(sample_image, sample_image_grid_index, TASK.SampleScale, CANVAS.obj.test)\n  210  \t}\n  211  \n  ...\n  340  \t\toutofbounds_str = outofbounds_str + \"<br>\" + \"Fixation dot is out of bounds\"\n  341  \t}\n  342: \tdisplayPhysicalSize(TASK.Tablet,displaycoord,canvasobj)\n  343  \n  344  \t\n  ...\n  355  \t\toutofbounds_str = outofbounds_str + \"<br>\" + \"Sample Image is out of bounds\"\n  356  \t}\n  357: \tdisplayPhysicalSize(TASK.Tablet,displaycoord,canvasobj)\n  358  \n  359  \n  ...\n  371  \t\t\toutofbounds_str = outofbounds_str + \"<br>\" + \"Test Image\" + i + \" is out of bounds\"\n  372  \t\t}\n  373: \t\tdisplayPhysicalSize(TASK.Tablet,displaycoord,canvasobj)\n  374  \t}\n  375  \tif (outofbounds_str == ''){\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_utils.js:\n  219  function dispensePunish(){\n  220    return new Promise(function(resolve,reject){\n  221:     setTimeout(function(){resolve(1);},TASK.PunishTimeOut); //milliseconds\n  222    }).then();\n  223  }\n  ...\n  240    var m = 0;\n  241    var b = 0;\n  242:   if (TASK.Pump == 1){\n  243      // m = 1.13; b = 15.04;\n  244      m = 0.99; b = 14.78;\n  245    } //peristaltic (adafruit)\n  246:   else if (TASK.Pump == 2){\n  247      // m = 3.20; b = -15.47;\n  248      m = 1.40; b = -58.77;\n  249    } //submersible (tcs)\n  250:   else if (TASK.Pump == 3){\n  251      // m = 0.80; b = -3.00;\n  252      m=0.91; b = -15;\n  253    } //diaphragm (tcs)\n  254:   else if (TASK.Pump == 4){\n  255      m = 0.0531; b=-1.2594;\n  256    } //piezoelectric (takasago)\n  257:   else if (TASK.Pump == 5){\n  258      m = 2.4463; b=53.6418;\n  259    } //new diaphragm (tcs)\n  260:   else if (TASK.Pump == 6){\n  261:     if (TASK.Liquid==1 || TASK.Liquid==3){\n  262        m=0.1251; b=-0.0833; //1=water 2=water-condensed milk 3=marshmallow slurry (4/30mL)\n  263      }\n  264:     else if (TASK.Liquid==2){\n  265        m=0.0550; b=0.6951; //water-condensed milk (50/50)\n  266      }\n  267    } //piezoelectric 7mL/min (takasago)\n  268:   return (TASK.RewardPer1000Trials - b)/m/1000;\n  269    \n  270  }\n\n171 matches across 10 files\n\n\nSearching 13 files for \"Separated\"\n\n0 matches\n\nSearching 13 files for \"Liquid\"\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_utils.js:\n  259    } //new diaphragm (tcs)\n  260    else if (TASK.Pump == 6){\n  261:     if (TASK.Liquid==1 || TASK.Liquid==3){\n  262        m=0.1251; b=-0.0833; //1=water 2=water-condensed milk 3=marshmallow slurry (4/30mL)\n  263      }\n  264:     else if (TASK.Liquid==2){\n  265        m=0.0550; b=0.6951; //water-condensed milk (50/50)\n  266      }\n\n3 matches in 1 file\n\n\nSearching 13 files for \"Tablet\"\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_screenfunctions.js:\n  340  \t\toutofbounds_str = outofbounds_str + \"<br>\" + \"Fixation dot is out of bounds\"\n  341  \t}\n  342: \tdisplayPhysicalSize(TASK.Tablet,displaycoord,canvasobj)\n  343  \n  344  \t\n  ...\n  355  \t\toutofbounds_str = outofbounds_str + \"<br>\" + \"Sample Image is out of bounds\"\n  356  \t}\n  357: \tdisplayPhysicalSize(TASK.Tablet,displaycoord,canvasobj)\n  358  \n  359  \n  ...\n  371  \t\t\toutofbounds_str = outofbounds_str + \"<br>\" + \"Test Image\" + i + \" is out of bounds\"\n  372  \t\t}\n  373: \t\tdisplayPhysicalSize(TASK.Tablet,displaycoord,canvasobj)\n  374  \t}\n  375  \tif (outofbounds_str == ''){\n  ...\n  439  \n  440  \n  441: function displayPhysicalSize(tabletname,displayobject_coord,canvasobj){\n  442: \tif (tabletname == \"nexus9\"){\n  443  \t\tvar dpi = 281\n  444  \t}\n  445: \telse if (tabletname == \"samsung10\"){\n  446  \t\tvar dpi = 287\n  447  \t}\n  448: \telse if (tabletname == \"samsung8\"){\n  449  \t\tvar dpi = 359\n  450  \t}\n  451: \telse if (tabletname == \"pixelc\"){\n  452  \t\tvar dpi = 308\n  453  \t}\n\n8 matches in 1 file\n\n\nSearching 13 files for \"Pump\"\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_bluetooth.js:\n   19  var ble = {\n   20    // name: \"redbearlabsnano\",\n   21:   name: \"BLENano_PumpRFID_Setta\",\n   22    namePrefix: \"BLENano_\",\n   23    serviceUUID: 0xFFFF, // Service UUID\n   24    customserviceUUID: 0xA000,\n   25    connectionUUID: 0xA001, // Connection status\n   26:   pumpdurationUUID: 0xA002, //pump duration, 2 bytes (write, write w/o response)\n   27:   pumpUUID: 0xA003, //notify pump opened by ble, 4 bytes (read,notify)\n   28    rfidUUID: 0xA004, //tag unique RFID, 13 bytes (read,notify)\n   29  \n   ..\n   32    service: [],\n   33    writeconnectioncharacteristic: [],\n   34:   writepumpdurationcharacteristic: [],\n   35:   pumpcharacteristic: [],\n   36    rfidcharacteristic: [],\n   37    connected: false,\n   ..\n   40    ping_interval: 5000,\n   41    twrite_connection: 0,\n   42:   twrite_pumpduration: 0,\n   43:   tnotify_pump: 0,\n   44    tnotify_rfid: 0,\n   45    statustext: \"\",\n   ..\n  145    characteristics = await Promise.all([\n  146        service.getCharacteristic(ble.connectionUUID),\n  147:       service.getCharacteristic(ble.pumpdurationUUID),\n  148:       service.getCharacteristic(ble.pumpUUID),\n  149        service.getCharacteristic(ble.rfidUUID)])\n  150:     var textstr = \"found a connection, pump duration, pump, & rfid characteristics\"\n  151      console.log(textstr,characteristics)\n  152      ble.statustext = ble.statustext + \"<br>\" + textstr\n  153      \n  154      ble.writeconnectioncharacteristic=characteristics[0]\n  155:     ble.writepumpdurationcharacteristic=characteristics[1]\n  156:     ble.pumpcharacteristic=characteristics[2]\n  157      ble.rfidcharacteristic=characteristics[3]\n  158  \n  159:   await ble.pumpcharacteristic.startNotifications()\n  160      var currentTime = performance.now()\n  161      while (currentTime + 1000 >= performance.now()) {\n  ...\n  163  \n  164    await ble.rfidcharacteristic.startNotifications()\n  165:     var textstr=\"pump & rfid notifications started\" + \"<br><font color=blue>\" + \" bluetooth loading complete!\"\n  166      console.log(textstr)\n  167      ble.statustext = ble.statustext + \"<br>\" + textstr\n  168      \n  169:     ble.pumpcharacteristic.addEventListener('characteristicvaluechanged',onPumpNotificationFromBLE)\n  170      ble.rfidcharacteristic.addEventListener('characteristicvaluechanged',onRFIDNotificationFromBLE)\n  171      ble.connected = true\n  ...\n  233  \n  234  //============== READ NOTIFICATIONS & WRITES ==============//\n  235: async function writepumpdurationtoBLE(num){\n  236    var arrInt8 = toBytesInt16(num)\n  237:   ble.twrite_pumpduration=performance.now()\n  238    try{\n  239:     await ble.writepumpdurationcharacteristic.writeValue(arrInt8)\n  240        var textstr = 'wrote ble val >> ' + num + ', byte values ' + arrInt8\n  241        console.log(textstr)\n  ...\n  245    }\n  246    catch(error) {\n  247:       var textstr = 'Could not write pump duration to ble device'\n  248        console.log(textstr)\n  249        ble.statustext = ble.statustext + \"<br>\" + textstr\n  ...\n  264  }\n  265  \n  266: function onPumpNotificationFromBLE(event){\n  267:   ble.tnotify_pump=performance.now()\n  268    var textstr = 'BLE read notification << ' +\n  269:           Math.round(ble.tnotify_pump - ble.twrite_pumpduration) + 'ms'\n  270    console.log(textstr)\n  271    ble.statustext = ble.statustext + \"  <---->  \" + textstr\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_runtrial.js:\n  191          }\n  192          else if (ble.connected == true){\n  193:             var p2 = writepumpdurationtoBLE(Math.round(RewardDuration*1000))\n  194              await Promise.all([p1, p2])\n  195          }\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_utils.js:\n  240    var m = 0;\n  241    var b = 0;\n  242:   if (TASK.Pump == 1){\n  243      // m = 1.13; b = 15.04;\n  244      m = 0.99; b = 14.78;\n  245    } //peristaltic (adafruit)\n  246:   else if (TASK.Pump == 2){\n  247      // m = 3.20; b = -15.47;\n  248      m = 1.40; b = -58.77;\n  249    } //submersible (tcs)\n  250:   else if (TASK.Pump == 3){\n  251      // m = 0.80; b = -3.00;\n  252      m=0.91; b = -15;\n  253    } //diaphragm (tcs)\n  254:   else if (TASK.Pump == 4){\n  255      m = 0.0531; b=-1.2594;\n  256    } //piezoelectric (takasago)\n  257:   else if (TASK.Pump == 5){\n  258      m = 2.4463; b=53.6418;\n  259    } //new diaphragm (tcs)\n  260:   else if (TASK.Pump == 6){\n  261      if (TASK.Liquid==1 || TASK.Liquid==3){\n  262        m=0.1251; b=-0.0833; //1=water 2=water-condensed milk 3=marshmallow slurry (4/30mL)\n\n34 matches across 3 files\n\n\nSearching 13 files for \"Pump\" (whole word)\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_bluetooth.js:\n   24    customserviceUUID: 0xA000,\n   25    connectionUUID: 0xA001, // Connection status\n   26:   pumpdurationUUID: 0xA002, //pump duration, 2 bytes (write, write w/o response)\n   27:   pumpUUID: 0xA003, //notify pump opened by ble, 4 bytes (read,notify)\n   28    rfidUUID: 0xA004, //tag unique RFID, 13 bytes (read,notify)\n   29  \n   ..\n  148        service.getCharacteristic(ble.pumpUUID),\n  149        service.getCharacteristic(ble.rfidUUID)])\n  150:     var textstr = \"found a connection, pump duration, pump, & rfid characteristics\"\n  151      console.log(textstr,characteristics)\n  152      ble.statustext = ble.statustext + \"<br>\" + textstr\n  ...\n  163  \n  164    await ble.rfidcharacteristic.startNotifications()\n  165:     var textstr=\"pump & rfid notifications started\" + \"<br><font color=blue>\" + \" bluetooth loading complete!\"\n  166      console.log(textstr)\n  167      ble.statustext = ble.statustext + \"<br>\" + textstr\n  ...\n  245    }\n  246    catch(error) {\n  247:       var textstr = 'Could not write pump duration to ble device'\n  248        console.log(textstr)\n  249        ble.statustext = ble.statustext + \"<br>\" + textstr\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_utils.js:\n  240    var m = 0;\n  241    var b = 0;\n  242:   if (TASK.Pump == 1){\n  243      // m = 1.13; b = 15.04;\n  244      m = 0.99; b = 14.78;\n  245    } //peristaltic (adafruit)\n  246:   else if (TASK.Pump == 2){\n  247      // m = 3.20; b = -15.47;\n  248      m = 1.40; b = -58.77;\n  249    } //submersible (tcs)\n  250:   else if (TASK.Pump == 3){\n  251      // m = 0.80; b = -3.00;\n  252      m=0.91; b = -15;\n  253    } //diaphragm (tcs)\n  254:   else if (TASK.Pump == 4){\n  255      m = 0.0531; b=-1.2594;\n  256    } //piezoelectric (takasago)\n  257:   else if (TASK.Pump == 5){\n  258      m = 2.4463; b=53.6418;\n  259    } //new diaphragm (tcs)\n  260:   else if (TASK.Pump == 6){\n  261      if (TASK.Liquid==1 || TASK.Liquid==3){\n  262        m=0.1251; b=-0.0833; //1=water 2=water-condensed milk 3=marshmallow slurry (4/30mL)\n\n12 matches across 2 files\n\n\nSearching 13 files for \"RewardPer1000Trials\" (whole word)\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_utils.js:\n  266      }\n  267    } //piezoelectric 7mL/min (takasago)\n  268:   return (TASK.RewardPer1000Trials - b)/m/1000;\n  269    \n  270  }\n\n1 match in 1 file\n\n\nSearching 13 files for \"PunishTimeOut\" (whole word)\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_runtrial.js:\n  200  else if (CURRTRIAL.correct == 0) {\n  201      CANVAS.sequencepost[1] = \"punish\";\n  202:     CANVAS.tsequencepost[2] = CANVAS.tsequencepost[1]+TASK.PunishTimeOut;\n  203      frame.shown=[];\n  204      for (var q in CANVAS.sequencepost){frame.shown[q]=0}; frame.current=0;\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_utils.js:\n  219  function dispensePunish(){\n  220    return new Promise(function(resolve,reject){\n  221:     setTimeout(function(){resolve(1);},TASK.PunishTimeOut); //milliseconds\n  222    }).then();\n  223  }\n\n2 matches across 2 files\n\n\nSearching 13 files for \"HideTestDistractors\" (whole word)\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_screenfunctions.js:\n  191  \t// Draw test object(s): \n  192  \tfor (i = 0; i<test_images.length; i++){\n  193: \t\t// If HideTestDistractors, simply do not draw the image\n  194: \t\tif(TASK.HideTestDistractors == 1){\n  195  \t\t\tif (correct_index != i){\n  196  \t\t\t\tboundingBoxesChoice.x.push([NaN, NaN]); \n\n2 matches in 1 file\n\n\nSearching 13 files for \"NGridPoints\" (whole word)\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_runtrial.js:\n   73  // define image display grid\n   74  FixationRadius=(DEVICE.source_ImageWidthPixels/2)*TASK.FixationScale*DEVICE.CanvasRatio\n   75: funcreturn = defineImageGrid(TASK.NGridPoints, DEVICE.source_ImageWidthPixels, DEVICE.source_ImageHeightPixels, TASK.GridScale);\n   76  xcanvascenter = funcreturn[0]\n   77  ycanvascenter = funcreturn[1]\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_screenfunctions.js:\n  141  //================== IMAGE RENDERING ==================//\n  142  \n  143: function defineImageGrid(ngridpoints, wd, ht, gridscale){\n  144  \tvar xgrid =[]\n  145  \tvar ygrid =[]\n  ...\n  147  \tvar ygridcent =[]\n  148  \tvar cnt=0;\n  149: \tfor (var i=1; i<=ngridpoints; i++){\n  150: \t\tfor (var j=1; j<=ngridpoints; j++){\n  151  \t\t\txgrid[cnt]=i - 1/2;\n  152  \t\t\tygrid[cnt]=j - 1/2;\n  ...\n  157  \t//center x & y grid within canvas\n  158  \tvar canvas_center_x = (document.body.clientWidth - CANVAS.offsetleft)*DEVICE.CanvasRatio*DEVICE.DevicePixelRatio/2\n  159: \tvar dx = canvas_center_x - DEVICE.CanvasRatio*ngridpoints/2*wd*gridscale; //left side of grid\n  160  \tvar canvas_center_y = (document.body.clientHeight - CANVAS.offsettop)*DEVICE.CanvasRatio*DEVICE.DevicePixelRatio/2\n  161: \tvar dy = canvas_center_y - DEVICE.CanvasRatio*ngridpoints/2*ht*gridscale; //top of grid\n  162  \tfor (var i=0; i<=xgrid.length-1; i++){\n  163  \t\txgridcent[i]=Math.round(xgrid[i]*wd*gridscale*DEVICE.CanvasRatio + dx);\n\n6 matches across 2 files\n\n\nSearching 13 files for \"NFixations\" (whole word)\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_runtrial.js:\n   93  \n   94  //============ FIXATION SCREEN ============//\n   95: FLAGS.waitingforTouches = TASK.NFixations\n   96  \n   97  CURRTRIAL.allfixationxyt = []\n   ..\n  120      CURRTRIAL.fixationtouchevent = touchhold_return.type\n  121      CURRTRIAL.fixationxyt = [touchhold_return.cxyt[1], touchhold_return.cxyt[2], touchhold_return.cxyt[3]]\n  122:     CURRTRIAL.allfixationxyt[TASK.NFixations - FLAGS.waitingforTouches - 1] = CURRTRIAL.fixationxyt\n  123      if (CURRTRIAL.fixationtouchevent == \"touchheld\"){\n  124          CURRTRIAL.response = CURRTRIAL.correctitem\n\n2 matches in 1 file\n\n\nSearching 13 files for \"FixationDuration\" (whole word)\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_runtrial.js:\n  117  \n  118      //========= AWAIT HOLD FIXATION TOUCH =========//\n  119:     var touchhold_return = await touchhold_promise(TASK.FixationDuration,boundingBoxesFixation,FLAGS.punishOutsideTouch)\n  120      CURRTRIAL.fixationtouchevent = touchhold_return.type\n  121      CURRTRIAL.fixationxyt = [touchhold_return.cxyt[1], touchhold_return.cxyt[2], touchhold_return.cxyt[3]]\n\n1 match in 1 file\n\n\nSearching 13 files for \"touchhold_promise\" (whole word)\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_eventlisteners.js:\n    1: function touchhold_promise(touchduration,boundingBoxes,punishOutsideTouch){\n    2  \tvar resolveFunc\n    3  \tvar errFunc\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_runtrial.js:\n  117  \n  118      //========= AWAIT HOLD FIXATION TOUCH =========//\n  119:     var touchhold_return = await touchhold_promise(TASK.FixationDuration,boundingBoxesFixation,FLAGS.punishOutsideTouch)\n  120      CURRTRIAL.fixationtouchevent = touchhold_return.type\n  121      CURRTRIAL.fixationxyt = [touchhold_return.cxyt[1], touchhold_return.cxyt[2], touchhold_return.cxyt[3]]\n  ...\n  149  FLAGS.punishOutsideTouch = 0            \n  150  \n  151: var p1 = touchhold_promise(0,boundingBoxesChoice,FLAGS.punishOutsideTouch)\n  152  var p2 = choiceTimeOut(TASK.ChoiceTimeOut)\n  153  \n\n3 matches across 2 files\n\n\nSearching 13 files for \"GridScale\" (whole word)\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_runtrial.js:\n   73  // define image display grid\n   74  FixationRadius=(DEVICE.source_ImageWidthPixels/2)*TASK.FixationScale*DEVICE.CanvasRatio\n   75: funcreturn = defineImageGrid(TASK.NGridPoints, DEVICE.source_ImageWidthPixels, DEVICE.source_ImageHeightPixels, TASK.GridScale);\n   76  xcanvascenter = funcreturn[0]\n   77  ycanvascenter = funcreturn[1]\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_screenfunctions.js:\n  141  //================== IMAGE RENDERING ==================//\n  142  \n  143: function defineImageGrid(ngridpoints, wd, ht, gridscale){\n  144  \tvar xgrid =[]\n  145  \tvar ygrid =[]\n  ...\n  157  \t//center x & y grid within canvas\n  158  \tvar canvas_center_x = (document.body.clientWidth - CANVAS.offsetleft)*DEVICE.CanvasRatio*DEVICE.DevicePixelRatio/2\n  159: \tvar dx = canvas_center_x - DEVICE.CanvasRatio*ngridpoints/2*wd*gridscale; //left side of grid\n  160  \tvar canvas_center_y = (document.body.clientHeight - CANVAS.offsettop)*DEVICE.CanvasRatio*DEVICE.DevicePixelRatio/2\n  161: \tvar dy = canvas_center_y - DEVICE.CanvasRatio*ngridpoints/2*ht*gridscale; //top of grid\n  162  \tfor (var i=0; i<=xgrid.length-1; i++){\n  163: \t\txgridcent[i]=Math.round(xgrid[i]*wd*gridscale*DEVICE.CanvasRatio + dx);\n  164: \t\tygridcent[i]=Math.round(ygrid[i]*ht*gridscale*DEVICE.CanvasRatio + dy);\n  165  \t}\n  166  \n\n6 matches across 2 files\n\n\nSearching 13 files for \"selectSampleImage\" (whole word)\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_TrialQueue.js:\n   70  \t\tvar _RNGseed = cantor(this.samplingRNGseed, trialnumber)\n   71  \t\t\n   72: \t\tvar sample_index = selectSampleImage(this.samplebag_labels, this.samplingStrategy, _RNGseed)\n   73  \t\tvar sample_label = this.samplebag_labels[sample_index]; \n   74  \t\tvar sample_filename = this.samplebag_paths[sample_index]; \n   ..\n  129  }\n  130  \n  131: function selectSampleImage(samplebag_labels, SamplingStrategy, _RNGseed){\n  132  \t\n  133  \tMath.seedrandom(_RNGseed)\n  ...\n  139  \t}\n  140  \telse {\n  141: \t\tthrow SamplingStrategy + \" not implemented in selectSampleImage.\"\n  142  \t}\n  143  \n\n3 matches in 1 file\n\n\nSearching 13 files for \"getAllInstancesIndexes\" (whole word)\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_TrialQueue.js:\n  154  \t\t\t\n  155  \t\t\t// Get pool of the object's test images: \n  156: \t\t\tvar object_test_indices = getAllInstancesIndexes(testbag_labels, i)\n  157  \n  158  \t\t\t// Get one (1) random sample of the object's test images: \n  ...\n  203  \tfor (var i = 0; i<testpool.length; i++){\n  204  \t\tlabel = testpool[i]\n  205: \t\tobject_test_indices = getAllInstancesIndexes(testbag_labels, label); \n  206  \t\ttest_image_index = object_test_indices[Math.floor((object_test_indices.length)*Math.random())]; \n  207  \t\ttestIndices[i] = test_image_index\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_utils.js:\n  109  \n  110  // Return all indices of val in arr\n  111: function getAllInstancesIndexes(arr, val){\n  112    var indexes = []\n  113      for(var i = 0; i < arr.length; i++)\n\n3 matches across 2 files\n\n\nSearching 13 files for \"resetToInitialLoadState\" (whole word)\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_automator.js:\n   72  \t}\n   73  \n   74: \tasync resetToInitialLoadState(){\n   75  \t\tthis.trialhistory = this.__initial_trial_history_on_load\n   76  \t\tthis.__initial_trial_history_on_load = undefined\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_globalvariables.js:\n  141  \tif(TASK.Automator == 1){\n  142  \t\tconsole.log(\"Reset AM\")\n  143: \t\tAM.resetToInitialLoadState()\n  144  \t}\n  145  \n\n2 matches across 2 files\n\n\nSearching 13 files for \"num_pre\" (whole word)\n\n0 matches\n\nSearching 13 files for \"prebuffer\" (whole word)\n\n0 matches\n\nSearching 13 files for \".build\" (whole word)\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk.html:\n  174  \t//================== await create SoundPlayer ==================// \n  175  \tSP = new SoundPlayer()\n  176: \tawait SP.build()\n  177  \t\n  178  \t// display sync button \n  ...\n  214  if (TASK.Automator == 1){\n  215  \tAM = new Automator(\"uniform_with_replacement\")\n  216: \tawait AM.build(5)\n  217  }\n  218  \n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_runtrial.js:\n   50          var samplingStrategy = 'uniform_with_replacement'\n   51          TQ = new TrialQueue(samplingStrategy, TASK.ImageBagsSample, TASK.ImageBagsTest, TASK.ObjectGridIndex, TASK.TestGridIndex, TASK.samplingRNGseed, TRIAL_NUMBER_FROM_TASKSTREAM_START)\n   52:         await TQ.build(1)\n   53      }   \n   54  \n\n3 matches across 2 files\n\n\nSearching 13 files for \".build\" (whole word)\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk.html:\n  174  \t//================== await create SoundPlayer ==================// \n  175  \tSP = new SoundPlayer()\n  176: \tawait SP.build()\n  177  \t\n  178  \t// display sync button \n  ...\n  214  if (TASK.Automator == 1){\n  215  \tAM = new Automator(\"uniform_with_replacement\")\n  216: \tawait AM.build(5)\n  217  }\n  218  \n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_runtrial.js:\n   50          var samplingStrategy = 'uniform_with_replacement'\n   51          TQ = new TrialQueue(samplingStrategy, TASK.ImageBagsSample, TASK.ImageBagsTest, TASK.ObjectGridIndex, TASK.TestGridIndex, TASK.samplingRNGseed, TRIAL_NUMBER_FROM_TASKSTREAM_START)\n   52:         await TQ.build(1)\n   53      }   \n   54  \n\n3 matches across 2 files\n\n\nSearching 13 files for \"num_prebuffer_trials\" (whole word)\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_automator.js:\n   24  \t\treturn _property\n   25  \t}\n   26: \tasync build(num_prebuffer_trials){\n   27  \t\tthis.trialhistory = await DW.readTrialHistoryFromDropbox(ndatafiles2read);\n   28  \n   ..\n   65  \n   66  \t\t\t// Populate the stage's imagebuffer with some images\n   67: \t\t\tawait this.AutomatorPreBuffer['TrialQueue'][a].build(num_prebuffer_trials)\n   68  \t\t\tconsole.timeEnd('Loaded stage '+a)\n   69  \t\t\tupdateProgressbar((a+1)/this.automator_data.length * 100)\n\n2 matches in 1 file\n\n\nSearching 13 files for \"ObjectGridIndex\" (whole word)\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_TrialQueue.js:\n    1  class TrialQueue { \n    2  \n    3: constructor(samplingStrategy, ImageBagsSample, ImageBagsTest, ObjectGridIndex, TestGridIndex, samplingRNGseed, trial_num_TaskStream, ){\n    4  \t// Sampling properties\n    5  \tthis.samplingStrategy = samplingStrategy; \n    .\n   12  \n   13  \n   14: \tthis.ObjectGridIndex = ObjectGridIndex\n   15  \tthis.TestGridIndex = TestGridIndex\n   16  \n   ..\n   74  \t\tvar sample_filename = this.samplebag_paths[sample_index]; \n   75  \n   76: \t\tvar funcreturn = selectTestImages(sample_label, this.testbag_labels,this.ObjectGridIndex,this.TestGridIndex, _RNGseed) \n   77  \t\tvar test_indices = funcreturn[0] \n   78  \t\tvar correctIndex = funcreturn[1] \n   ..\n  144  }\n  145  \n  146: function selectTestImages(correct_label, testbag_labels, ObjectGridIndex,TestGridIndex, _RNGseed){\n  147  \t\n  148  \tMath.seedrandom(_RNGseed)\n  ...\n  152  \n  153  \t// If SR is on, \n  154: \tif (ObjectGridIndex.length == testbag_labels.length){ // Is this a robust SR check?\n  155: \t\tfor (var i = 0; i<ObjectGridIndex.length; i++){\n  156  \t\t\t\n  157  \t\t\t// Get pool of the object's test images: \n  ...\n  162  \n  163  \t\t\t// Get grid index where the object should be placed: \n  164: \t\t\tvar object_grid_index = ObjectGridIndex[i] \n  165  \n  166  \t\t\torder_idx = TestGridIndex.indexOf(object_grid_index)\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_automator.js:\n   51  \t\t\tvar _trial_num_TaskStream = this._populate_default(a, 'trial_num_TaskStream')\n   52  \t\t\t\n   53: \t\t\tvar _ObjectGridIndex = this._populate_default(a, 'ObjectGridIndex') \n   54  \t\t\tvar _TestGridIndex = this._populate_default(a, 'TestGridIndex')\n   55  \n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_runtrial.js:\n   49      if(TASK.Automator != 1){\n   50          var samplingStrategy = 'uniform_with_replacement'\n   51:         TQ = new TrialQueue(samplingStrategy, TASK.ImageBagsSample, TASK.ImageBagsTest, TASK.ObjectGridIndex, TASK.TestGridIndex, TASK.samplingRNGseed, TRIAL_NUMBER_FROM_TASKSTREAM_START)\n   52          await TQ.build(1)\n   53      }   \n\n10 matches across 3 files\n\n\nSearching 13 files for \"TestGridIndex\" (whole word)\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_TrialQueue.js:\n    1  class TrialQueue { \n    2  \n    3: constructor(samplingStrategy, ImageBagsSample, ImageBagsTest, ObjectGridMapping, TestGridIndex, samplingRNGseed, trial_num_TaskStream, ){\n    4  \t// Sampling properties\n    5  \tthis.samplingStrategy = samplingStrategy; \n    .\n   13  \n   14  \tthis.ObjectGridMapping = ObjectGridMapping\n   15: \tthis.TestGridIndex = TestGridIndex\n   16  \n   17  \t// Queues\n   ..\n   74  \t\tvar sample_filename = this.samplebag_paths[sample_index]; \n   75  \n   76: \t\tvar funcreturn = selectTestImages(sample_label, this.testbag_labels,this.ObjectGridMapping,this.TestGridIndex, _RNGseed) \n   77  \t\tvar test_indices = funcreturn[0] \n   78  \t\tvar correctIndex = funcreturn[1] \n   ..\n  144  }\n  145  \n  146: function selectTestImages(correct_label, testbag_labels, ObjectGridMapping,TestGridIndex, _RNGseed){\n  147  \t\n  148  \tMath.seedrandom(_RNGseed)\n  ...\n  164  \t\t\tvar object_grid_index = ObjectGridMapping[i] \n  165  \n  166: \t\t\torder_idx = TestGridIndex.indexOf(object_grid_index)\n  167  \n  168  \t\t\t// Place the selected test image in the appropriate location in testIndices. \n  ...\n  191  \tvar distractors = []\n  192  \tlabelspace = shuffle(labelspace)\n  193: \tfor (var i=0; i <= TestGridIndex.length-2; i++){\n  194  \t\tdistractors[i] = labelspace[i]\n  195  \t}\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_automator.js:\n   52  \t\t\t\n   53  \t\t\tvar _ObjectGridMapping = this._populate_default(a, 'ObjectGridMapping') \n   54: \t\t\tvar _TestGridIndex = this._populate_default(a, 'TestGridIndex')\n   55  \n   56  \t\t\tthis.AutomatorPreBuffer['TrialQueue'][a] = new TrialQueue(\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_runtrial.js:\n   49      if(TASK.Automator != 1){\n   50          var samplingStrategy = 'uniform_with_replacement'\n   51:         TQ = new TrialQueue(samplingStrategy, TASK.ImageBagsSample, TASK.ImageBagsTest, TASK.ObjectGridMapping, TASK.TestGridIndex, TASK.samplingRNGseed, TRIAL_NUMBER_FROM_TASKSTREAM_START)\n   52          await TQ.build(1)\n   53      }   \n   ..\n   90  \n   91  //============ AWAIT BUFFER CANVASES WITH SAMPLE & TEST IMAGES ============//\n   92: await bufferTrialImages(CURRTRIAL.sampleimage, TASK.SampleGridIndex, CURRTRIAL.testimages, TASK.TestGridIndex, CURRTRIAL.correctitem);\n   93  \n   94  //============ FIXATION SCREEN ============//\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_screenfunctions.js:\n  298  }\n  299  \n  300: function renderBlankWithGridMarkers(gridx,gridy,fixationgridindex,samplegridindex,testgridindex,fixationscale,samplescale,testscale,imwidth,canvasratio,canvasobj)\n  301  {\n  302  \tvar outofbounds_str = ''\n  ...\n  352  \n  353  \t//Test Image Bounding Box(es)\n  354: \tfor (var i = 0; i <= testgridindex.length-1; i++){\n  355  \t\tvar wd = imwidth*testscale*canvasratio\n  356: \t\tvar xcent = gridx[testgridindex[i]]\n  357: \t\tvar ycent = gridy[testgridindex[i]]\n  358  \t\tcontext.strokeStyle=\"black\"\n  359  \t\tcontext.strokeRect(xcent-wd/2,ycent-wd/2,wd,wd)\n\n14 matches across 4 files\n\n\nSearching 13 files for \"buffer_trials\" (whole word)\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_TrialQueue.js:\n   44  \tthis.testbag_paths = funcreturn[0]; \n   45  \n   46: \tawait this.buffer_trials(trial_cushion_size); \n   47  }\n   48  \n   49: async buffer_trials(num_trials_to_buffer){\n   50  \tvar max_trial_number = Math.max(Math.max(... this.trialNumber_q), -1)\n   51  \tvar trial_generation_calls = []\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_runtrial.js:\n  206      var p1 = displayTrial(CANVAS.sequencepost,CANVAS.tsequencepost);\n  207      var num_trials_to_buffer_in_punishperiod = 20\n  208:     var p2 = TQ.buffer_trials(num_trials_to_buffer_in_punishperiod)\n  209      SP.playSound(3);\n  210      await Promise.all([p1,p2])\n\n3 matches across 2 files\n\n\nSearching 13 files for \"buffer_trials\" (whole word)\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_TrialQueue.js:\n   44  \tthis.testbag_paths = funcreturn[0]; \n   45  \n   46: \tawait this.buffer_trials(trial_cushion_size); \n   47  }\n   48  \n   49: async buffer_trials(num_trials_to_buffer){\n   50  \tvar max_trial_number = Math.max(Math.max(... this.trialNumber_q), -1)\n   51  \tvar trial_generation_calls = []\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_runtrial.js:\n  206      var p1 = displayTrial(CANVAS.sequencepost,CANVAS.tsequencepost);\n  207      var num_trials_to_buffer_in_punishperiod = 5\n  208:     var p2 = TQ.buffer_trials(num_trials_to_buffer_in_punishperiod)\n  209      SP.playSound(3);\n  210      await Promise.all([p1,p2])\n\n3 matches across 2 files\n\n\nSearching 13 files for \"num_trials_to_buffer_in_punishperiod\" (whole word)\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_runtrial.js:\n  205  \n  206      var p1 = displayTrial(CANVAS.sequencepost,CANVAS.tsequencepost);\n  207:     var num_trials_to_buffer_in_punishperiod = 5\n  208:     var p2 = TQ.buffer_trials(num_trials_to_buffer_in_punishperiod)\n  209      SP.playSound(3);\n  210      await Promise.all([p1,p2])\n\n2 matches in 1 file\n\n\nSearching 13 files for \"ObjectGridMapping\" (whole word)\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_TrialQueue.js:\n    1  class TrialQueue { \n    2  \n    3: constructor(samplingStrategy, ImageBagsSample, ImageBagsTest, ObjectGridMapping, TestGridIndex, samplingRNGseed, trial_num_TaskStream, ){\n    4  \t// Sampling properties\n    5  \tthis.samplingStrategy = samplingStrategy; \n    .\n   12  \n   13  \n   14: \tthis.ObjectGridMapping = ObjectGridMapping\n   15  \tthis.TestGridIndex = TestGridIndex\n   16  \n   ..\n   78  \t\tvar sample_filename = this.samplebag_paths[sample_index]; \n   79  \n   80: \t\tvar funcreturn = selectTestImages(sample_label, this.testbag_labels,this.ObjectGridMapping,this.TestGridIndex, _RNGseed) \n   81  \t\tvar test_indices = funcreturn[0] \n   82  \t\tvar correctIndex = funcreturn[1] \n   ..\n  148  }\n  149  \n  150: function selectTestImages(correct_label, testbag_labels, ObjectGridMapping,TestGridIndex, _RNGseed){\n  151  \t\n  152  \tMath.seedrandom(_RNGseed)\n  ...\n  156  \n  157  \t// If SR is on, \n  158: \tif (ObjectGridMapping.length == testbag_labels.length){ // Is this a robust SR check?\n  159: \t\tfor (var i = 0; i<ObjectGridMapping.length; i++){\n  160  \t\t\t\n  161  \t\t\t// Get pool of the object's test images: \n  ...\n  166  \n  167  \t\t\t// Get grid index where the object should be placed: \n  168: \t\t\tvar object_grid_index = ObjectGridMapping[i] \n  169  \n  170  \t\t\torder_idx = TestGridIndex.indexOf(object_grid_index)\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_automator.js:\n   51  \t\t\tvar _trial_num_TaskStream = this._populate_default(a, 'trial_num_TaskStream')\n   52  \t\t\t\n   53: \t\t\tvar _ObjectGridMapping = this._populate_default(a, 'ObjectGridMapping') \n   54  \t\t\tvar _TestGridIndex = this._populate_default(a, 'TestGridIndex')\n   55  \n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_runtrial.js:\n   49      if(TASK.Automator != 1){\n   50          var samplingStrategy = 'uniform_with_replacement'\n   51:         TQ = new TrialQueue(samplingStrategy, TASK.ImageBagsSample, TASK.ImageBagsTest, TASK.ObjectGridMapping, TASK.TestGridIndex, TASK.samplingRNGseed, TRIAL_NUMBER_FROM_TASKSTREAM_START)\n   52          await TQ.build(1)\n   53      }   \n\n10 matches across 3 files\n\n\nSearching 13 files for \"TestGridIndex\" (whole word)\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_TrialQueue.js:\n    1  class TrialQueue { \n    2  \n    3: constructor(samplingStrategy, ImageBagsSample, ImageBagsTest, ObjectGridMapping, TestGridIndex, samplingRNGseed, trial_num_TaskStream, ){\n    4  \t// Sampling properties\n    5  \tthis.samplingStrategy = samplingStrategy; \n    .\n   13  \n   14  \tthis.ObjectGridMapping = ObjectGridMapping\n   15: \tthis.TestGridIndex = TestGridIndex\n   16  \n   17  \t// Queues\n   ..\n   78  \t\tvar sample_filename = this.samplebag_paths[sample_index]; \n   79  \n   80: \t\tvar funcreturn = selectTestImages(sample_label, this.testbag_labels,this.ObjectGridMapping,this.TestGridIndex, _RNGseed) \n   81  \t\tvar test_indices = funcreturn[0] \n   82  \t\tvar correctIndex = funcreturn[1] \n   ..\n  148  }\n  149  \n  150: function selectTestImages(correct_label, testbag_labels, ObjectGridMapping,TestGridIndex, _RNGseed){\n  151  \t\n  152  \tMath.seedrandom(_RNGseed)\n  ...\n  168  \t\t\tvar object_grid_index = ObjectGridMapping[i] \n  169  \n  170: \t\t\torder_idx = TestGridIndex.indexOf(object_grid_index)\n  171  \n  172  \t\t\t// Place the selected test image in the appropriate location in testIndices. \n  ...\n  195  \tvar distractors = []\n  196  \tlabelspace = shuffle(labelspace)\n  197: \tfor (var i=0; i <= TestGridIndex.length-2; i++){\n  198  \t\tdistractors[i] = labelspace[i]\n  199  \t}\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_automator.js:\n   52  \t\t\t\n   53  \t\t\tvar _ObjectGridMapping = this._populate_default(a, 'ObjectGridMapping') \n   54: \t\t\tvar _TestGridIndex = this._populate_default(a, 'TestGridIndex')\n   55  \n   56  \t\t\tthis.AutomatorPreBuffer['TrialQueue'][a] = new TrialQueue(\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_runtrial.js:\n   49      if(TASK.Automator != 1){\n   50          var samplingStrategy = 'uniform_with_replacement'\n   51:         TQ = new TrialQueue(samplingStrategy, TASK.ImageBagsSample, TASK.ImageBagsTest, TASK.ObjectGridMapping, TASK.TestGridIndex, TASK.samplingRNGseed, TRIAL_NUMBER_FROM_TASKSTREAM_START)\n   52          await TQ.build(1)\n   53      }   \n   ..\n   90  \n   91  //============ AWAIT BUFFER CANVASES WITH SAMPLE & TEST IMAGES ============//\n   92: await bufferTrialImages(CURRTRIAL.sampleimage, TASK.SampleGridIndex, CURRTRIAL.testimages, TASK.TestGridIndex, CURRTRIAL.correctitem);\n   93  \n   94  //============ FIXATION SCREEN ============//\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_screenfunctions.js:\n  298  }\n  299  \n  300: function renderBlankWithGridMarkers(gridx,gridy,fixationgridindex,samplegridindex,testgridindex,fixationscale,samplescale,testscale,imwidth,canvasratio,canvasobj)\n  301  {\n  302  \tvar outofbounds_str = ''\n  ...\n  352  \n  353  \t//Test Image Bounding Box(es)\n  354: \tfor (var i = 0; i <= testgridindex.length-1; i++){\n  355  \t\tvar wd = imwidth*testscale*canvasratio\n  356: \t\tvar xcent = gridx[testgridindex[i]]\n  357: \t\tvar ycent = gridy[testgridindex[i]]\n  358  \t\tcontext.strokeStyle=\"black\"\n  359  \t\tcontext.strokeRect(xcent-wd/2,ycent-wd/2,wd,wd)\n\n14 matches across 4 files\n\n\nSearching 13 files for \"bufferTrialImages\" (whole word)\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_runtrial.js:\n   90  \n   91  //============ AWAIT BUFFER CANVASES WITH SAMPLE & TEST IMAGES ============//\n   92: await bufferTrialImages(CURRTRIAL.sampleimage, TASK.SampleGridIndex, CURRTRIAL.testimages, TASK.TestGridIndex, CURRTRIAL.correctitem);\n   93  \n   94  //============ FIXATION SCREEN ============//\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_screenfunctions.js:\n  168  }\n  169  \n  170: async function bufferTrialImages(sample_image, sample_image_grid_index, test_images, test_image_grid_indices, correct_index){\n  171  \n  172  \t//========== BUFFER SAMPLE CANVAS ==========//\n\n2 matches across 2 files\n\n\nSearching 13 files for \"bufferTrialImages\" (whole word)\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_runtrial.js:\n   90  \n   91  //============ AWAIT BUFFER CANVASES WITH SAMPLE & TEST IMAGES ============//\n   92: await bufferTrialImages(CURRTRIAL.sampleimage, TASK.SampleGridIndex, CURRTRIAL.testimages, TASK.TestGridIndex, CURRTRIAL.correctitem);\n   93  \n   94  //============ FIXATION SCREEN ============//\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_screenfunctions.js:\n  168  }\n  169  \n  170: async function bufferTrialImages(sample_image, sample_image_grid_index, test_images, test_image_grid_indices, correct_index){\n  171  \n  172  \tconsole.log('sample_image/correct_index', sample_image, correct_index)\n\n2 matches across 2 files\n\n\nSearching 13 files for \"KeepSampleON\" (whole word)\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_screenfunctions.js:\n  200  \n  201  \t// Option: draw sample (TODO: remove the blink between sample screen and test screen)\n  202: \tif (TASK.KeepSampleON==1){\n  203  \t\tawait renderImageOnCanvas(sample_image, sample_image_grid_index, TASK.SampleScale, CANVAS.obj.test)\n  204  \t}\n\n1 match in 1 file\n\n\nSearching 13 files for \"testgrid\" (whole word)\n\n0 matches\n\nSearching 13 files for \"testgrid\"\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_TrialQueue.js:\n    1  class TrialQueue { \n    2  \n    3: constructor(samplingStrategy, ImageBagsSample, ImageBagsTest, ObjectGridMapping, TestGridIndex, samplingRNGseed, trial_num_TaskStream, ){\n    4  \t// Sampling properties\n    5  \tthis.samplingStrategy = samplingStrategy; \n    .\n   13  \n   14  \tthis.ObjectGridMapping = ObjectGridMapping\n   15: \tthis.TestGridIndex = TestGridIndex\n   16  \n   17  \t// Queues\n   ..\n   78  \t\tvar sample_filename = this.samplebag_paths[sample_index]; \n   79  \n   80: \t\tvar funcreturn = selectTestImages(sample_label, this.testbag_labels,this.ObjectGridMapping,this.TestGridIndex, _RNGseed) \n   81  \t\tvar test_indices = funcreturn[0] \n   82  \t\tvar correctIndex = funcreturn[1] \n   ..\n  148  }\n  149  \n  150: function selectTestImages(correct_label, testbag_labels, ObjectGridMapping,TestGridIndex, _RNGseed){\n  151  \t\n  152  \tMath.seedrandom(_RNGseed)\n  ...\n  168  \t\t\tvar object_grid_index = ObjectGridMapping[i] \n  169  \n  170: \t\t\torder_idx = TestGridIndex.indexOf(object_grid_index)\n  171  \n  172  \t\t\t// Place the selected test image in the appropriate location in testIndices. \n  ...\n  195  \tvar distractors = []\n  196  \tlabelspace = shuffle(labelspace)\n  197: \tfor (var i=0; i <= TestGridIndex.length-2; i++){\n  198  \t\tdistractors[i] = labelspace[i]\n  199  \t}\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_automator.js:\n   52  \t\t\t\n   53  \t\t\tvar _ObjectGridMapping = this._populate_default(a, 'ObjectGridMapping') \n   54: \t\t\tvar _TestGridIndex = this._populate_default(a, 'TestGridIndex')\n   55  \n   56  \t\t\tthis.AutomatorPreBuffer['TrialQueue'][a] = new TrialQueue(\n   ..\n   59  \t\t\t\t_ImageBagsTest,\n   60  \t\t\t\t_ObjectGridMapping, \n   61: \t\t\t\t_TestGridIndex,\n   62  \t\t\t\t_samplingRNGseed, \n   63  \t\t\t\t_trial_num_TaskStream,\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_runtrial.js:\n   49      if(TASK.Automator != 1){\n   50          var samplingStrategy = 'uniform_with_replacement'\n   51:         TQ = new TrialQueue(samplingStrategy, TASK.ImageBagsSample, TASK.ImageBagsTest, TASK.ObjectGridMapping, TASK.TestGridIndex, TASK.samplingRNGseed, TRIAL_NUMBER_FROM_TASKSTREAM_START)\n   52          await TQ.build(1)\n   53      }   \n   ..\n   90  \n   91  //============ AWAIT BUFFER CANVASES WITH SAMPLE & TEST IMAGES ============//\n   92: await bufferTrialImages(CURRTRIAL.sampleimage, TASK.SampleGridIndex, CURRTRIAL.testimages, TASK.TestGridIndex, CURRTRIAL.correctitem);\n   93  \n   94  //============ FIXATION SCREEN ============//\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_screenfunctions.js:\n  291  }\n  292  \n  293: function renderBlankWithGridMarkers(gridx,gridy,fixationgridindex,samplegridindex,testgridindex,fixationscale,samplescale,testscale,imwidth,canvasratio,canvasobj)\n  294  {\n  295  \tvar outofbounds_str = ''\n  ...\n  345  \n  346  \t//Test Image Bounding Box(es)\n  347: \tfor (var i = 0; i <= testgridindex.length-1; i++){\n  348  \t\tvar wd = imwidth*testscale*canvasratio\n  349: \t\tvar xcent = gridx[testgridindex[i]]\n  350: \t\tvar ycent = gridy[testgridindex[i]]\n  351  \t\tcontext.strokeStyle=\"black\"\n  352  \t\tcontext.strokeRect(xcent-wd/2,ycent-wd/2,wd,wd)\n\n16 matches across 4 files\n\n\nSearching 13 files for \"get_trial\"\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_TrialQueue.js:\n  105  }\n  106  \n  107: async get_trial(i){\n  108  \t\n  109  \tvar idx = this.trialNumber_q.indexOf(i)\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_runtrial.js:\n   63  \n   64      // Write down dimensions of (assumedly) all images in samplebag and testbag, based on the first sample image.\n   65:     await TQ.get_trial(TRIAL_NUMBER_FROM_TASKSTREAM_START)\n   66      var representative_image = await TQ.IB.get_by_name(TQ.sampleq.filename[0])\n   67      DEVICE.source_ImageWidthPixels = representative_image.width\n   ..\n   86  //============ SELECT SAMPLE & TEST IMAGES ============//\n   87  // Draw one (1) sample image from samplebag\n   88: [CURRTRIAL.sampleimage, CURRTRIAL.sampleindex, CURRTRIAL.testimages, CURRTRIAL.testindices, CURRTRIAL.correctitem] = await TQ.get_trial(TRIAL_NUMBER_FROM_TASKSTREAM_START);\n   89  \n   90  \n\n3 matches across 2 files\n\n\nSearching 13 files for \"CURRTRIAL\"\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_globalvariables.js:\n   95  }\n   96  \n   97: var CURRTRIAL = {}\n   98: CURRTRIAL.starttime = NaN; \n   99: CURRTRIAL.fixationgridindex = NaN; \n  100: CURRTRIAL.fixationxyt = [];\n  101: CURRTRIAL.allfixationxyt = [];\n  102: CURRTRIAL.sampleindex = NaN;\n  103: CURRTRIAL.sampleimage = undefined;\n  104: CURRTRIAL.testindices = NaN;\n  105: CURRTRIAL.testimages = [];\n  106: CURRTRIAL.responsexyt = []; \n  107: CURRTRIAL.response = []; \n  108: CURRTRIAL.correctitem = NaN;\n  109: CURRTRIAL.correct = [];\n  110: CURRTRIAL.nreward = NaN;\n  111: CURRTRIAL.fixationtouchevent = \"\"\n  112: CURRTRIAL.responsetouchevent = \"\"\n  113: CURRTRIAL.tsequenceactual = []\n  114: CURRTRIAL.tsequencedesired = []\n  115: CURRTRIAL.TASK_idx = []\n  116  \n  117  var boundingBoxesFixation={}; //where the fixation touch targets are on the canvas\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_runtrial.js:\n   86  //============ SELECT SAMPLE & TEST IMAGES ============//\n   87  // Draw one (1) sample image from samplebag\n   88: [CURRTRIAL.sampleimage, CURRTRIAL.sampleindex, CURRTRIAL.testimages, CURRTRIAL.testindices, CURRTRIAL.correctitem] = await TQ.get_trial(TRIAL_NUMBER_FROM_TASKSTREAM_START);\n   89  \n   90  \n   91  //============ AWAIT BUFFER CANVASES WITH SAMPLE & TEST IMAGES ============//\n   92: await bufferTrialImages(CURRTRIAL.sampleimage, TASK.SampleGridIndex, CURRTRIAL.testimages, TASK.TestGridIndex, CURRTRIAL.correctitem);\n   93  \n   94  //============ FIXATION SCREEN ============//\n   95  FLAGS.waitingforTouches = 1\n   96  \n   97: CURRTRIAL.allfixationxyt = []\n   98  while (FLAGS.waitingforTouches > 0){\n   99      \n  100:     CURRTRIAL.fixationgridindex = TASK.StaticFixationGridIndex;\n  101  \n  102      // Render fixation screen \n  103      var color = \"white\" // todo move into task    \n  104:     renderFixationUsingDot(color, CURRTRIAL.fixationgridindex, FixationRadius, CANVAS.obj.touchfix);\n  105      \n  106      // Start timer for this fixation render trial. \n  107:     CURRTRIAL.starttime=Math.round(performance.now());\n  108      frame.shown=[];\n  109      for (var q in CANVAS.sequencepre){\n  ...\n  118      //========= AWAIT HOLD FIXATION TOUCH =========//\n  119      var touchhold_return = await touchhold_promise(TASK.FixationDuration,boundingBoxesFixation,FLAGS.punishOutsideTouch)\n  120:     CURRTRIAL.fixationtouchevent = touchhold_return.type\n  121:     CURRTRIAL.fixationxyt = [touchhold_return.cxyt[1], touchhold_return.cxyt[2], touchhold_return.cxyt[3]]\n  122:     CURRTRIAL.allfixationxyt[TASK.NFixations - FLAGS.waitingforTouches - 1] = CURRTRIAL.fixationxyt\n  123:     if (CURRTRIAL.fixationtouchevent == \"touchheld\"){\n  124:         CURRTRIAL.response = CURRTRIAL.correctitem\n  125      } \n  126  \n  ...\n  141  frame.current=0\n  142  \n  143: CURRTRIAL.tsequenceactual = await displayTrial(CANVAS.sequence,CANVAS.tsequence);\n  144: CURRTRIAL.tsequencedesired = CANVAS.tsequence\n  145  SP.audiocontext.suspend()\n  146  \n  ...\n  153  \n  154  var race_return = await Promise.race([p1,p2])\n  155: CURRTRIAL.responsetouchevent = race_return.type\n  156: CURRTRIAL.response = race_return.cxyt[0]\n  157: CURRTRIAL.responsexyt = [race_return.cxyt[1], race_return.cxyt[2], race_return.cxyt[3]]\n  158  \n  159: if (CURRTRIAL.response == CURRTRIAL.correctitem){ \n  160:     CURRTRIAL.correct = 1; \n  161  }\n  162  else { \n  163:     CURRTRIAL.correct=0; \n  164  }\n  165  \n  166  \n  167  //============ DETERMINE NUMBER OF REWARDS ============//\n  168: if (CURRTRIAL.correct == 1){\n  169:     CURRTRIAL.nreward = 1 \n  170  }\n  171: else if (CURRTRIAL.correct == 0){\n  172:     CURRTRIAL.nreward = 0;\n  173  } \n  174  \n  ...\n  177  //============ DELIVER REWARD/PUNISH ============//\n  178  // REWARD\n  179: if (CURRTRIAL.correct == 1){\n  180      CANVAS.sequencepost[1]=\"reward\";\n  181      CANVAS.tsequencepost[2] = CANVAS.tsequencepost[1]+RewardDuration*1000;\n  182  \n  183:     for (var q = 0; q <= CURRTRIAL.nreward-1; q++){\n  184          frame.shown=[];\n  185          for (var q2 in CANVAS.sequencepost){frame.shown[q2]=0}; frame.current=0;\n  ...\n  198  \n  199  //PUNISH\n  200: else if (CURRTRIAL.correct == 0) {\n  201      CANVAS.sequencepost[1] = \"punish\";\n  202      CANVAS.tsequencepost[2] = CANVAS.tsequencepost[1]+TASK.PunishTimeOut;\n  ...\n  212  \n  213  //================= Record results of trial =================//\n  214: TRIAL.StartTime.push(CURRTRIAL.starttime)\n  215: TRIAL.FixationGridIndex.push(CURRTRIAL.fixationgridindex)\n  216: TRIAL.FixationXYT.push(CURRTRIAL.fixationxyt)\n  217: TRIAL.AllFixationXYT.push(CURRTRIAL.allfixationxyt  )\n  218: TRIAL.Sample.push(CURRTRIAL.sampleindex )\n  219: TRIAL.Test.push(CURRTRIAL.testindices )\n  220: TRIAL.ResponseXYT.push(CURRTRIAL.responsexyt)\n  221: TRIAL.Response.push(CURRTRIAL.response)\n  222: TRIAL.FixationTouchEvent.push(CURRTRIAL.fixationtouchevent)\n  223: TRIAL.ResponseTouchEvent.push(CURRTRIAL.responsetouchevent)\n  224: TRIAL.CorrectItem.push(CURRTRIAL.correctitem)\n  225: TRIAL.NReward.push(CURRTRIAL.nreward)\n  226  TRIAL.AutomatorStage.push(TASK.CurrentAutomatorStage)\n  227: TRIAL.TSequenceDesired.push(CURRTRIAL.tsequencedesired)\n  228: TRIAL.TSequenceActual.push(CURRTRIAL.tsequenceactual)\n  229  TRIAL.trial_num_Session.push(TRIAL_NUMBER_FROM_SESSION_START)\n  230  TRIAL.trial_num_TaskStream.push(TRIAL_NUMBER_FROM_TASKSTREAM_START)\n  ...\n  236      var current_stage = stageHash(TASK); \n  237      AM.trialhistory.trainingstage.push(current_stage);\n  238:     AM.trialhistory.starttime.push(CURRTRIAL.starttime)\n  239:     AM.trialhistory.response.push(CURRTRIAL.response)\n  240:     AM.trialhistory.correct.push(CURRTRIAL.correct)\n  241  }\n  242  TRIAL_NUMBER_FROM_SESSION_START++\n\n71 matches across 2 files\n\n\nSearching 13 files for \"bufferTrialImages\"\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_runtrial.js:\n   90  \n   91  //============ AWAIT BUFFER CANVASES WITH SAMPLE & TEST IMAGES ============//\n   92: await bufferTrialImages(CURRTRIAL.sampleimage, CURRTRIAL.testimages, CURRTRIAL.correctitem);\n   93  \n   94  //============ FIXATION SCREEN ============//\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_screenfunctions.js:\n  168  }\n  169  \n  170: async function bufferTrialImages(sample_image, sample_image_grid_index, test_images, test_image_grid_indices, correct_index){\n  171  \n  172  \tconsole.log('correct_index', correct_index)\n\n2 matches across 2 files\n\n\nSearching 13 files for \"renderImageOnCanvas\"\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_screenfunctions.js:\n  176  \tcontext.fillStyle=\"#7F7F7F\";  // Gray out before buffering sample\n  177  \t//context.fillRect(0,100, canvasobj.width,canvasobj.height); // 100 is for the photodiode bar at the top of the screen\n  178: \tawait renderImageOnCanvas(sample_image, sample_image_grid_index, TASK.SampleScale, CANVAS.obj.sample)\n  179  \t\n  180  \t//========== BUFFER TEST CANVAS ==========//\n  ...\n  192  \t// Draw test object(s): \n  193  \tfor (i = 0; i<test_images.length; i++){\n  194: \t\tfuncreturn = await renderImageOnCanvas(test_images[i], test_image_grid_indices[i], TASK.TestScale, CANVAS.obj.test); \n  195  \t\tboundingBoxesChoice.x.push(funcreturn[0]); \n  196  \t\tboundingBoxesChoice.y.push(funcreturn[1]); \n  ...\n  199  \n  200  \n  201: async function renderImageOnCanvas(image, grid_index, scale, canvasobj){\n  202  \tvar context=canvasobj.getContext('2d');\n  203  \n  ...\n  388  \tboundingBoxesFixation['y']=[]\n  389  \n  390: \tfuncreturn = await renderImageOnCanvas(image, gridindex, scale, canvasobj); \n  391  \tboundingBoxesFixation.x.push(funcreturn[0]);\n  392  \tboundingBoxesFixation.y.push(funcreturn[1]);\n\n4 matches in 1 file\n\n\nSearching 13 files for \"TestGridIndex\"\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_TrialQueue.js:\n  187  \tvar distractors = []\n  188  \tlabelspace = shuffle(labelspace)\n  189: \tfor (var i=0; i <= TestGridIndex.length-2; i++){\n  190  \t\tdistractors[i] = labelspace[i]\n  191  \t}\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_automator.js:\n   52  \t\t\t\n   53  \t\t\tvar _ObjectGridMapping = this._populate_default(a, 'ObjectGridMapping') \n   54: \t\t\tvar _TestGridIndex = this._populate_default(a, 'TestGridIndex')\n   55  \n   56  \t\t\tthis.AutomatorPreBuffer['TrialQueue'][a] = new TrialQueue(\n   ..\n   59  \t\t\t\t_ImageBagsTest,\n   60  \t\t\t\t_ObjectGridMapping, \n   61: \t\t\t\t_TestGridIndex,\n   62  \t\t\t\t_samplingRNGseed, \n   63  \t\t\t\t_trial_num_TaskStream,\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_runtrial.js:\n   49      if(TASK.Automator != 1){\n   50          var samplingStrategy = 'uniform_with_replacement'\n   51:         TQ = new TrialQueue(samplingStrategy, TASK.ImageBagsSample, TASK.ImageBagsTest, TASK.ObjectGridMapping, TASK.TestGridIndex, TASK.samplingRNGseed, TRIAL_NUMBER_FROM_TASKSTREAM_START)\n   52          await TQ.build(1)\n   53      }   \n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_screenfunctions.js:\n  291  }\n  292  \n  293: function renderBlankWithGridMarkers(gridx,gridy,fixationgridindex,samplegridindex,testgridindex,fixationscale,samplescale,testscale,imwidth,canvasratio,canvasobj)\n  294  {\n  295  \tvar outofbounds_str = ''\n  ...\n  345  \n  346  \t//Test Image Bounding Box(es)\n  347: \tfor (var i = 0; i <= testgridindex.length-1; i++){\n  348  \t\tvar wd = imwidth*testscale*canvasratio\n  349: \t\tvar xcent = gridx[testgridindex[i]]\n  350: \t\tvar ycent = gridy[testgridindex[i]]\n  351  \t\tcontext.strokeStyle=\"black\"\n  352  \t\tcontext.strokeRect(xcent-wd/2,ycent-wd/2,wd,wd)\n\n9 matches across 4 files\n\n\nSearching 13 files for \"renderBlankWithGridMarkers\"\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_screenfunctions.js:\n  291  }\n  292  \n  293: function renderBlankWithGridMarkers(gridx,gridy,fixationgridindex,samplegridindex,testgridindex,fixationscale,samplescale,testscale,imwidth,canvasratio,canvasobj)\n  294  {\n  295  \tvar outofbounds_str = ''\n\n1 match in 1 file\n\n\nSearching 13 files for \"bufferTrialImages\"\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_runtrial.js:\n   90  \n   91  //============ AWAIT BUFFER CANVASES WITH SAMPLE & TEST IMAGES ============//\n   92: await bufferTrialImages(CURRTRIAL.sampleimage, CURRTRIAL.testimages, CURRTRIAL.correctitem);\n   93  \n   94  //============ FIXATION SCREEN ============//\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_screenfunctions.js:\n  168  }\n  169  \n  170: async function bufferTrialImages(sample_image, test_images){\n  171  \t//========== BUFFER SAMPLE CANVAS ==========//\n  172  \tvar canvasobj=CANVAS.obj.sample\n\n2 matches across 2 files\n\n\nSearching 13 files for \"bufferTrialImages\"\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_runtrial.js:\n   90  \n   91  //============ AWAIT BUFFER CANVASES WITH SAMPLE & TEST IMAGES ============//\n   92: await bufferTrialImages(CURRTRIAL.sampleimage, CURRTRIAL.testimages);\n   93  \n   94  //============ FIXATION SCREEN ============//\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_screenfunctions.js:\n  168  }\n  169  \n  170: async function bufferTrialImages(sample_image, test_images){\n  171  \t//========== BUFFER SAMPLE CANVAS ==========//\n  172  \tvar canvasobj=CANVAS.obj.sample\n\n2 matches across 2 files\n\n\nSearching 13 files for \"CURRTRIAL.correctitem\"\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_globalvariables.js:\n  106  CURRTRIAL.responsexyt = []; \n  107  CURRTRIAL.response = []; \n  108: CURRTRIAL.correctitem = NaN;\n  109  CURRTRIAL.correct = [];\n  110  CURRTRIAL.nreward = NaN;\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_runtrial.js:\n   86  //============ SELECT SAMPLE & TEST IMAGES ============//\n   87  // Draw one (1) sample image from samplebag\n   88: [CURRTRIAL.sampleimage, CURRTRIAL.sampleindex, CURRTRIAL.testimages, CURRTRIAL.testindices, CURRTRIAL.correctitem] = await TQ.get_trial(TRIAL_NUMBER_FROM_TASKSTREAM_START);\n   89  \n   90  \n   ..\n  122      CURRTRIAL.allfixationxyt[TASK.NFixations - FLAGS.waitingforTouches - 1] = CURRTRIAL.fixationxyt\n  123      if (CURRTRIAL.fixationtouchevent == \"touchheld\"){\n  124:         CURRTRIAL.response = CURRTRIAL.correctitem\n  125      } \n  126  \n  ...\n  157  CURRTRIAL.responsexyt = [race_return.cxyt[1], race_return.cxyt[2], race_return.cxyt[3]]\n  158  \n  159: if (CURRTRIAL.response == CURRTRIAL.correctitem){ \n  160      CURRTRIAL.correct = 1; \n  161  }\n  ...\n  222  TRIAL.FixationTouchEvent.push(CURRTRIAL.fixationtouchevent)\n  223  TRIAL.ResponseTouchEvent.push(CURRTRIAL.responsetouchevent)\n  224: TRIAL.CorrectItem.push(CURRTRIAL.correctitem)\n  225  TRIAL.NReward.push(CURRTRIAL.nreward)\n  226  TRIAL.AutomatorStage.push(TASK.CurrentAutomatorStage)\n\n5 matches across 2 files\n\n\nSearching 13 files for \"CURRTRIAL.response\"\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_globalvariables.js:\n  104  CURRTRIAL.testindices = NaN;\n  105  CURRTRIAL.testimages = [];\n  106: CURRTRIAL.responsexyt = []; \n  107: CURRTRIAL.response = []; \n  108  CURRTRIAL.correctitem = NaN;\n  109  CURRTRIAL.correct = [];\n  110  CURRTRIAL.nreward = NaN;\n  111  CURRTRIAL.fixationtouchevent = \"\"\n  112: CURRTRIAL.responsetouchevent = \"\"\n  113  CURRTRIAL.tsequenceactual = []\n  114  CURRTRIAL.tsequencedesired = []\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_runtrial.js:\n  122      CURRTRIAL.allfixationxyt[TASK.NFixations - FLAGS.waitingforTouches - 1] = CURRTRIAL.fixationxyt\n  123      if (CURRTRIAL.fixationtouchevent == \"touchheld\"){\n  124:         CURRTRIAL.response = CURRTRIAL.correctitem\n  125      } \n  126  \n  ...\n  153  \n  154  var race_return = await Promise.race([p1,p2])\n  155: CURRTRIAL.responsetouchevent = race_return.type\n  156: CURRTRIAL.response = race_return.cxyt[0]\n  157: CURRTRIAL.responsexyt = [race_return.cxyt[1], race_return.cxyt[2], race_return.cxyt[3]]\n  158  \n  159: if (CURRTRIAL.response == CURRTRIAL.correctitem){ \n  160      CURRTRIAL.correct = 1; \n  161  }\n  ...\n  218  TRIAL.Sample.push(CURRTRIAL.sampleindex )\n  219  TRIAL.Test.push(CURRTRIAL.testindices )\n  220: TRIAL.ResponseXYT.push(CURRTRIAL.responsexyt)\n  221: TRIAL.Response.push(CURRTRIAL.response)\n  222  TRIAL.FixationTouchEvent.push(CURRTRIAL.fixationtouchevent)\n  223: TRIAL.ResponseTouchEvent.push(CURRTRIAL.responsetouchevent)\n  224  TRIAL.CorrectItem.push(CURRTRIAL.correctitem)\n  225  TRIAL.NReward.push(CURRTRIAL.nreward)\n  ...\n  237      AM.trialhistory.trainingstage.push(current_stage);\n  238      AM.trialhistory.starttime.push(CURRTRIAL.starttime)\n  239:     AM.trialhistory.response.push(CURRTRIAL.response)\n  240      AM.trialhistory.correct.push(CURRTRIAL.correct)\n  241  }\n\n12 matches across 2 files\n\n\nSearching 13 files for \"CURRTRIAL.response\"\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_globalvariables.js:\n  104  CURRTRIAL.testindices = NaN;\n  105  CURRTRIAL.testimages = [];\n  106: CURRTRIAL.responsexyt = []; \n  107: CURRTRIAL.response = []; \n  108  CURRTRIAL.correctitem = NaN;\n  109  CURRTRIAL.correct = [];\n  110  CURRTRIAL.nreward = NaN;\n  111  CURRTRIAL.fixationtouchevent = \"\"\n  112: CURRTRIAL.responsetouchevent = \"\"\n  113  CURRTRIAL.tsequenceactual = []\n  114  CURRTRIAL.tsequencedesired = []\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_runtrial.js:\n  122      CURRTRIAL.allfixationxyt[TASK.NFixations - FLAGS.waitingforTouches - 1] = CURRTRIAL.fixationxyt\n  123      if (CURRTRIAL.fixationtouchevent == \"touchheld\"){\n  124:         CURRTRIAL.response = CURRTRIAL.correctitem\n  125      } \n  126  \n  ...\n  153  \n  154  var race_return = await Promise.race([p1,p2])\n  155: CURRTRIAL.responsetouchevent = race_return.type\n  156: CURRTRIAL.response = race_return.cxyt[0]\n  157: CURRTRIAL.responsexyt = [race_return.cxyt[1], race_return.cxyt[2], race_return.cxyt[3]]\n  158  \n  159: if (CURRTRIAL.response == CURRTRIAL.correctitem){ \n  160      CURRTRIAL.correct = 1; \n  161  }\n  ...\n  218  TRIAL.Sample.push(CURRTRIAL.sampleindex )\n  219  TRIAL.Test.push(CURRTRIAL.testindices )\n  220: TRIAL.ResponseXYT.push(CURRTRIAL.responsexyt)\n  221: TRIAL.Response.push(CURRTRIAL.response)\n  222  TRIAL.FixationTouchEvent.push(CURRTRIAL.fixationtouchevent)\n  223: TRIAL.ResponseTouchEvent.push(CURRTRIAL.responsetouchevent)\n  224  TRIAL.CorrectItem.push(CURRTRIAL.correctitem)\n  225  TRIAL.NReward.push(CURRTRIAL.nreward)\n  ...\n  237      AM.trialhistory.trainingstage.push(current_stage);\n  238      AM.trialhistory.starttime.push(CURRTRIAL.starttime)\n  239:     AM.trialhistory.response.push(CURRTRIAL.response)\n  240      AM.trialhistory.correct.push(CURRTRIAL.correct)\n  241  }\n\n12 matches across 2 files\n\n\nSearching 13 files for \"touchhold_promise\"\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_eventlisteners.js:\n    1: function touchhold_promise(touchduration,boundingBoxes,punishOutsideTouch){\n    2  \tvar resolveFunc\n    3  \tvar errFunc\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_runtrial.js:\n  117  \n  118      //========= AWAIT HOLD FIXATION TOUCH =========//\n  119:     var touchhold_return = await touchhold_promise(TASK.FixationDuration,boundingBoxesFixation,FLAGS.punishOutsideTouch)\n  120      CURRTRIAL.fixationtouchevent = touchhold_return.type\n  121      CURRTRIAL.fixationxyt = [touchhold_return.cxyt[1], touchhold_return.cxyt[2], touchhold_return.cxyt[3]]\n  ...\n  149  FLAGS.punishOutsideTouch = 0            \n  150  \n  151: var p1 = touchhold_promise(0,boundingBoxesChoice,FLAGS.punishOutsideTouch)\n  152  var p2 = choiceTimeOut(TASK.ChoiceTimeOut)\n  153  \n\n3 matches across 2 files\n\n\nSearching 13 files for \"CURRTRIAL.response\"\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_globalvariables.js:\n  104  CURRTRIAL.testindices = NaN;\n  105  CURRTRIAL.testimages = [];\n  106: CURRTRIAL.responsexyt = []; \n  107: CURRTRIAL.response = []; \n  108  CURRTRIAL.correctitem = NaN;\n  109  CURRTRIAL.correct = [];\n  110  CURRTRIAL.nreward = NaN;\n  111  CURRTRIAL.fixationtouchevent = \"\"\n  112: CURRTRIAL.responsetouchevent = \"\"\n  113  CURRTRIAL.tsequenceactual = []\n  114  CURRTRIAL.tsequencedesired = []\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_runtrial.js:\n  122      CURRTRIAL.allfixationxyt[TASK.NFixations - FLAGS.waitingforTouches - 1] = CURRTRIAL.fixationxyt\n  123      if (CURRTRIAL.fixationtouchevent == \"touchheld\"){\n  124:         CURRTRIAL.response = CURRTRIAL.correctitem\n  125      } \n  126  \n  ...\n  153  \n  154  var race_return = await Promise.race([p1,p2])\n  155: CURRTRIAL.responsetouchevent = race_return.type\n  156: CURRTRIAL.response = race_return.cxyt[0]\n  157: CURRTRIAL.responsexyt = [race_return.cxyt[1], race_return.cxyt[2], race_return.cxyt[3]]\n  158  \n  159: if (CURRTRIAL.response == CURRTRIAL.correctitem){ \n  160      CURRTRIAL.correct = 1; \n  161  }\n  ...\n  218  TRIAL.Sample.push(CURRTRIAL.sampleindex )\n  219  TRIAL.Test.push(CURRTRIAL.testindices )\n  220: TRIAL.ResponseXYT.push(CURRTRIAL.responsexyt)\n  221: TRIAL.Response.push(CURRTRIAL.response)\n  222  TRIAL.FixationTouchEvent.push(CURRTRIAL.fixationtouchevent)\n  223: TRIAL.ResponseTouchEvent.push(CURRTRIAL.responsetouchevent)\n  224  TRIAL.CorrectItem.push(CURRTRIAL.correctitem)\n  225  TRIAL.NReward.push(CURRTRIAL.nreward)\n  ...\n  237      AM.trialhistory.trainingstage.push(current_stage);\n  238      AM.trialhistory.starttime.push(CURRTRIAL.starttime)\n  239:     AM.trialhistory.response.push(CURRTRIAL.response)\n  240      AM.trialhistory.correct.push(CURRTRIAL.correct)\n  241  }\n\n12 matches across 2 files\n\n\nSearching 13 files for \"touchhold_promise\"\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_eventlisteners.js:\n    1: function touchhold_promise(touchduration,boundingBoxes,punishOutsideTouch){\n    2  \tvar resolveFunc\n    3  \tvar errFunc\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_runtrial.js:\n  117  \n  118      //========= AWAIT HOLD FIXATION TOUCH =========//\n  119:     var touchhold_return = await touchhold_promise(TASK.FixationDuration,boundingBoxesFixation,FLAGS.punishOutsideTouch)\n  120      CURRTRIAL.fixationtouchevent = touchhold_return.type\n  121      CURRTRIAL.fixationxyt = [touchhold_return.cxyt[1], touchhold_return.cxyt[2], touchhold_return.cxyt[3]]\n  ...\n  149  FLAGS.punishOutsideTouch = 0            \n  150  \n  151: var p1 = touchhold_promise(0,boundingBoxesChoice,FLAGS.punishOutsideTouch)\n  152  var p2 = choiceTimeOut(TASK.ChoiceTimeOut)\n  153  \n\n3 matches across 2 files\n\n\nSearching 13 files for \"boundingBoxesChoice\"\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_globalvariables.js:\n  116  \n  117  var boundingBoxesFixation={}; //where the fixation touch targets are on the canvas\n  118: var boundingBoxesChoice={}; //where the choice touch targets are on the canvas\n  119  var waitforClick; //variable to hold generator\n  120  var waitforEvent; //variable to hold generator\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_runtrial.js:\n  149  FLAGS.punishOutsideTouch = 0            \n  150  \n  151: var p1 = touchhold_promise(0,boundingBoxesChoice,FLAGS.punishOutsideTouch)\n  152  var p2 = choiceTimeOut(TASK.ChoiceTimeOut)\n  153  \n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_screenfunctions.js:\n  186  \t// }\n  187  \t\n  188: \tboundingBoxesChoice['x'] = []\n  189: \tboundingBoxesChoice['y'] = []\n  190  \t// Draw test object(s): \n  191  \tfor (i = 0; i<test_images.length; i++){\n  192  \t\tfuncreturn = await renderImageOnCanvas(test_images[i], TASK.ObjectGridMapping[i], TASK.TestScale, CANVAS.obj.test); \n  193: \t\tboundingBoxesChoice.x.push(funcreturn[0]); \n  194: \t\tboundingBoxesChoice.y.push(funcreturn[1]); \n  195  \t}\n  196  }\n\n6 matches across 3 files\n\n\nSearching 13 files for \"return_event\"\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_eventlisteners.js:\n   11  \tfunction *waitforeventGenerator(){\n   12  \t\tvar touchevent\n   13: \t\tvar return_event = {type: \"\", cxyt: []}\n   14  \t\twhile (true){\n   15  \t\t\n   ..\n   29  \n   30  \t\t\tif (touchevent.type == 'touchheld' || touchevent.type == 'touchbroken'){\n   31: \t\t\t\treturn_event.type = touchevent.type\n   32  \t\t\t\tbreak;\n   33  \t\t\t}\n   ..\n   65  \t\t\t\t\t\tFLAGS.acquiredTouch = 0\n   66  \t\t\t\t\t\tclearTimeout(touchTimer);\n   67: \t\t\t\t\t\treturn_event.type = \"touchbroken\"\n   68  \t\t\t\t\t\tbreak;\n   69  \t\t\t\t\t} //touched outside fixation, advance to punish\n   ..\n   87  \t\t\t\t\t\tFLAGS.waitingforTouches--\n   88  \t\t\t\t\t\tFLAGS.acquiredTouch = 0\n   89: \t\t\t\t\t\treturn_event.type = \"touchheld\"\n   90  \t\t\t\t\t\tbreak;\n   91  \t\t\t\t\t} //if no touch hold required\n   ..\n  100  \t\t\t\t\tFLAGS.acquiredTouch = 0\n  101  \t\t\t\t\tclearTimeout(touchTimer)\n  102: \t\t\t\t\treturn_event.type = \"touchbroken\"\n  103  \t\t\t\t\tbreak;\n  104  \t\t\t\t} //if moved out of touch bounding box\n  ...\n  110  \t\t\t\t//console.log('was fixating but lifted finger prematurely');\n  111  \t\t\t\tclearTimeout(touchTimer);\n  112: \t\t\t\treturn_event.type = \"touchbroken\"\n  113  \t\t\t\tbreak;\n  114  \t\t\t} //if ended touch too early\t\t\t\n  115  \t\t} //while events\n  116: \t\t////console.log('RETURN_EVENT', return_event.type)\n  117: \t\treturn_event.cxyt = touchcxyt\n  118: \t\tresolveFunc(return_event)\n  119  \t} //generator\n  120  \twaitforEvent = waitforeventGenerator(); // start async function\n\n10 matches in 1 file\n\n\nSearching 13 files for \"cxyt\"\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_eventlisteners.js:\n   11  \tfunction *waitforeventGenerator(){\n   12  \t\tvar touchevent\n   13: \t\tvar return_event = {type: \"\", cxyt: []}\n   14  \t\twhile (true){\n   15  \t\t\n   ..\n   37  \n   38  \t\t\t// Get CHOICE,XYT\n   39: \t\t\tvar touchcxyt = [-1, -1, -1, -1]\n   40  \t\t\tif (FLAGS.waitingforTouches > 0 && touchevent.type != \"touchend\" && touchevent.type != \"mouseup\"){\n   41  \t\t\t\tvar chosenbox = -1\n   ..\n   54  \t\t\t\t\t}//if in bounding box\n   55  \t\t\t\t}//for q boxes\n   56: \t\t\t\tvar touchcxyt = [chosenbox,x,y,Math.round(performance.now())];\t\t\n   57  \t\t\t} //if waiting for touch, get coords\n   58  \n   ..\n   70  \t\t\t\t\telse {\n   71  \t\t\t\t\t\t//do nothing for touching outside boxes\n   72: \t\t\t\t\t\ttouchcxyt[0] = -1\n   73  \t\t\t\t\t}\n   74  \t\t\t\t} //if touched outside box\n   ..\n  115  \t\t} //while events\n  116  \t\t////console.log('RETURN_EVENT', return_event.type)\n  117: \t\treturn_event.cxyt = touchcxyt\n  118  \t\tresolveFunc(return_event)\n  119  \t} //generator\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_runtrial.js:\n  119      var touchhold_return = await touchhold_promise(TASK.FixationDuration,boundingBoxesFixation,FLAGS.punishOutsideTouch)\n  120      CURRTRIAL.fixationtouchevent = touchhold_return.type\n  121:     CURRTRIAL.fixationxyt = [touchhold_return.cxyt[1], touchhold_return.cxyt[2], touchhold_return.cxyt[3]]\n  122      CURRTRIAL.allfixationxyt[TASK.NFixations - FLAGS.waitingforTouches - 1] = CURRTRIAL.fixationxyt\n  123      if (CURRTRIAL.fixationtouchevent == \"touchheld\"){\n  ...\n  154  var race_return = await Promise.race([p1,p2])\n  155  CURRTRIAL.responsetouchevent = race_return.type\n  156: CURRTRIAL.response = race_return.cxyt[0]\n  157: CURRTRIAL.responsexyt = [race_return.cxyt[1], race_return.cxyt[2], race_return.cxyt[3]]\n  158  \n  159  if (CURRTRIAL.response == CURRTRIAL.correctitem){ \n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_utils.js:\n  211    return new Promise(\n  212      function(resolve, reject){\n  213:       var timer_return = {type: \"TimeOut\", cxyt: [-1,-1,-1,-1]}\n  214        setTimeout(function(){resolve(timer_return)},timeout)\n  215      })\n\n14 matches across 3 files\n\n\nSearching 13 files for \"buffertrialimages\"\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_runtrial.js:\n   90  \n   91  //============ AWAIT BUFFER CANVASES WITH SAMPLE & TEST IMAGES ============//\n   92: await bufferTrialImages(CURRTRIAL.sampleimage, CURRTRIAL.testimages);\n   93  \n   94  //============ FIXATION SCREEN ============//\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_screenfunctions.js:\n  168  }\n  169  \n  170: async function bufferTrialImages(sample_image, test_images){\n  171  \t//========== BUFFER SAMPLE CANVAS ==========//\n  172  \tvar canvasobj=CANVAS.obj.sample\n\n2 matches across 2 files\n\n\nSearching 13 files for \"CURRTRIAL.response\"\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_globalvariables.js:\n  104  CURRTRIAL.testindices = NaN;\n  105  CURRTRIAL.testimages = [];\n  106: CURRTRIAL.responsexyt = []; \n  107: CURRTRIAL.response = []; \n  108  CURRTRIAL.correctitem = NaN;\n  109  CURRTRIAL.correct = [];\n  110  CURRTRIAL.nreward = NaN;\n  111  CURRTRIAL.fixationtouchevent = \"\"\n  112: CURRTRIAL.responsetouchevent = \"\"\n  113  CURRTRIAL.tsequenceactual = []\n  114  CURRTRIAL.tsequencedesired = []\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_runtrial.js:\n  122      CURRTRIAL.allfixationxyt[TASK.NFixations - FLAGS.waitingforTouches - 1] = CURRTRIAL.fixationxyt\n  123      if (CURRTRIAL.fixationtouchevent == \"touchheld\"){\n  124:         CURRTRIAL.response = CURRTRIAL.correctitem\n  125      } \n  126  \n  ...\n  153  \n  154  var race_return = await Promise.race([p1,p2])\n  155: CURRTRIAL.responsetouchevent = race_return.type\n  156: CURRTRIAL.response = race_return.cxyt[0]\n  157: CURRTRIAL.responsexyt = [race_return.cxyt[1], race_return.cxyt[2], race_return.cxyt[3]]\n  158  \n  159: console.log('Stage', TASK.CurrentAutomatorStage, 'choice:', CURRTRIAL.response )\n  160: if (CURRTRIAL.response == CURRTRIAL.correctitem){ \n  161      CURRTRIAL.correct = 1; \n  162  }\n  ...\n  219  TRIAL.Sample.push(CURRTRIAL.sampleindex )\n  220  TRIAL.Test.push(CURRTRIAL.testindices )\n  221: TRIAL.ResponseXYT.push(CURRTRIAL.responsexyt)\n  222: TRIAL.Response.push(CURRTRIAL.response)\n  223  TRIAL.FixationTouchEvent.push(CURRTRIAL.fixationtouchevent)\n  224: TRIAL.ResponseTouchEvent.push(CURRTRIAL.responsetouchevent)\n  225  TRIAL.CorrectItem.push(CURRTRIAL.correctitem)\n  226  TRIAL.NReward.push(CURRTRIAL.nreward)\n  ...\n  238      AM.trialhistory.trainingstage.push(current_stage);\n  239      AM.trialhistory.starttime.push(CURRTRIAL.starttime)\n  240:     AM.trialhistory.response.push(CURRTRIAL.response)\n  241      AM.trialhistory.correct.push(CURRTRIAL.correct)\n  242  }\n\n13 matches across 2 files\n\n\nSearching 13 files for \"touchhold_promise\"\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_eventlisteners.js:\n    1: function touchhold_promise(touchduration,boundingBoxes,punishOutsideTouch){\n    2  \tvar resolveFunc\n    3  \tvar errFunc\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_runtrial.js:\n  117  \n  118      //========= AWAIT HOLD FIXATION TOUCH =========//\n  119:     var touchhold_return = await touchhold_promise(TASK.FixationDuration,boundingBoxesFixation,FLAGS.punishOutsideTouch)\n  120      CURRTRIAL.fixationtouchevent = touchhold_return.type\n  121      CURRTRIAL.fixationxyt = [touchhold_return.cxyt[1], touchhold_return.cxyt[2], touchhold_return.cxyt[3]]\n  ...\n  149  FLAGS.punishOutsideTouch = 0            \n  150  \n  151: var p1 = touchhold_promise(0,boundingBoxesChoice,FLAGS.punishOutsideTouch)\n  152  var p2 = choiceTimeOut(TASK.ChoiceTimeOut)\n  153  \n\n3 matches across 2 files\n\n\nSearching 13 files for \"boundingBoxes\"\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_eventlisteners.js:\n    1: function touchhold_promise(touchduration,boundingBoxes,punishOutsideTouch){\n    2  \tvar resolveFunc\n    3  \tvar errFunc\n    .\n   48  \t\t\t\t\tvar y = touchevent.clientY\n   49  \t\t\t\t}\t\n   50: \t\t\t\tfor (var q=0; q<=boundingBoxes.x.length-1; q++){\n   51: \t\t\t\t\tif (x >= boundingBoxes.x[q][0] && x <= boundingBoxes.x[q][1] &&\n   52: \t\t\t\t\t\ty >= boundingBoxes.y[q][0] && y <= boundingBoxes.y[q][1]){\n   53  \t\t\t\t\t\tchosenbox=q\n   54  \t\t\t\t\t}//if in bounding box\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_globalvariables.js:\n  115  CURRTRIAL.TASK_idx = []\n  116  \n  117: var boundingBoxesFixation={}; //where the fixation touch targets are on the canvas\n  118: var boundingBoxesChoice={}; //where the choice touch targets are on the canvas\n  119  var waitforClick; //variable to hold generator\n  120  var waitforEvent; //variable to hold generator\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_runtrial.js:\n  117  \n  118      //========= AWAIT HOLD FIXATION TOUCH =========//\n  119:     var touchhold_return = await touchhold_promise(TASK.FixationDuration,boundingBoxesFixation,FLAGS.punishOutsideTouch)\n  120      CURRTRIAL.fixationtouchevent = touchhold_return.type\n  121      CURRTRIAL.fixationxyt = [touchhold_return.cxyt[1], touchhold_return.cxyt[2], touchhold_return.cxyt[3]]\n  ...\n  149  FLAGS.punishOutsideTouch = 0            \n  150  \n  151: var p1 = touchhold_promise(0,boundingBoxesChoice,FLAGS.punishOutsideTouch)\n  152  var p2 = choiceTimeOut(TASK.ChoiceTimeOut)\n  153  \n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_screenfunctions.js:\n  186  \t// }\n  187  \t\n  188: \tboundingBoxesChoice['x'] = []\n  189: \tboundingBoxesChoice['y'] = []\n  190  \t// Draw test object(s): \n  191  \tfor (i = 0; i<test_images.length; i++){\n  192  \t\tfuncreturn = await renderImageOnCanvas(test_images[i], TASK.ObjectGridMapping[i], TASK.TestScale, CANVAS.obj.test); \n  193: \t\tboundingBoxesChoice.x.push(funcreturn[0]); \n  194: \t\tboundingBoxesChoice.y.push(funcreturn[1]); \n  195  \t}\n  196  }\n  ...\n  308  \n  309  \t// Draw fixation dot\n  310: \tboundingBoxesFixation['x']=[]\n  311: \tboundingBoxesFixation['y']=[]\n  312  \n  313  \tfuncreturn = await renderImageOnCanvas(image, gridindex, scale, canvasobj); \n  314: \tboundingBoxesFixation.x.push(funcreturn[0]);\n  315: \tboundingBoxesFixation.y.push(funcreturn[1]);\n  316  }\n  317  function renderFixationUsingDot(color, gridindex, dot_pixelradius, canvasobj){\n  ...\n  329  \n  330  \t// Define (rectangular) boundaries of fixation\n  331: \tboundingBoxesFixation['x']=[]\n  332: \tboundingBoxesFixation['y']=[]\n  333: \tboundingBoxesFixation.x.push([xcent-rad+CANVAS.offsetleft, xcent+rad+CANVAS.offsetleft]);\n  334: \tboundingBoxesFixation.y.push([ycent-rad+CANVAS.offsettop, ycent+rad+CANVAS.offsettop]);\n  335  }\n  336  \n\n22 matches across 4 files\n\n\nSearching 13 files for \"boundingBoxesChoice\"\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_globalvariables.js:\n  116  \n  117  var boundingBoxesFixation={}; //where the fixation touch targets are on the canvas\n  118: //var boundingBoxesChoice={}; //where the choice touch targets are on the canvas\n  119  var waitforClick; //variable to hold generator\n  120  var waitforEvent; //variable to hold generator\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_runtrial.js:\n  149  FLAGS.punishOutsideTouch = 0            \n  150  \n  151: var p1 = touchhold_promise(0,boundingBoxesChoice,FLAGS.punishOutsideTouch)\n  152  var p2 = choiceTimeOut(TASK.ChoiceTimeOut)\n  153  \n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_screenfunctions.js:\n  186  \t// }\n  187  \t\n  188: \tboundingBoxesChoice['x'] = []\n  189: \tboundingBoxesChoice['y'] = []\n  190  \t// Draw test object(s): \n  191  \tfor (i = 0; i<test_images.length; i++){\n  192  \t\tfuncreturn = await renderImageOnCanvas(test_images[i], TASK.ObjectGridMapping[i], TASK.TestScale, CANVAS.obj.test); \n  193: \t\tboundingBoxesChoice.x.push(funcreturn[0]); \n  194: \t\tboundingBoxesChoice.y.push(funcreturn[1]); \n  195  \t}\n  196  }\n\n6 matches across 3 files\n\n\nSearching 13 files for \"bufferTrialImages\"\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_runtrial.js:\n   90  \n   91  //============ AWAIT BUFFER CANVASES WITH SAMPLE & TEST IMAGES ============//\n   92: await bufferTrialImages(CURRTRIAL.sampleimage, CURRTRIAL.testimages);\n   93  \n   94  //============ FIXATION SCREEN ============//\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_screenfunctions.js:\n  168  }\n  169  \n  170: async function bufferTrialImages(sample_image, test_images){\n  171  \t//========== BUFFER SAMPLE CANVAS ==========//\n  172  \tvar canvasobj=CANVAS.obj.sample\n\n2 matches across 2 files\n\n\nSearching 13 files for \"boundingboxes\"\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_eventlisteners.js:\n    1: function touchhold_promise(touchduration,boundingBoxes,punishOutsideTouch){\n    2  \tvar resolveFunc\n    3  \tvar errFunc\n    .\n   48  \t\t\t\t\tvar y = touchevent.clientY\n   49  \t\t\t\t}\t\n   50: \t\t\t\tfor (var q=0; q<=boundingBoxes.x.length-1; q++){\n   51: \t\t\t\t\tif (x >= boundingBoxes.x[q][0] && x <= boundingBoxes.x[q][1] &&\n   52: \t\t\t\t\t\ty >= boundingBoxes.y[q][0] && y <= boundingBoxes.y[q][1]){\n   53  \t\t\t\t\t\tchosenbox=q\n   54  \t\t\t\t\t}//if in bounding box\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_globalvariables.js:\n  115  CURRTRIAL.TASK_idx = []\n  116  \n  117: var boundingBoxesFixation={}; //where the fixation touch targets are on the canvas\n  118: //var boundingBoxesChoice={}; //where the choice touch targets are on the canvas\n  119  var waitforClick; //variable to hold generator\n  120  var waitforEvent; //variable to hold generator\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_runtrial.js:\n   90  \n   91  //============ AWAIT BUFFER CANVASES WITH SAMPLE & TEST IMAGES ============//\n   92: boundingBoxesTestOrder = await bufferTrialImages(CURRTRIAL.sampleimage, CURRTRIAL.testimages);\n   93  \n   94  //============ FIXATION SCREEN ============//\n   ..\n  117  \n  118      //========= AWAIT HOLD FIXATION TOUCH =========//\n  119:     var touchhold_return = await touchhold_promise(TASK.FixationDuration,boundingBoxesFixation,FLAGS.punishOutsideTouch)\n  120      CURRTRIAL.fixationtouchevent = touchhold_return.type\n  121      CURRTRIAL.fixationxyt = [touchhold_return.cxyt[1], touchhold_return.cxyt[2], touchhold_return.cxyt[3]]\n  ...\n  149  FLAGS.punishOutsideTouch = 0            \n  150  \n  151: var p1 = touchhold_promise(0,boundingBoxesChoice,FLAGS.punishOutsideTouch)\n  152  var p2 = choiceTimeOut(TASK.ChoiceTimeOut)\n  153  \n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_screenfunctions.js:\n  185  \t// \tcontext.fillRect(0,100, canvasobj.width,canvasobj.height); // 100 is for the photodiode bar at the top of the screen\n  186  \t// }\n  187: \tvar boundingBoxesTestOrder = {}\n  188: \tboundingBoxesTestOrder['x'] = []\n  189: \tboundingBoxesTestOrder['y'] = []\n  190  \t\n  191  \t// Draw test object(s): \n  192  \tfor (i = 0; i<test_images.length; i++){\n  193  \t\tfuncreturn = await renderImageOnCanvas(test_images[i], TASK.ObjectGridMapping[i], TASK.TestScale, CANVAS.obj.test); \n  194: \t\tboundingBoxesTestOrder.x.push(funcreturn[0]); \n  195: \t\tboundingBoxesTestOrder.y.push(funcreturn[1]); \n  196  \t}\n  197  \t\n  198: \treturn boundingBoxesTestOrder\n  199  \n  200  }\n  ...\n  312  \n  313  \t// Draw fixation dot\n  314: \tboundingBoxesFixation['x']=[]\n  315: \tboundingBoxesFixation['y']=[]\n  316  \n  317  \tfuncreturn = await renderImageOnCanvas(image, gridindex, scale, canvasobj); \n  318: \tboundingBoxesFixation.x.push(funcreturn[0]);\n  319: \tboundingBoxesFixation.y.push(funcreturn[1]);\n  320  }\n  321  function renderFixationUsingDot(color, gridindex, dot_pixelradius, canvasobj){\n  ...\n  333  \n  334  \t// Define (rectangular) boundaries of fixation\n  335: \tboundingBoxesFixation['x']=[]\n  336: \tboundingBoxesFixation['y']=[]\n  337: \tboundingBoxesFixation.x.push([xcent-rad+CANVAS.offsetleft, xcent+rad+CANVAS.offsetleft]);\n  338: \tboundingBoxesFixation.y.push([ycent-rad+CANVAS.offsettop, ycent+rad+CANVAS.offsettop]);\n  339  }\n  340  \n\n25 matches across 4 files\n\n\nSearching 13 files for \"boundingboxesChoice\"\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_globalvariables.js:\n  116  \n  117  var boundingBoxesFixation={}; //where the fixation touch targets are on the canvas\n  118: //var boundingBoxesChoice={}; //where the choice touch targets are on the canvas\n  119  var waitforClick; //variable to hold generator\n  120  var waitforEvent; //variable to hold generator\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_runtrial.js:\n  149  FLAGS.punishOutsideTouch = 0            \n  150  \n  151: var p1 = touchhold_promise(0,boundingBoxesChoice,FLAGS.punishOutsideTouch)\n  152  var p2 = choiceTimeOut(TASK.ChoiceTimeOut)\n  153  \n\n2 matches across 2 files\n\n\nSearching 13 files for \"touchhold_promise\"\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_eventlisteners.js:\n    1: function touchhold_promise(touchduration,boundingBoxes,punishOutsideTouch){\n    2  \tvar resolveFunc\n    3  \tvar errFunc\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_runtrial.js:\n  117  \n  118      //========= AWAIT HOLD FIXATION TOUCH =========//\n  119:     var touchhold_return = await touchhold_promise(TASK.FixationDuration,boundingBoxesFixation,FLAGS.punishOutsideTouch)\n  120      CURRTRIAL.fixationtouchevent = touchhold_return.type\n  121      CURRTRIAL.fixationxyt = [touchhold_return.cxyt[1], touchhold_return.cxyt[2], touchhold_return.cxyt[3]]\n  ...\n  149  FLAGS.punishOutsideTouch = 0            \n  150  \n  151: var p1 = touchhold_promise(0,boundingBoxesTestOrder,FLAGS.punishOutsideTouch)\n  152  var p2 = choiceTimeOut(TASK.ChoiceTimeOut)\n  153  \n\n3 matches across 2 files\n\n\nSearching 13 files for \"CURRTRIAL.correctitem\"\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_globalvariables.js:\n  106  CURRTRIAL.responsexyt = []; \n  107  CURRTRIAL.response = []; \n  108: CURRTRIAL.correctitem = NaN;\n  109  CURRTRIAL.correct = [];\n  110  CURRTRIAL.nreward = NaN;\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_runtrial.js:\n   86  //============ SELECT SAMPLE & TEST IMAGES ============//\n   87  // Draw one (1) sample image from samplebag\n   88: [CURRTRIAL.sampleimage, CURRTRIAL.sampleindex, CURRTRIAL.testimages, CURRTRIAL.testindices, CURRTRIAL.correctitem] = await TQ.get_trial(TRIAL_NUMBER_FROM_TASKSTREAM_START);\n   89  \n   90  \n   ..\n  122      CURRTRIAL.allfixationxyt[TASK.NFixations - FLAGS.waitingforTouches - 1] = CURRTRIAL.fixationxyt\n  123      if (CURRTRIAL.fixationtouchevent == \"touchheld\"){\n  124:         CURRTRIAL.response = CURRTRIAL.correctitem\n  125      } \n  126  \n  ...\n  158  \n  159  console.log('Stage', TASK.CurrentAutomatorStage, 'choice:', CURRTRIAL.response )\n  160: if (CURRTRIAL.response == CURRTRIAL.correctitem){ \n  161      CURRTRIAL.correct = 1; \n  162  }\n  ...\n  223  TRIAL.FixationTouchEvent.push(CURRTRIAL.fixationtouchevent)\n  224  TRIAL.ResponseTouchEvent.push(CURRTRIAL.responsetouchevent)\n  225: TRIAL.CorrectItem.push(CURRTRIAL.correctitem)\n  226  TRIAL.NReward.push(CURRTRIAL.nreward)\n  227  TRIAL.AutomatorStage.push(TASK.CurrentAutomatorStage)\n\n5 matches across 2 files\n\n\nSearching 13 files for \"boundingBoxes\"\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_eventlisteners.js:\n    1: function touchhold_promise(touchduration,boundingBoxes,punishOutsideTouch){\n    2  \tvar resolveFunc\n    3  \tvar errFunc\n    .\n   48  \t\t\t\t\tvar y = touchevent.clientY\n   49  \t\t\t\t}\t\n   50: \t\t\t\tfor (var q=0; q<=boundingBoxes.x.length-1; q++){\n   51: \t\t\t\t\tif (x >= boundingBoxes.x[q][0] && x <= boundingBoxes.x[q][1] &&\n   52: \t\t\t\t\t\ty >= boundingBoxes.y[q][0] && y <= boundingBoxes.y[q][1]){\n   53  \t\t\t\t\t\tchosenbox=q\n   54  \t\t\t\t\t}//if in bounding box\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_globalvariables.js:\n  115  CURRTRIAL.TASK_idx = []\n  116  \n  117: var boundingBoxesFixation={}; //where the fixation touch targets are on the canvas\n  118: //var boundingBoxesChoice={}; //where the choice touch targets are on the canvas\n  119  var waitforClick; //variable to hold generator\n  120  var waitforEvent; //variable to hold generator\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_runtrial.js:\n   90  \n   91  //============ AWAIT BUFFER CANVASES WITH SAMPLE & TEST IMAGES ============//\n   92: boundingBoxesTestOrder = await bufferTrialImages(CURRTRIAL.sampleimage, CURRTRIAL.testimages);\n   93  \n   94  //============ FIXATION SCREEN ============//\n   ..\n  117  \n  118      //========= AWAIT HOLD FIXATION TOUCH =========//\n  119:     var touchhold_return = await touchhold_promise(TASK.FixationDuration,boundingBoxesFixation,FLAGS.punishOutsideTouch)\n  120      CURRTRIAL.fixationtouchevent = touchhold_return.type\n  121      CURRTRIAL.fixationxyt = [touchhold_return.cxyt[1], touchhold_return.cxyt[2], touchhold_return.cxyt[3]]\n  ...\n  149  FLAGS.punishOutsideTouch = 0            \n  150  \n  151: var p1 = touchhold_promise(0,boundingBoxesTestOrder,FLAGS.punishOutsideTouch)\n  152  var p2 = choiceTimeOut(TASK.ChoiceTimeOut)\n  153  \n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_screenfunctions.js:\n  185  \t// \tcontext.fillRect(0,100, canvasobj.width,canvasobj.height); // 100 is for the photodiode bar at the top of the screen\n  186  \t// }\n  187: \tvar boundingBoxesTestOrder = {}\n  188: \tboundingBoxesTestOrder['x'] = []\n  189: \tboundingBoxesTestOrder['y'] = []\n  190  \t\n  191  \t// Draw test object(s): \n  192  \tfor (i = 0; i<test_images.length; i++){\n  193  \t\tfuncreturn = await renderImageOnCanvas(test_images[i], TASK.ObjectGridMapping[i], TASK.TestScale, CANVAS.obj.test); \n  194: \t\tboundingBoxesTestOrder.x.push(funcreturn[0]); \n  195: \t\tboundingBoxesTestOrder.y.push(funcreturn[1]); \n  196  \t}\n  197  \t\n  198: \treturn boundingBoxesTestOrder\n  199  \n  200  }\n  ...\n  312  \n  313  \t// Draw fixation dot\n  314: \tboundingBoxesFixation['x']=[]\n  315: \tboundingBoxesFixation['y']=[]\n  316  \n  317  \tfuncreturn = await renderImageOnCanvas(image, gridindex, scale, canvasobj); \n  318: \tboundingBoxesFixation.x.push(funcreturn[0]);\n  319: \tboundingBoxesFixation.y.push(funcreturn[1]);\n  320  }\n  321  function renderFixationUsingDot(color, gridindex, dot_pixelradius, canvasobj){\n  ...\n  333  \n  334  \t// Define (rectangular) boundaries of fixation\n  335: \tboundingBoxesFixation['x']=[]\n  336: \tboundingBoxesFixation['y']=[]\n  337: \tboundingBoxesFixation.x.push([xcent-rad+CANVAS.offsetleft, xcent+rad+CANVAS.offsetleft]);\n  338: \tboundingBoxesFixation.y.push([ycent-rad+CANVAS.offsettop, ycent+rad+CANVAS.offsettop]);\n  339  }\n  340  \n\n25 matches across 4 files\n\n\nSearching 13 files for \"bufferTrialImages\"\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_runtrial.js:\n   90  \n   91  //============ AWAIT BUFFER CANVASES WITH SAMPLE & TEST IMAGES ============//\n   92: boundingBoxesTestOrder = await bufferTrialImages(CURRTRIAL.sampleimage, CURRTRIAL.testimages);\n   93  \n   94  //============ FIXATION SCREEN ============//\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_screenfunctions.js:\n  168  }\n  169  \n  170: async function bufferTrialImages(sample_image, test_images){\n  171  \t//========== BUFFER SAMPLE CANVAS ==========//\n  172  \tvar canvasobj=CANVAS.obj.sample\n\n2 matches across 2 files\n\n\nSearching 13 files for \"bufferTrialImages\"\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_runtrial.js:\n   90  \n   91  //============ AWAIT BUFFER CANVASES WITH SAMPLE & TEST IMAGES ============//\n   92: boundingBoxesTestOrder = await bufferTrialImages(CURRTRIAL.sampleimage, CURRTRIAL.testimages);\n   93  \n   94  //============ FIXATION SCREEN ============//\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_screenfunctions.js:\n  168  }\n  169  \n  170: async function bufferTrialImages(sample_image, test_images){\n  171  \t//========== BUFFER SAMPLE CANVAS ==========//\n  172  \tvar canvasobj=CANVAS.obj.sample\n\n2 matches across 2 files\n\n\nSearching 13 files for \"boundingBoxesTestOrder\"\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_runtrial.js:\n   90  \n   91  //============ AWAIT BUFFER CANVASES WITH SAMPLE & TEST IMAGES ============//\n   92: boundingBoxesTestOrder = await bufferTrialImages(CURRTRIAL.sampleimage, CURRTRIAL.testimages);\n   93  \n   94  //============ FIXATION SCREEN ============//\n   ..\n  149  FLAGS.punishOutsideTouch = 0            \n  150  \n  151: var p1 = touchhold_promise(0,boundingBoxesTestOrder,FLAGS.punishOutsideTouch)\n  152  var p2 = choiceTimeOut(TASK.ChoiceTimeOut)\n  153  \n\n2 matches in 1 file\n\n\nSearching 13 files for \"boundingBoxesTestOrder\"\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_runtrial.js:\n   90  \n   91  //============ AWAIT BUFFER CANVASES WITH SAMPLE & TEST IMAGES ============//\n   92: boundingBoxesTestOrder = await bufferTrialImages(CURRTRIAL.sampleimage, CURRTRIAL.testimages);\n   93  \n   94  //============ FIXATION SCREEN ============//\n   ..\n  149  FLAGS.punishOutsideTouch = 0            \n  150  \n  151: var p1 = touchhold_promise(0,boundingBoxesTestOrder,FLAGS.punishOutsideTouch)\n  152  var p2 = choiceTimeOut(TASK.ChoiceTimeOut)\n  153  \n\n2 matches in 1 file\n\n\nSearching 13 files for \"touchhold_promise\"\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_eventlisteners.js:\n    1: function touchhold_promise(touchduration,boundingBoxes,punishOutsideTouch){\n    2  \tvar resolveFunc\n    3  \tvar errFunc\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_runtrial.js:\n  117  \n  118      //========= AWAIT HOLD FIXATION TOUCH =========//\n  119:     var touchhold_return = await touchhold_promise(TASK.FixationDuration,boundingBoxesFixation,FLAGS.punishOutsideTouch)\n  120      CURRTRIAL.fixationtouchevent = touchhold_return.type\n  121      CURRTRIAL.fixationxyt = [touchhold_return.cxyt[1], touchhold_return.cxyt[2], touchhold_return.cxyt[3]]\n  ...\n  149  FLAGS.punishOutsideTouch = 0            \n  150  \n  151: var p1 = touchhold_promise(0,boundingBoxesTestOrder,FLAGS.punishOutsideTouch)\n  152  var p2 = choiceTimeOut(TASK.ChoiceTimeOut)\n  153  \n\n3 matches across 2 files\n\n\nSearching 13 files for \"boundingboxes\"\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_eventlisteners.js:\n    1: function touchhold_promise(touchduration,boundingBoxes,punishOutsideTouch){\n    2  \tvar resolveFunc\n    3  \tvar errFunc\n    .\n   50  \t\t\t\t\tvar y = touchevent.clientY\n   51  \t\t\t\t}\t\n   52: \t\t\t\tfor (var q=0; q<=boundingBoxes.x.length-1; q++){\n   53: \t\t\t\t\tif (x >= boundingBoxes.x[q][0] && x <= boundingBoxes.x[q][1] &&\n   54: \t\t\t\t\t\ty >= boundingBoxes.y[q][0] && y <= boundingBoxes.y[q][1]){\n   55: \t\t\t\t\t\tchosengridIndex=boundingBoxes.gridindex[q]\n   56  \t\t\t\t\t}//if in bounding box\n   57  \t\t\t\t}//for q boxes\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_globalvariables.js:\n  115  CURRTRIAL.TASK_idx = []\n  116  \n  117: var boundingBoxesFixation={}; //where the fixation touch targets are on the canvas\n  118  var waitforClick; //variable to hold generator\n  119  var waitforEvent; //variable to hold generator\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_runtrial.js:\n   90  \n   91  //============ AWAIT BUFFER CANVASES WITH SAMPLE & TEST IMAGES ============//\n   92: boundingBoxesTestOrder = await bufferTrialImages(CURRTRIAL.sampleimage, CURRTRIAL.testimages);\n   93  \n   94  //============ FIXATION SCREEN ============//\n   ..\n  117  \n  118      //========= AWAIT HOLD FIXATION TOUCH =========//\n  119:     var touchhold_return = await touchhold_promise(TASK.FixationDuration,boundingBoxesFixation,FLAGS.punishOutsideTouch)\n  120      CURRTRIAL.fixationtouchevent = touchhold_return.type\n  121      CURRTRIAL.fixationxyt = [touchhold_return.cxyt[1], touchhold_return.cxyt[2], touchhold_return.cxyt[3]]\n  ...\n  149  FLAGS.punishOutsideTouch = 0            \n  150  \n  151: var p1 = touchhold_promise(0,boundingBoxesTestOrder,FLAGS.punishOutsideTouch)\n  152  var p2 = choiceTimeOut(TASK.ChoiceTimeOut)\n  153  \n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_screenfunctions.js:\n  185  \t// \tcontext.fillRect(0,100, canvasobj.width,canvasobj.height); // 100 is for the photodiode bar at the top of the screen\n  186  \t// }\n  187: \tvar boundingBoxes = {}\n  188: \tboundingBoxes['x'] = []\n  189: \tboundingBoxes['y'] = []\n  190: \tboundingBoxes['GridIndex'] = []\n  191  \n  192  \t// Draw test object(s): \n  ...\n  195  \n  196  \t\tfuncreturn = await renderImageOnCanvas(test_images[i], TASK.ObjectGridMapping[i], TASK.TestScale, CANVAS.obj.test); \n  197: \t\tboundingBoxes.x.push(funcreturn[0]); \n  198: \t\tboundingBoxes.y.push(funcreturn[1]); \n  199: \t\tboundingBoxes['GridIndex'].push(TASK.ObjectGridMapping[i])\n  200  \t}\n  201  \t\n  202: \treturn boundingBoxes\n  203  \n  204  }\n  ...\n  316  \n  317  \t// Draw fixation dot\n  318: \tboundingBoxesFixation['x']=[]\n  319: \tboundingBoxesFixation['y']=[]\n  320  \n  321  \tfuncreturn = await renderImageOnCanvas(image, gridindex, scale, canvasobj); \n  322: \tboundingBoxesFixation.x.push(funcreturn[0]);\n  323: \tboundingBoxesFixation.y.push(funcreturn[1]);\n  324  }\n  325  function renderFixationUsingDot(color, gridindex, dot_pixelradius, canvasobj){\n  ...\n  337  \n  338  \t// Define (rectangular) boundaries of fixation\n  339: \tboundingBoxesFixation['x']=[]\n  340: \tboundingBoxesFixation['y']=[]\n  341: \tboundingBoxesFixation.x.push([xcent-rad+CANVAS.offsetleft, xcent+rad+CANVAS.offsetleft]);\n  342: \tboundingBoxesFixation.y.push([ycent-rad+CANVAS.offsettop, ycent+rad+CANVAS.offsettop]);\n  343  }\n  344  \n\n27 matches across 4 files\n\n\nSearching 13 files for \"boundingboxes\"\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_eventlisteners.js:\n    1: function touchhold_promise(touchduration,boundingBoxes,punishOutsideTouch){\n    2  \tvar resolveFunc\n    3  \tvar errFunc\n    .\n   50  \t\t\t\t\tvar y = touchevent.clientY\n   51  \t\t\t\t}\t\n   52: \t\t\t\tfor (var q=0; q<=boundingBoxes.x.length-1; q++){\n   53: \t\t\t\t\tif (x >= boundingBoxes.x[q][0] && x <= boundingBoxes.x[q][1] &&\n   54: \t\t\t\t\t\ty >= boundingBoxes.y[q][0] && y <= boundingBoxes.y[q][1]){\n   55: \t\t\t\t\t\tchosenGridIndex=boundingBoxes.GridIndex[q]\n   56  \t\t\t\t\t}//if in bounding box\n   57  \t\t\t\t}//for q boxes\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_globalvariables.js:\n  115  CURRTRIAL.TASK_idx = []\n  116  \n  117: var boundingBoxesFixation={}; //where the fixation touch targets are on the canvas\n  118  var waitforClick; //variable to hold generator\n  119  var waitforEvent; //variable to hold generator\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_runtrial.js:\n   90  \n   91  //============ AWAIT BUFFER CANVASES WITH SAMPLE & TEST IMAGES ============//\n   92: boundingBoxesTestOrder = await bufferTrialImages(CURRTRIAL.sampleimage, CURRTRIAL.testimages);\n   93  \n   94  //============ FIXATION SCREEN ============//\n   ..\n  117  \n  118      //========= AWAIT HOLD FIXATION TOUCH =========//\n  119:     var touchhold_return = await touchhold_promise(TASK.FixationDuration,boundingBoxesFixation,FLAGS.punishOutsideTouch)\n  120      CURRTRIAL.fixationtouchevent = touchhold_return.type\n  121      CURRTRIAL.fixationxyt = [touchhold_return.cxyt[1], touchhold_return.cxyt[2], touchhold_return.cxyt[3]]\n  ...\n  149  FLAGS.punishOutsideTouch = 0            \n  150  \n  151: var p1 = touchhold_promise(0,boundingBoxesTestOrder,FLAGS.punishOutsideTouch)\n  152  var p2 = choiceTimeOut(TASK.ChoiceTimeOut)\n  153  \n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_screenfunctions.js:\n  185  \t// \tcontext.fillRect(0,100, canvasobj.width,canvasobj.height); // 100 is for the photodiode bar at the top of the screen\n  186  \t// }\n  187: \tvar boundingBoxes = {}\n  188: \tboundingBoxes['x'] = []\n  189: \tboundingBoxes['y'] = []\n  190: \tboundingBoxes['GridIndex'] = []\n  191  \n  192  \t// Draw test object(s): \n  ...\n  195  \n  196  \t\tfuncreturn = await renderImageOnCanvas(test_images[i], TASK.ObjectGridMapping[i], TASK.TestScale, CANVAS.obj.test); \n  197: \t\tboundingBoxes.x.push(funcreturn[0]); \n  198: \t\tboundingBoxes.y.push(funcreturn[1]); \n  199: \t\tboundingBoxes['GridIndex'].push(TASK.ObjectGridMapping[i])\n  200  \t}\n  201  \t\n  202: \treturn boundingBoxes\n  203  \n  204  }\n  ...\n  316  \n  317  \t// Draw fixation dot\n  318: \tboundingBoxesFixation['x']=[]\n  319: \tboundingBoxesFixation['y']=[]\n  320  \n  321  \tfuncreturn = await renderImageOnCanvas(image, gridindex, scale, canvasobj); \n  322: \tboundingBoxesFixation.x.push(funcreturn[0]);\n  323: \tboundingBoxesFixation.y.push(funcreturn[1]);\n  324  }\n  325  function renderFixationUsingDot(color, gridindex, dot_pixelradius, canvasobj){\n  ...\n  337  \n  338  \t// Define (rectangular) boundaries of fixation\n  339: \tboundingBoxesFixation['x']=[]\n  340: \tboundingBoxesFixation['y']=[]\n  341: \tboundingBoxesFixation.x.push([xcent-rad+CANVAS.offsetleft, xcent+rad+CANVAS.offsetleft]);\n  342: \tboundingBoxesFixation.y.push([ycent-rad+CANVAS.offsettop, ycent+rad+CANVAS.offsettop]);\n  343  }\n  344  \n\n27 matches across 4 files\n\n\nSearching 13 files for \"boundingBoxesFixation\"\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_globalvariables.js:\n  115  CURRTRIAL.TASK_idx = []\n  116  \n  117: var boundingBoxesFixation={}; //where the fixation touch targets are on the canvas\n  118  var waitforClick; //variable to hold generator\n  119  var waitforEvent; //variable to hold generator\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_runtrial.js:\n  117  \n  118      //========= AWAIT HOLD FIXATION TOUCH =========//\n  119:     var touchhold_return = await touchhold_promise(TASK.FixationDuration,boundingBoxesFixation,FLAGS.punishOutsideTouch)\n  120      CURRTRIAL.fixationtouchevent = touchhold_return.type\n  121      CURRTRIAL.fixationxyt = [touchhold_return.cxyt[1], touchhold_return.cxyt[2], touchhold_return.cxyt[3]]\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_screenfunctions.js:\n  316  \n  317  \t// Draw fixation dot\n  318: \tboundingBoxesFixation['x']=[]\n  319: \tboundingBoxesFixation['y']=[]\n  320  \n  321  \tfuncreturn = await renderImageOnCanvas(image, gridindex, scale, canvasobj); \n  322: \tboundingBoxesFixation.x.push(funcreturn[0]);\n  323: \tboundingBoxesFixation.y.push(funcreturn[1]);\n  324  }\n  325  function renderFixationUsingDot(color, gridindex, dot_pixelradius, canvasobj){\n  ...\n  337  \n  338  \t// Define (rectangular) boundaries of fixation\n  339: \tboundingBoxesFixation['x']=[]\n  340: \tboundingBoxesFixation['y']=[]\n  341: \tboundingBoxesFixation.x.push([xcent-rad+CANVAS.offsetleft, xcent+rad+CANVAS.offsetleft]);\n  342: \tboundingBoxesFixation.y.push([ycent-rad+CANVAS.offsettop, ycent+rad+CANVAS.offsettop]);\n  343  }\n  344  \n\n10 matches across 3 files\n\n\nSearching 13 files for \"renderImageOnCanvas\"\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_screenfunctions.js:\n  174  \tcontext.fillStyle=\"#7F7F7F\";  // Gray out before buffering sample\n  175  \t//context.fillRect(0,100, canvasobj.width,canvasobj.height); // 100 is for the photodiode bar at the top of the screen\n  176: \tawait renderImageOnCanvas(sample_image, TASK.SampleGridIndex, TASK.SampleScale, CANVAS.obj.sample)\n  177  \t\n  178  \t//========== BUFFER TEST CANVAS ==========//\n  ...\n  194  \t\t\n  195  \n  196: \t\tfuncreturn = await renderImageOnCanvas(test_images[i], TASK.ObjectGridMapping[i], TASK.TestScale, CANVAS.obj.test); \n  197  \t\tboundingBoxes.x.push(funcreturn[0]); \n  198  \t\tboundingBoxes.y.push(funcreturn[1]); \n  ...\n  205  \n  206  \n  207: async function renderImageOnCanvas(image, grid_index, scale, canvasobj){\n  208  \tvar context=canvasobj.getContext('2d');\n  209  \n  ...\n  320  \tboundingBoxesFixation['GridIndex'] = []\n  321  \n  322: \tfuncreturn = await renderImageOnCanvas(image, gridindex, scale, canvasobj); \n  323  \tboundingBoxesFixation.x.push(funcreturn[0]);\n  324  \tboundingBoxesFixation.y.push(funcreturn[1]);\n\n4 matches in 1 file\n\n\nSearching 13 files for \"boundingBoxes\"\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_eventlisteners.js:\n    1: function touchhold_promise(touchduration,boundingBoxes,punishOutsideTouch){\n    2  \tvar resolveFunc\n    3  \tvar errFunc\n    .\n   50  \t\t\t\t\tvar y = touchevent.clientY\n   51  \t\t\t\t}\t\n   52: \t\t\t\tfor (var q=0; q<=boundingBoxes.x.length-1; q++){\n   53: \t\t\t\t\tif (x >= boundingBoxes.x[q][0] && x <= boundingBoxes.x[q][1] &&\n   54: \t\t\t\t\t\ty >= boundingBoxes.y[q][0] && y <= boundingBoxes.y[q][1]){\n   55: \t\t\t\t\t\tchosenGridIndex=boundingBoxes.GridIndex[q]\n   56  \t\t\t\t\t}//if in bounding box\n   57  \t\t\t\t}//for q boxes\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_globalvariables.js:\n  115  CURRTRIAL.TASK_idx = []\n  116  \n  117: var boundingBoxesFixation={}; //where the fixation touch targets are on the canvas\n  118  var waitforClick; //variable to hold generator\n  119  var waitforEvent; //variable to hold generator\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_runtrial.js:\n   90  \n   91  //============ AWAIT BUFFER CANVASES WITH SAMPLE & TEST IMAGES ============//\n   92: boundingBoxesTestOrder = await bufferTrialImages(CURRTRIAL.sampleimage, CURRTRIAL.testimages);\n   93  \n   94  //============ FIXATION SCREEN ============//\n   ..\n  117  \n  118      //========= AWAIT HOLD FIXATION TOUCH =========//\n  119:     var touchhold_return = await touchhold_promise(TASK.FixationDuration,boundingBoxesFixation,FLAGS.punishOutsideTouch)\n  120      CURRTRIAL.fixationtouchevent = touchhold_return.type\n  121      CURRTRIAL.fixationxyt = [touchhold_return.cxyt[1], touchhold_return.cxyt[2], touchhold_return.cxyt[3]]\n  ...\n  149  FLAGS.punishOutsideTouch = 0            \n  150  \n  151: var p1 = touchhold_promise(0,boundingBoxesTestOrder,FLAGS.punishOutsideTouch)\n  152  var p2 = choiceTimeOut(TASK.ChoiceTimeOut)\n  153  \n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_screenfunctions.js:\n  185  \t// \tcontext.fillRect(0,100, canvasobj.width,canvasobj.height); // 100 is for the photodiode bar at the top of the screen\n  186  \t// }\n  187: \tvar boundingBoxes = {}\n  188: \tboundingBoxes['x'] = []\n  189: \tboundingBoxes['y'] = []\n  190: \tboundingBoxes['GridIndex'] = []\n  191  \n  192  \t// Draw test object(s): \n  ...\n  195  \n  196  \t\tfuncreturn = await renderImageOnCanvas(test_images[i], TASK.ObjectGridMapping[i], TASK.TestScale, CANVAS.obj.test); \n  197: \t\tboundingBoxes.x.push(funcreturn[0]); \n  198: \t\tboundingBoxes.y.push(funcreturn[1]); \n  199: \t\tboundingBoxes['GridIndex'].push(TASK.ObjectGridMapping[i])\n  200  \t}\n  201  \t\n  202: \treturn boundingBoxes\n  203  \n  204  }\n  ...\n  316  \n  317  \t// Draw fixation dot\n  318: \tboundingBoxesFixation['x']=[]\n  319: \tboundingBoxesFixation['y']=[]\n  320: \tboundingBoxesFixation['GridIndex'] = []\n  321  \n  322  \tfuncreturn = await renderImageOnCanvas(image, gridindex, scale, canvasobj); \n  323: \tboundingBoxesFixation.x.push(funcreturn[0]);\n  324: \tboundingBoxesFixation.y.push(funcreturn[1]);\n  325: \tboundingBoxesFixation['GridIndex'].push(funcreturn[2])\n  326  }\n  327  function renderFixationUsingDot(color, gridindex, dot_pixelradius, canvasobj){\n  ...\n  339  \n  340  \t// Define (rectangular) boundaries of fixation\n  341: \tboundingBoxesFixation['x']=[]\n  342: \tboundingBoxesFixation['y']=[]\n  343: \tboundingBoxesFixation.x.push([xcent-rad+CANVAS.offsetleft, xcent+rad+CANVAS.offsetleft]);\n  344: \tboundingBoxesFixation.y.push([ycent-rad+CANVAS.offsettop, ycent+rad+CANVAS.offsettop]);\n  345  }\n  346  \n\n29 matches across 4 files\n\n\nSearching 13 files for \"CURRTRIAL.correctitem\"\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_globalvariables.js:\n  106  CURRTRIAL.responsexyt = []; \n  107  CURRTRIAL.response = []; \n  108: CURRTRIAL.correctitem = NaN;\n  109  CURRTRIAL.correct = [];\n  110  CURRTRIAL.nreward = NaN;\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_runtrial.js:\n   86  //============ SELECT SAMPLE & TEST IMAGES ============//\n   87  // Draw one (1) sample image from samplebag\n   88: [CURRTRIAL.sampleimage, CURRTRIAL.sampleindex, CURRTRIAL.testimages, CURRTRIAL.testindices, CURRTRIAL.correctitem] = await TQ.get_trial(TRIAL_NUMBER_FROM_TASKSTREAM_START);\n   89  \n   90  \n   ..\n  122      CURRTRIAL.allfixationxyt[TASK.NFixations - FLAGS.waitingforTouches - 1] = CURRTRIAL.fixationxyt\n  123      if (CURRTRIAL.fixationtouchevent == \"touchheld\"){\n  124:         CURRTRIAL.response = CURRTRIAL.correctitem\n  125      } \n  126  \n  ...\n  159  \n  160  \n  161: console.log('Stage', TASK.CurrentAutomatorStage, 'choice:', CURRTRIAL.response, 'correct choice:', CURRTRIAL.correctitem)\n  162: if (CURRTRIAL.response == CURRTRIAL.correctitem){ \n  163      CURRTRIAL.correct = 1; \n  164  }\n  ...\n  225  TRIAL.FixationTouchEvent.push(CURRTRIAL.fixationtouchevent)\n  226  TRIAL.ResponseTouchEvent.push(CURRTRIAL.responsetouchevent)\n  227: TRIAL.CorrectItem.push(CURRTRIAL.correctitem)\n  228  TRIAL.NReward.push(CURRTRIAL.nreward)\n  229  TRIAL.AutomatorStage.push(TASK.CurrentAutomatorStage)\n\n6 matches across 2 files\n\n\nSearching 13 files for \"TASK.CurrentAutomatorStage\"\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_automator.js:\n   41  \n   42  \n   43: \t\tfor (var a = TASK.CurrentAutomatorStage; a < this.automator_data.length; a++){\n   44  \t\t\t\n   45  \t\t\tconsole.time('Loaded stage '+a)\n   ..\n   82  \n   83  \t\tvar current_stage_hash = stageHash(TASK); \n   84: \t\tvar i_current_stage = TASK.CurrentAutomatorStage\n   85  \n   86  \t\t// Overwrite any user-generated changes to TASK to adhere to i_current_stage\n   ..\n  126  \t\t\t// If finished final stage of automator,\n  127  \n  128: \t\t\tif(TASK.CurrentAutomatorStage+1 >= this.automator_data.length){\n  129  \t\t\t\tvar restart_automator = true // todo: move into user control somehow \n  130  \t\t\t\tif(restart_automator == true){\n  131  \t\t\t\t\tconsole.log(\"Restarting automator WARNING TODO \")\n  132: \t\t\t\t\tTASK.CurrentAutomatorStage = 0\n  133  \t\t\t\t\tFLAGS.need2saveParameters=1\n  134  \t\t\t\t\tconsole.log('SUBJECT ADVANCED TO STAGE ' + (i_current_stage+1) + ' of '+(this.automator_data.length-1) + ' with ' + pctcorrect+'\\% performance on n='+ntrials)\n  ...\n  166  \n  167  \t\t\t\t\tTASK.Automator = 0; \n  168: \t\t\t\t\tTASK.CurrentAutomatorStage = 'off';\n  169  \t\t\t\t\tconsole.log('COMPLETED FINAL STAGE, TURNING AUTOMATOR OFF')\n  170  \t\t\t\t\tconsole.log('With '+pctcorrect+'\\% performance on n='+ntrials+', subject completed the final stage '+(i_current_stage)+' of '+(this.automator_data.length-1)+' (zero indexing) of automator.')\n  ...\n  174  \t\t\telse{\n  175  \t\t\t\t// Otherwise, advance to the next stage.\n  176: \t\t\t\tTASK.CurrentAutomatorStage = TASK.CurrentAutomatorStage + 1; \n  177  \t\t\t\tFLAGS.need2saveParameters=1\n  178  \t\t\t\tconsole.log('SUBJECT ADVANCED TO STAGE ' + (i_current_stage+1) + ' of '+(this.automator_data.length-1) + ' with ' + pctcorrect+'\\% performance on n='+ntrials)\n  ...\n  217  \tvar current_stage_hash_string = ''\n  218  \tif (task.Automator != 0){\n  219: \t\tcurrent_stage_hash_string = task.AutomatorFilePath+'_stage'+task.CurrentAutomatorStage; \n  220  \t}\n  221  \n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_dropbox.js:\n  460  \t\t\t\tcontents: datastr,\n  461  \t\t\t\tmode: {[\".tag\"]: \"overwrite\"} })\n  462: \t\t\t\tconsole.log(TASK.CurrentAutomatorStage+\" BEHAVIOR FILE UPLOADED at \"+savepath)\n  463  \t\t\t\n  464  \n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_runtrial.js:\n   54  \n   55      else if(TASK.Automator == 1){\n   56:         TQ = AM.AutomatorPreBuffer.TrialQueue[TASK.CurrentAutomatorStage]\n   57      } \n   58  \n   ..\n  159  \n  160  \n  161: console.log('Stage', TASK.CurrentAutomatorStage, 'choice:', CURRTRIAL.response, 'correct choice:', CURRTRIAL.correctitem)\n  162  if (CURRTRIAL.response == CURRTRIAL.correctitem){ \n  163      CURRTRIAL.correct = 1; \n  ...\n  227  TRIAL.CorrectItem.push(CURRTRIAL.correctitem)\n  228  TRIAL.NReward.push(CURRTRIAL.nreward)\n  229: TRIAL.AutomatorStage.push(TASK.CurrentAutomatorStage)\n  230  TRIAL.TSequenceDesired.push(CURRTRIAL.tsequencedesired)\n  231  TRIAL.TSequenceActual.push(CURRTRIAL.tsequenceactual)\n  ...\n  251  var _ms_since_last_touch_data_save = performance.now() - last_touch_save\n  252  if ( _ms_since_last_trial_data_save > TRIALDATA_SAVE_TIMEOUT_PERIOD){ \n  253:     // console.log(_ms_since_last_trial_data_save/1000+'s since last trial data save. At trial'+ TRIAL_NUMBER_FROM_SESSION_START +'. automator stage:'+TASK.CurrentAutomatorStage)\n  254      DW.saveTrialDatatoDropbox(SESSION, DEVICE, TASK_ARCHIVE, CANVAS, TRIAL, FLAGS.debug_mode)\n  255      last_trial_data_save = performance.now()\n\n13 matches across 3 files\n\n\nSearching 13 files for \"timeout\"\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_bluetooth.js:\n  222      }\n  223      time('Retrying in ' + delay + 's... (' + max + ' tries left)');\n  224:     setTimeout(function() {\n  225        exponentialBackoff(--max, delay * 2, toTry, success, fail);\n  226      }, delay * 1000);\n  ...\n  257      console.log('Pinging BLE device')\n  258      ble.writeconnectioncharacteristic.writeValue(arrInt8)\n  259:     pingTimer = setTimeout(function(){\n  260:       clearTimeout(pingTimer);\n  261        pingBLE();\n  262      }, ble.ping_interval)\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_dropbox.js:\n  518  \t\t    var success = false \n  519  \t\t    var i = 1; \n  520: \t\t    var timeout_seed =  1000; \n  521  \t\t    var max_retries = 10; \n  522  \n  ...\n  532  \t\t\t\tcatch(error){\n  533  \t\t\t\t\tconsole.log(error)\n  534: \t\t\t\t\tconsole.log('Trying to write in '+(timeout_seed*i)+'ms...on try '+ i)\n  535: \t\t\t\t\tsleep(timeout_seed * i)\n  536  \t\t\t\t\ti++\n  537  \t\t\t\t\tcontinue; \n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_eventlisteners.js:\n   75  \t\t\t\t\tif (touchduration > 0){\n   76  \t\t\t\t\t\t//Start timer\n   77: \t\t\t\t\t\ttouchTimer = setTimeout(function(){\n   78  \t\t\t\t\t\t\tFLAGS.waitingforTouches--\n   79  \t\t\t\t\t\t\tFLAGS.acquiredTouch = 0\n   ..\n   97  \t\t\t\telse if (chosenbox == -1){\n   98  \t\t\t\t\tFLAGS.acquiredTouch = 0\n   99: \t\t\t\t\tclearTimeout(touchTimer)\n  100  \t\t\t\t\treturn_event.type = \"touchbroken\"\n  101  \t\t\t\t\tbreak;\n  ...\n  107  \t\t\t\tFLAGS.acquiredTouch = 0\n  108  \t\t\t\t//console.log('was fixating but lifted finger prematurely');\n  109: \t\t\t\tclearTimeout(touchTimer);\n  110  \t\t\t\treturn_event.type = \"touchbroken\"\n  111  \t\t\t\tbreak;\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_installsettings.js:\n   34  \n   35  var TOUCHSTRING_MAX_CACHE_SIZE = 30000 // saves if touchstring gets to be 30k characters or larger\n   36: var TOUCHSTRING_SAVE_TIMEOUT_PERIOD_IN_SECONDS = 10 // saves touches at most every TOUCHSTRING_SAVE_TIMEOUT_PERIOD seconds\n   37: var TOUCHSTRING_SAVE_TIMEOUT_PERIOD = TOUCHSTRING_SAVE_TIMEOUT_PERIOD_IN_SECONDS * 1000 \n   38  var last_touch_save = performance.now()\n   39  \n   40  \n   41: var TRIALDATA_SAVE_TIMEOUT_PERIOD_IN_SECONDS = 5 // \n   42: var TRIALDATA_SAVE_TIMEOUT_PERIOD = TRIALDATA_SAVE_TIMEOUT_PERIOD_IN_SECONDS * 1000 \n   43  var last_trial_data_save = performance.now()\n   44  // ------ todo: move into params file -\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_runtrial.js:\n  150  \n  151  var p1 = touchhold_promise(0,boundingBoxesTestOrder,FLAGS.punishOutsideTouch)\n  152: var p2 = choiceTimeOut(TASK.ChoiceTimeOut)\n  153  \n  154  var race_return = await Promise.race([p1,p2])\n  ...\n  203  else if (CURRTRIAL.correct == 0) {\n  204      CANVAS.sequencepost[1] = \"punish\";\n  205:     CANVAS.tsequencepost[2] = CANVAS.tsequencepost[1]+TASK.PunishTimeOut;\n  206      frame.shown=[];\n  207      for (var q in CANVAS.sequencepost){frame.shown[q]=0}; frame.current=0;\n  ...\n  250  var _ms_since_last_trial_data_save = performance.now() - last_trial_data_save\n  251  var _ms_since_last_touch_data_save = performance.now() - last_touch_save\n  252: if ( _ms_since_last_trial_data_save > TRIALDATA_SAVE_TIMEOUT_PERIOD){ \n  253      // console.log(_ms_since_last_trial_data_save/1000+'s since last trial data save. At trial'+ TRIAL_NUMBER_FROM_SESSION_START +'. automator stage:'+TASK.CurrentAutomatorStage)\n  254      DW.saveTrialDatatoDropbox(SESSION, DEVICE, TASK_ARCHIVE, CANVAS, TRIAL, FLAGS.debug_mode)\n  ...\n  256  }\n  257  \n  258: if (_ms_since_last_touch_data_save > TOUCHSTRING_SAVE_TIMEOUT_PERIOD){\n  259      // console.log(_ms_since_last_touch_data_save/1000 +'s since last TOUCHSTRING save. '+TOUCHSTRING.length+' length TOUCHSTRING save requested.')\n  260      DW.saveTouchestoDropbox(FLAGS.debug_mode)\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_utils.js:\n  203  \n  204  function sleep(ms) {\n  205:   return new Promise(resolve => setTimeout(resolve, ms));\n  206  }\n  207  \n  208  \n  209  // Promise: choice time-out\n  210: function choiceTimeOut(timeout){\n  211    return new Promise(\n  212      function(resolve, reject){\n  213:       var timer_return = {type: \"TimeOut\", cxyt: [-1,-1,-1,-1]}\n  214:       setTimeout(function(){resolve(timer_return)},timeout)\n  215      })\n  216  }\n  ...\n  219  function dispensePunish(){\n  220    return new Promise(function(resolve,reject){\n  221:     setTimeout(function(){resolve(1);},TASK.PunishTimeOut); //milliseconds\n  222    }).then();\n  223  }\n\n29 matches across 6 files\n\n\nSearching 13 files for \"currtrial.sampleindex\"\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_globalvariables.js:\n  100  CURRTRIAL.fixationxyt = [];\n  101  CURRTRIAL.allfixationxyt = [];\n  102: CURRTRIAL.sampleindex = NaN;\n  103  CURRTRIAL.sampleimage = undefined;\n  104  CURRTRIAL.testindices = NaN;\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_runtrial.js:\n   86  //============ SELECT SAMPLE & TEST IMAGES ============//\n   87  // Draw one (1) sample image from samplebag\n   88: [CURRTRIAL.sampleimage, CURRTRIAL.sampleindex, CURRTRIAL.testimages, CURRTRIAL.testindices, CURRTRIAL.correctitem] = await TQ.get_trial(TRIAL_NUMBER_FROM_TASKSTREAM_START);\n   89  \n   90: console.log(TRIAL_NUMBER_FROM_TASKSTREAM_START,'CURRTRIAL.sampleindex', CURRTRIAL.sampleindex, 'CURRTRIAL.correctitem', CURRTRIAL.correctitem)\n   91  \n   92  //============ AWAIT BUFFER CANVASES WITH SAMPLE & TEST IMAGES ============//\n   ..\n  220  TRIAL.FixationXYT.push(CURRTRIAL.fixationxyt)\n  221  TRIAL.AllFixationXYT.push(CURRTRIAL.allfixationxyt  )\n  222: TRIAL.Sample.push(CURRTRIAL.sampleindex )\n  223  TRIAL.Test.push(CURRTRIAL.testindices )\n  224  TRIAL.ResponseXYT.push(CURRTRIAL.responsexyt)\n\n5 matches across 2 files\n\n\nSearching 13 files for \"refreshCanvasSettings\"\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_runtrial.js:\n   20      TASK_ARCHIVE_COUNTER++\n   21      //============= SET UP CANVAS =============//\n   22:     refreshCanvasSettings(TASK, RewardDuration); \n   23      setupCanvasHeadsUp()\n   24      windowWidth = document.body.clientWidth; //get true window dimensions at last possible moment\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_screenfunctions.js:\n   19  \n   20  //================== LOAD STATUS DISPLAY ==================//\n   21: function refreshCanvasSettings(TASK_entry){\n   22  \t// TODO: cleanup CANVAS; separate canvas ID from sequence logic; 'tsequence' variables coded by length rather than absolute time\n   23  \n\n2 matches across 2 files\n\n\nSearching 13 files for \"RewardDuration\"\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_globalvariables.js:\n   11  TRIAL_NUMBER_FROM_SESSION_START = 0 \n   12  TRIAL_NUMBER_FROM_TASKSTREAM_START = 0\n   13: RewardDuration = 0 \n   14  \n   15  var ParamFilePath = ''; \n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_runtrial.js:\n    1  //============= AWAIT LOAD PARAMS =============//\n    2  async function runtrial(){\n    3: RewardDuration = 0 \n    4  if (TASK.Automator !=0){    \n    5      TASK = await AM.monitorStage_State_and_Transition(TASK);\n    .\n   20      TASK_ARCHIVE_COUNTER++\n   21      //============= SET UP CANVAS =============//\n   22:     refreshCanvasSettings(TASK, RewardDuration); \n   23      setupCanvasHeadsUp()\n   24      windowWidth = document.body.clientWidth; //get true window dimensions at last possible moment\n   ..\n  176  } \n  177  \n  178: RewardDuration = setReward();\n  179  \n  180  //============ DELIVER REWARD/PUNISH ============//\n  ...\n  182  if (CURRTRIAL.correct == 1){\n  183      CANVAS.sequencepost[1]=\"reward\";\n  184:     CANVAS.tsequencepost[2] = CANVAS.tsequencepost[1]+RewardDuration*1000;\n  185  \n  186      for (var q = 0; q <= CURRTRIAL.nreward-1; q++){\n  ...\n  194          }\n  195          else if (ble.connected == true){\n  196:             var p2 = writepumpdurationtoBLE(Math.round(RewardDuration*1000))\n  197              await Promise.all([p1, p2])\n  198          }\n  ...\n  232  TRIAL.trial_num_Session.push(TRIAL_NUMBER_FROM_SESSION_START)\n  233  TRIAL.trial_num_TaskStream.push(TRIAL_NUMBER_FROM_TASKSTREAM_START)\n  234: TRIAL.reward_duration.push(RewardDuration)\n  235  TRIAL.TASK_ARCHIVE_counter.push(TASK_ARCHIVE_COUNTER)\n  236  \n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_screenfunctions.js:\n   31  \t\n   32  \t// Adjust length of reward screen based on reward amount \n   33: \tCANVAS.tsequencepost[2] = CANVAS.tsequencepost[1]+RewardDuration*1000;\n   34  \n   35  \t// Adjust location of CANVAS based on species-specific setup\n\n8 matches across 3 files\n\n\nSearching 13 files for \"DW\" (case sensitive, whole word)\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk.html:\n  101  }\n  102  \n  103: DW = new DropboxWriter(dbx)\n  104  setupDragTracker()\n  105  setupTapTracker()\n  ...\n  193  \tawait subjectIDPromise()\n  194  \tParamFilePath = PARAM_DIRPATH + SESSION.Subject + \"_params.txt\";\n  195: \t_funcreturn = await DW.loadParametersfromDropbox(ParamFilePath)\n  196  \tTASK = _funcreturn[0]\n  197  \tParamFileRev = _funcreturn[1]\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_ImageBuffer.js:\n   60  \t\t\tvar filename = imagenames; \n   61  \t\t\tif (!(filename in this.cache_dict)){\n   62: \t\t\t\tvar image = await DW.loadImagefromDropbox(filename); \n   63  \t\t\t\tthis.cache_dict[filename] = image; \n   64  \t\t\t\tthis.num_elements_in_cache++\n   ..\n   87  \t\t\t\t}\n   88  \t\t\t}\n   89: \t\t\tvar image_array = await DW.loadImageArrayfromDropbox(requested_imagenames)\n   90  \t\t\tfor (var i = 0; i < image_array.length; i++){\n   91  \t\t\t\tthis.cache_dict[requested_imagenames[i]] = image_array[i]; \n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_TrialQueue.js:\n   35  async build(trial_cushion_size){\n   36  \t// Call after construction\n   37: \tvar funcreturn = await DW.loadImageBagPathsParallel(this.ImageBagsSample); \n   38  \tthis.samplebag_labels = funcreturn[1];\n   39  \tthis.samplebag_paths = funcreturn[0]; \n   40  \n   41: \tvar funcreturn = await DW.loadImageBagPathsParallel(this.ImageBagsTest); \n   42  \tthis.testbag_labels = funcreturn[1]; \n   43  \tthis.testbag_paths = funcreturn[0]; \n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_automator.js:\n   25  \t}\n   26  \tasync build(num_prebuffer_trials){\n   27: \t\tthis.trialhistory = await DW.readTrialHistoryFromDropbox(ndatafiles2read);\n   28  \n   29: \t\tthis.__initial_trial_history_on_load = await DW.readTrialHistoryFromDropbox(ndatafiles2read);\n   30  \n   31  \t\t// trialhistory.trainingstage \n   ..\n   34  \t\t// trialhistory.correct \n   35  \t\t// trialhistory.trialnumber \t\t\n   36: \t\tthis.automator_data = await DW.parseAutomatorFilefromDropbox(TASK.AutomatorFilePath)\n   37: \t\t// await DW.saveParameterstoDropbox() \n   38  \n   39  \t\tthis.AutomatorPreBuffer = {}\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_dropbox.js:\n  401  \t\t// Iterate over files and add relevant variables\n  402  \t\tfor (var i = 0; i< filepaths.length; i++){\n  403: \t\t\tvar datastring = await DW.loadTextFilefromDropbox(dbx, filepaths[i])\n  404  \t\t\tvar data = JSON.parse(datastring)\n  405  \n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_eventlisteners.js:\n  185  async function sync_data_listener(event){\n  186  \tconsole.log(\"Called data save from sync button\")\n  187: \tawait DW.saveTrialDatatoDropbox(TASK_ARCHIVE, CANVAS, TRIAL, FLAGS.debug_mode)\n  188: \tawait DW.saveTouchestoDropbox(FLAGS.debug_mode)\n  189  \n  190  \treturn \n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_runtrial.js:\n   10      var old_ImageBagsSample = TASK.ImageBagsSample\n   11      var old_ImageBagsTest = TASK.ImageBagsTest\n   12:     var _funcreturn = await DW.loadParametersfromDropbox(ParamFilePath)\n   13      TASK =_funcreturn[0]\n   14      ParamFileRev = _funcreturn[1]\n   ..\n  249  if ( _ms_since_last_trial_data_save > TRIALDATA_SAVE_TIMEOUT_PERIOD){ \n  250      // console.log(_ms_since_last_trial_data_save/1000+'s since last trial data save. At trial'+ TRIAL_NUMBER_FROM_SESSION_START +'. automator stage:'+TASK.CurrentAutomatorStage)\n  251:     DW.saveTrialDatatoDropbox(SESSION, DEVICE, TASK_ARCHIVE, CANVAS, TRIAL, FLAGS.debug_mode)\n  252      last_trial_data_save = performance.now()\n  253  }\n  ...\n  255  if (_ms_since_last_touch_data_save > TOUCHSTRING_SAVE_TIMEOUT_PERIOD){\n  256      // console.log(_ms_since_last_touch_data_save/1000 +'s since last TOUCHSTRING save. '+TOUCHSTRING.length+' length TOUCHSTRING save requested.')\n  257:     DW.saveTouchestoDropbox(FLAGS.debug_mode)\n  258      last_touch_save = performance.now()\n  259  }\n  260  \n  261  if (FLAGS.need2saveParameters == 1){\n  262:     FLAGS.need2saveParameters = DW.saveParameterstoDropbox(); // Save parameters asynchronously\n  263  }\n  264  \n  265: FLAGS.need2loadParameters = DW.checkIfFileChangedOnDisk(ParamFilePath, ParamFileRev)\n  266  \n  267  }\n\n18 matches across 7 files\n\n\nSearching 13 files for \"loadParametersfromDropbox\" (case sensitive, whole word)\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk.html:\n  193  \tawait subjectIDPromise()\n  194  \tParamFilePath = PARAM_DIRPATH + SESSION.Subject + \"_params.txt\";\n  195: \t_funcreturn = await DB.loadParametersfromDropbox(ParamFilePath)\n  196  \tTASK = _funcreturn[0]\n  197  \tParamFileRev = _funcreturn[1]\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_dropbox.js:\n  197  \n  198  \t//================== LOAD JSON ==================//\n  199: \tasync loadParametersfromDropbox(paramfile_path){\n  200  \t\ttry{ \n  201  \t\t\tvar datastring = await this.loadTextFilefromDropbox(this.dbx, paramfile_path)\n  ...\n  208  \t\t}\n  209  \t\tcatch(error){\n  210: \t\t\tconsole.error('loadParametersfromDropbox() error: ' + error)\n  211  \t\t\treturn undefined; \n  212  \t\t}\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_runtrial.js:\n   10      var old_ImageBagsSample = TASK.ImageBagsSample\n   11      var old_ImageBagsTest = TASK.ImageBagsTest\n   12:     var _funcreturn = await DB.loadParametersfromDropbox(ParamFilePath)\n   13      TASK =_funcreturn[0]\n   14      ParamFileRev = _funcreturn[1]\n\n4 matches across 3 files\n\n\nSearching 13 files for \"paramfilerev\"\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_dropbox.js:\n  204  \n  205  \t\t\tvar TASK_entry = data\n  206: \t\t\tvar ParamFileRev = filemeta.rev\n  207  \t\t\treturn TASK_entry\n  208  \t\t}\n  ...\n  546  \t\ttry{\n  547  \t\t\tvar filemeta = await this.dbx.filesGetMetadata({path: ParamFilePath})\n  548: \t\t\t\tif (ParamFileRev != filemeta.rev){\n  549: \t\t\t\t\tParamFileRev = filemeta.rev\n  550  \n  551: \t\t\t\t\t//console.log('Parameter file was updated. Rev=' + ParamFileRev)\n  552  \t\t\t\t}\n  553  \t\t}\n  ...\n  569  \t\t\t\n  570  \t\t\tvar filemeta = await this.dbx.filesGetMetadata({path: savepath})\n  571: \t\t\tif (ParamFileRev != filemeta.rev){\n  572: \t\t\t\tParamFileRev = filemeta.rev\n  573  \t\t\t}\n  574  \t\t\tconsole.log(\"TASK written to disk as \"+ParamFilePath+\". Size: \" + response.size)\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_globalvariables.js:\n   15  \n   16  var ParamFilePath = ''; \n   17: var ParamFileRev = ''; // Tracks revision number of the TASK file on disk. \n   18  \n   19  TASK_ARCHIVE_COUNTER = 0 // attached to trial data\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_runtrial.js:\n  261  }\n  262  \n  263: FLAGS.need2loadParameters = DB.checkIfFileChangedOnDisk(ParamFilePath, ParamFileRev)\n  264  \n  265  }\n\n8 matches across 3 files\n\n\nSearching 13 files for \"saveParameterTexttoDropbox\"\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_dropbox.js:\n  512  \t}\n  513  \n  514: \tasync saveParameterTexttoDropbox(parameter_text){\n  515  \t\ttry{\n  516  \t\t    datastr = parameter_text\n\n1 match in 1 file\n\n\nSearching 13 files for \"paramfilerev\"\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_dropbox.js:\n  204  \n  205  \t\t\tvar TASK_entry = data\n  206: \t\t\t//var ParamFileRev = filemeta.rev\n  207  \t\t\treturn TASK_entry\n  208  \t\t}\n  ...\n  524  \t\t\t\n  525  \t\t\tvar filemeta = await this.dbx.filesGetMetadata({path: savepath})\n  526: \t\t\tif (ParamFileRev != filemeta.rev){\n  527: \t\t\t\tParamFileRev = filemeta.rev\n  528  \t\t\t}\n  529  \t\t\tconsole.log(\"TASK written to disk as \"+ParamFilePath+\". Size: \" + response.size)\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_globalvariables.js:\n   15  \n   16  var ParamFilePath = ''; \n   17: var ParamFileRev = ''; // Tracks revision number of the TASK file on disk. \n   18  \n   19  TASK_ARCHIVE_COUNTER = 0 // attached to trial data\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_runtrial.js:\n  261  }\n  262  \n  263: FLAGS.need2loadParameters = DB.checkIfFileChangedOnDisk(ParamFilePath, ParamFileRev)\n  264  \n  265  }\n\n5 matches across 3 files\n\n\nSearching 13 files for \"FLAGS.need2loadParameters = DB.checkIfFileChangedOnDisk(ParamFilePath, ParamFileRev)\ncheckiffilechanged\"\n\n0 matches\n\nSearching 13 files for \"FLAGS.need2loadParameters = DB.checkIfFileChangedOnDisk(ParamFilePath, ParamFileRev)\ncheckiffilechanged\"\n\n0 matches\n\nSearching 13 files for \"changedon\"\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_dropbox.js:\n  177  \n  178  \t//================== CHECK FILE REV ==================//\n  179: \tasync checkIfFileChangedOnDisk(_Filepath, _FileRevisionHash){\n  180  \t\ttry{\n  181  \t\t\tvar filemeta = await this.dbx.filesGetMetadata({path: _Filepath})\n  ...\n  183  \t\t\t\t_FileRevisionHash = filemeta.rev\n  184  \t\t\t\tconsole.log('File '+_Filepath+ ' on disk was changed. New rev =' + _FileRevisionHash)\n  185: \t\t\t\tconsole.log('checkIfFileChangedOnDisk', 1)\n  186  \t\t\t\treturn 1\n  187  \t\t\t}\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_runtrial.js:\n  261  }\n  262  \n  263: FLAGS.need2loadParameters = DB.checkIfFileChangedOnDisk(ParamFilePath, ParamFileRev)\n  264  \n  265  }\n\n3 matches across 2 files\n\n\nSearching 13 files for \"checkIfFileChangedOnDisk\"\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_dropbox.js:\n  185  \n  186  \t//================== CHECK FILE REV ==================//\n  187: \tasync checkIfFileChangedOnDisk(_Filepath, _FileRevisionHash){\n  188  \t\ttry{\n  189  \t\t\tvar filemeta = await this.dbx.filesGetMetadata({path: _Filepath})\n  ...\n  191  \t\t\t\t_FileRevisionHash = filemeta.rev\n  192  \t\t\t\tconsole.log('File '+_Filepath+ ' on disk was changed. New rev =' + _FileRevisionHash)\n  193: \t\t\t\tconsole.log('checkIfFileChangedOnDisk', 1)\n  194  \t\t\t\treturn 1\n  195  \t\t\t}\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_runtrial.js:\n  261  }\n  262  \n  263: FLAGS.need2loadParameters = DB.checkIfFileChangedOnDisk(ParamFilePath, ParamFileRev)\n  264  \n  265  }\n\n3 matches across 2 files\n\n\nSearching 13 files for \"DB\" (case sensitive, whole word)\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk.html:\n  101  }\n  102  \n  103: DB = new DropboxInterface(dbx)\n  104  setupDragTracker()\n  105  setupTapTracker()\n  ...\n  193  \tawait subjectIDPromise()\n  194  \tParamFilePath = PARAM_DIRPATH + SESSION.Subject + \"_params.txt\";\n  195: \tTASK = await DB.loadParametersfromDropbox(ParamFilePath)\n  196  \n  197  \t\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_ImageBuffer.js:\n   60  \t\t\tvar filename = imagenames; \n   61  \t\t\tif (!(filename in this.cache_dict)){\n   62: \t\t\t\tvar image = await DB.loadImagefromDropbox(filename); \n   63  \t\t\t\tthis.cache_dict[filename] = image; \n   64  \t\t\t\tthis.num_elements_in_cache++\n   ..\n   87  \t\t\t\t}\n   88  \t\t\t}\n   89: \t\t\tvar image_array = await DB.loadImageArrayfromDropbox(requested_imagenames)\n   90  \t\t\tfor (var i = 0; i < image_array.length; i++){\n   91  \t\t\t\tthis.cache_dict[requested_imagenames[i]] = image_array[i]; \n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_TrialQueue.js:\n   35  async build(trial_cushion_size){\n   36  \t// Call after construction\n   37: \tvar funcreturn = await DB.loadImageBagPathsParallel(this.ImageBagsSample); \n   38  \tthis.samplebag_labels = funcreturn[1];\n   39  \tthis.samplebag_paths = funcreturn[0]; \n   40  \n   41: \tvar funcreturn = await DB.loadImageBagPathsParallel(this.ImageBagsTest); \n   42  \tthis.testbag_labels = funcreturn[1]; \n   43  \tthis.testbag_paths = funcreturn[0]; \n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_automator.js:\n   25  \t}\n   26  \tasync build(num_prebuffer_trials){\n   27: \t\tthis.trialhistory = await DB.readTrialHistoryFromDropbox(ndatafiles2read);\n   28  \n   29: \t\tthis.__initial_trial_history_on_load = await DB.readTrialHistoryFromDropbox(ndatafiles2read);\n   30  \n   31  \t\t// trialhistory.trainingstage \n   ..\n   34  \t\t// trialhistory.correct \n   35  \t\t// trialhistory.trialnumber \t\t\n   36: \t\tthis.automator_data = await DB.parseAutomatorFilefromDropbox(TASK.AutomatorFilePath)\n   37: \t\t// await DB.saveParameterstoDropbox() \n   38  \n   39  \t\tthis.AutomatorPreBuffer = {}\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_dropbox.js:\n   12  // Asynchronous: Get file list from dropbox directory\n   13  class ParamFile{\n   14: \tconstructor(filepath, DB){\n   15  \t\tthis.filepath = filepath \n   16  \t\tthis.contents = 'Not loaded yet... call this.build() on ParamFile object'\n   ..\n  412  \t\t// Iterate over files and add relevant variables\n  413  \t\tfor (var i = 0; i< filepaths.length; i++){\n  414: \t\t\tvar datastring = await DB.loadTextFilefromDropbox(dbx, filepaths[i])\n  415  \t\t\tvar data = JSON.parse(datastring)\n  416  \n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_eventlisteners.js:\n  185  async function sync_data_listener(event){\n  186  \tconsole.log(\"Called data save from sync button\")\n  187: \tawait DB.saveTrialDatatoDropbox(TASK_ARCHIVE, CANVAS, TRIAL, FLAGS.debug_mode)\n  188: \tawait DB.saveTouchestoDropbox(FLAGS.debug_mode)\n  189  \n  190  \treturn \n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_runtrial.js:\n   10      var old_ImageBagsSample = TASK.ImageBagsSample\n   11      var old_ImageBagsTest = TASK.ImageBagsTest\n   12:     TASK = await DB.loadParametersfromDropbox(ParamFilePath)\n   13  \n   14      TASK_ARCHIVE.push(TASK)\n   ..\n  247  if ( _ms_since_last_trial_data_save > TRIALDATA_SAVE_TIMEOUT_PERIOD){ \n  248      // console.log(_ms_since_last_trial_data_save/1000+'s since last trial data save. At trial'+ TRIAL_NUMBER_FROM_SESSION_START +'. automator stage:'+TASK.CurrentAutomatorStage)\n  249:     DB.saveTrialDatatoDropbox(SESSION, DEVICE, TASK_ARCHIVE, CANVAS, TRIAL, FLAGS.debug_mode)\n  250      last_trial_data_save = performance.now()\n  251  }\n  ...\n  253  if (_ms_since_last_touch_data_save > TOUCHSTRING_SAVE_TIMEOUT_PERIOD){\n  254      // console.log(_ms_since_last_touch_data_save/1000 +'s since last TOUCHSTRING save. '+TOUCHSTRING.length+' length TOUCHSTRING save requested.')\n  255:     DB.saveTouchestoDropbox(FLAGS.debug_mode)\n  256      last_touch_save = performance.now()\n  257  }\n  258  \n  259  if (FLAGS.need2saveParameters == 1){\n  260:     FLAGS.need2saveParameters = DB.saveParameterstoDropbox(); // Save parameters asynchronously\n  261  }\n  262  \n  263: FLAGS.need2loadParameters = DB.checkIfFileChangedOnDisk(ParamFilePath, ParamFileRev)\n  264  \n  265  }\n\n19 matches across 7 files\n\n\nSearching 13 files for \"loadparametersfromdropbox\"\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_runtrial.js:\n   10      var old_ImageBagsSample = TASK.ImageBagsSample\n   11      var old_ImageBagsTest = TASK.ImageBagsTest\n   12:     TASK = await DI.loadParametersfromDropbox(ParamFilePath)\n   13  \n   14      TASK_ARCHIVE.push(TASK)\n\n1 match in 1 file\n\n\nSearching 13 files for \"setupCanvasHeadsUp\"\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_runtrial.js:\n   22  \n   23      refreshCanvasSettings(TASK, RewardDuration); \n   24:     setupCanvasHeadsUp()\n   25      windowWidth = document.body.clientWidth; //get true window dimensions at last possible moment\n   26      windowHeight = document.body.clientHeight;  \n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_screenfunctions.js:\n   83  }\n   84  \n   85: function setupCanvasHeadsUp(){\n   86  \tcanvasobj=document.getElementById(\"canvasheadsup\");\n   87  \tcanvasobj.width=document.body.clientWidth;\n\n2 matches across 2 files\n\n\nSearching 13 files for \"canvasheadsup\"\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk.html:\n   56  \t<button name=\"SyncButton\" style=\"visibility:hidden; position: absolute; top: 0%; left: 95%; height: 30px; width: 50px; font-size: 10px; color: green; border-radius: 10px; z-index:101\">Sync data</button>\n   57  \n   58: \t<canvas id=\"canvasheadsup\" width=\"0\" height=\"0\" src=\"\" style=\"z-index:98; position: absolute; left: 0px; top: 0px;\"> </canvas>\n   59  \t<canvas id=\"canvasblank\" width=\"0\" height=\"0\" src=\"\" style=\"z-index:99; position: absolute; left: 0px; top: 0px;\"> </canvas>\n   60  \t<canvas id=\"canvassample\" width=\"0\" height=\"0\" src=\"\" style=\"z-index:1; position: absolute; left: 0px; top: 0px;\"> </canvas>\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_runtrial.js:\n   22  \n   23      refreshCanvasSettings(TASK, RewardDuration); \n   24:     setupCanvasHeadsUp()\n   25      windowWidth = document.body.clientWidth; //get true window dimensions at last possible moment\n   26      windowHeight = document.body.clientHeight;  \n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_screenfunctions.js:\n   83  }\n   84  \n   85: function setupCanvasHeadsUp(){\n   86: \tcanvasobj=document.getElementById(\"canvasheadsup\");\n   87  \tcanvasobj.width=document.body.clientWidth;\n   88  \tcanvasobj.height=Math.round(document.body.clientHeight*CANVAS.headsupfraction);\n\n4 matches across 3 files\n\n\nSearching 13 files for \"TASK_reader.get\"\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk.html:\n  195  \tTASK_reader = new ParamFile(ParamFilePath, DI)\n  196  \tawait TASK_reader.build()\n  197: \tTASK = TASK_reader.get()\n  198  \t\n  199  \t\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_runtrial.js:\n   11      var old_ImageBagsTest = TASK.ImageBagsTest\n   12  \n   13:     TASK = TASK_reader.get()\n   14      \n   15      if(!old_ImageBagsTest.equals(TASK.ImageBagsTest) || !old_ImageBagsSample.equals(TASK.ImageBagsSample)){\n\n2 matches across 2 files\n\n\nSearching 13 files for \"setupCanvasHeadsUp\"\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_runtrial.js:\n   22  \n   23      refreshCanvasSettings(TASK, RewardDuration); \n   24:     setupCanvasHeadsUp()\n   25      windowWidth = document.body.clientWidth; //get true window dimensions at last possible moment\n   26      windowHeight = document.body.clientHeight;  \n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_screenfunctions.js:\n   83  }\n   84  \n   85: function setupCanvasHeadsUp(){\n   86  \tcanvasobj=document.getElementById(\"canvasheadsup\");\n   87  \tcanvasobj.width=document.body.clientWidth;\n\n2 matches across 2 files\n\n\nSearching 13 files for \"canvasheadsup\"\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk.html:\n   56  \t<button name=\"SyncButton\" style=\"visibility:hidden; position: absolute; top: 0%; left: 95%; height: 30px; width: 50px; font-size: 10px; color: green; border-radius: 10px; z-index:101\">Sync data</button>\n   57  \n   58: \t<canvas id=\"canvasheadsup\" width=\"0\" height=\"0\" src=\"\" style=\"z-index:98; position: absolute; left: 0px; top: 0px;\"> </canvas>\n   59  \t<canvas id=\"canvasblank\" width=\"0\" height=\"0\" src=\"\" style=\"z-index:99; position: absolute; left: 0px; top: 0px;\"> </canvas>\n   60  \t<canvas id=\"canvassample\" width=\"0\" height=\"0\" src=\"\" style=\"z-index:1; position: absolute; left: 0px; top: 0px;\"> </canvas>\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_runtrial.js:\n   22  \n   23      refreshCanvasSettings(TASK, RewardDuration); \n   24:     setupCanvasHeadsUp()\n   25      windowWidth = document.body.clientWidth; //get true window dimensions at last possible moment\n   26      windowHeight = document.body.clientHeight;  \n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_screenfunctions.js:\n   83  }\n   84  \n   85: function setupCanvasHeadsUp(){\n   86: \tcanvasobj=document.getElementById(\"canvasheadsup\");\n   87  \tcanvasobj.width=document.body.clientWidth;\n   88  \tcanvasobj.height=Math.round(document.body.clientHeight*CANVAS.headsupfraction);\n\n4 matches across 3 files\n\n\nSearching 13 files for \"refreshCanvasSettings\"\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_runtrial.js:\n   21      \n   22  \n   23:     refreshCanvasSettings(TASK, RewardDuration); \n   24      windowWidth = document.body.clientWidth; //get true window dimensions at last possible moment\n   25      windowHeight = document.body.clientHeight;  \n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_screenfunctions.js:\n   19  \n   20  //================== LOAD STATUS DISPLAY ==================//\n   21: function refreshCanvasSettings(TASK_entry){\n   22  \t// Adjust length / toggle presence of gray screen between sample and test screens\n   23  \tif (TASK_entry.SampleOFF > 0){\n\n2 matches across 2 files\n\n\nSearching 13 files for \"refreshCanvasSettings\"\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_runtrial.js:\n   21      \n   22  \n   23:     refreshCanvasSettings(TASK); \n   24      windowWidth = document.body.clientWidth; //get true window dimensions at last possible moment\n   25      windowHeight = document.body.clientHeight;  \n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_screenfunctions.js:\n   19  \n   20  //================== LOAD STATUS DISPLAY ==================//\n   21: function refreshCanvasSettings(TASK_entry){\n   22  \t// Adjust length / toggle presence of gray screen between sample and test screens\n   23  \tif (TASK_entry.SampleOFF > 0){\n\n2 matches across 2 files\n\n\nSearching 13 files for \"CANVAS.headsupfraction\"\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_screenfunctions.js:\n   64  \t// Adjust location of CANVAS based on species-specific setup\n   65  \tif (TASK_entry.Species == \"macaque\" || TASK_entry.Species == \"human\"){\n   66: \t\tCANVAS.headsupfraction=0;\n   67  \t}\n   68  \telse if (TASK_entry.Species == \"marmoset\"){\n   69: \t\tCANVAS.headsupfraction=1/3-0.06;\n   70  \t}\n   71  }\n\n2 matches in 1 file\n\n\nSearching 13 files for \"starting load of\"\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_dropbox.js:\n  217  \n  218  \t\t// Returns an array of identical format\n  219: \t\tconsole.log('Starting load of automator file from Dropbox:'+jsontxt_filepath)\n  220  \t\tvar datastring = await this.loadTextFilefromDropbox(this.dbx, jsontxt_filepath)\n  221  \n\n1 match in 1 file\n\n\nSearching 13 files for \"refreshCanvasSettings\"\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_runtrial.js:\n   21      \n   22  \n   23:     refreshCanvasSettings(TASK); \n   24      windowWidth = document.body.clientWidth; //get true window dimensions at last possible moment\n   25      windowHeight = document.body.clientHeight;  \n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_screenfunctions.js:\n   48  \n   49  \n   50: function refreshCanvasSettings(TASK_entry){\n   51  \t// Adjust length / toggle presence of gray screen between sample and test screens\n   52  \tif (TASK_entry.SampleOFF > 0){\n\n2 matches across 2 files\n\n\nSearching 13 files for \"CANVAS.sequence\"\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_runtrial.js:\n  105      CURRTRIAL.starttime=Math.round(performance.now());\n  106      frame.shown=[];\n  107:     for (var q in CANVAS.sequencepre){\n  108          frame.shown[q]=0\n  109      }; \n  ...\n  111  \n  112      //========= AWAIT SHOW FIXATION =========//\n  113:     await displayTrial(CANVAS.sequencepre,CANVAS.tsequencepre);\n  114      SP.audiocontext.suspend()\n  115  \n  ...\n  124  \n  125      //========= AWAIT CLEAR FIXATION =========//\n  126:     for (var q in CANVAS.sequenceblank){frame.shown[q]=0}\n  127      frame.current=0;\n  128      if (FLAGS.waitingforTouches > 0){\n  129:         await displayTrial(CANVAS.sequenceblank,CANVAS.tsequenceblank);\n  130      } //blank out screen\n  131  } \n  ...\n  133  //============== AWAIT SHOW SAMPLE THEN TEST ==============//\n  134  frame.shown=[]\n  135: for (var q in CANVAS.sequence){\n  136      frame.shown[q]=0\n  137  } \n  ...\n  139  frame.current=0\n  140  \n  141: CURRTRIAL.tsequenceactual = await displayTrial(CANVAS.sequence,CANVAS.tsequence);\n  142  CURRTRIAL.tsequencedesired = CANVAS.tsequence\n  143  SP.audiocontext.suspend()\n  ...\n  179  // REWARD\n  180  if (CURRTRIAL.correct == 1){\n  181:     CANVAS.sequencepost[1]=\"reward\";\n  182      CANVAS.tsequencepost[2] = CANVAS.tsequencepost[1]+RewardDuration*1000;\n  183  \n  184      for (var q = 0; q <= CURRTRIAL.nreward-1; q++){\n  185          frame.shown=[];\n  186:         for (var q2 in CANVAS.sequencepost){frame.shown[q2]=0}; frame.current=0;\n  187  \n  188          SP.playSound(2);\n  189:         var p1 = displayTrial(CANVAS.sequencepost,CANVAS.tsequencepost)\n  190          if (ble.connected == false){\n  191              await Promise.all([p1])\n  ...\n  200  //PUNISH\n  201  else if (CURRTRIAL.correct == 0) {\n  202:     CANVAS.sequencepost[1] = \"punish\";\n  203      CANVAS.tsequencepost[2] = CANVAS.tsequencepost[1]+TASK.PunishTimeOut;\n  204      frame.shown=[];\n  205:     for (var q in CANVAS.sequencepost){frame.shown[q]=0}; frame.current=0;\n  206  \n  207:     var p1 = displayTrial(CANVAS.sequencepost,CANVAS.tsequencepost);\n  208      var num_trials_to_buffer_in_punishperiod = 0\n  209      var p2 = TQ.buffer_trials(num_trials_to_buffer_in_punishperiod)\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_screenfunctions.js:\n   51  \t// Adjust length / toggle presence of gray screen between sample and test screens\n   52  \tif (TASK_entry.SampleOFF > 0){\n   53: \t\tCANVAS.sequence = [\"blank\", \"sample\",\"blank\",\"test\"]\n   54  \t\tCANVAS.tsequence = [0,100,100+TASK_entry.SampleON,100+TASK_entry.SampleON+TASK_entry.SampleOFF]; \n   55  \t}\n   56  \telse if (TASK_entry.SampleOFF <= 0 ){\n   57: \t\tCANVAS.sequence = [\"blank\",\"sample\",\"test\"]\n   58  \t\tCANVAS.tsequence = [0,100,100+TASK_entry.SampleON]; \n   59  \t}\n\n14 matches across 2 files\n\n\nSearching 13 files for \"CANVAS.sequence\" (whole word)\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_runtrial.js:\n  133  //============== AWAIT SHOW SAMPLE THEN TEST ==============//\n  134  frame.shown=[]\n  135: for (var q in CANVAS.sequence){\n  136      frame.shown[q]=0\n  137  } \n  ...\n  139  frame.current=0\n  140  \n  141: CURRTRIAL.tsequenceactual = await displayTrial(CANVAS.sequence,CANVAS.tsequence);\n  142  CURRTRIAL.tsequencedesired = CANVAS.tsequence\n  143  SP.audiocontext.suspend()\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_screenfunctions.js:\n   51  \t// Adjust length / toggle presence of gray screen between sample and test screens\n   52  \tif (TASK_entry.SampleOFF > 0){\n   53: \t\tCANVAS.sequence = [\"blank\", \"sample\",\"blank\",\"test\"]\n   54  \t\tCANVAS.tsequence = [0,100,100+TASK_entry.SampleON,100+TASK_entry.SampleON+TASK_entry.SampleOFF]; \n   55  \t}\n   56  \telse if (TASK_entry.SampleOFF <= 0 ){\n   57: \t\tCANVAS.sequence = [\"blank\",\"sample\",\"test\"]\n   58  \t\tCANVAS.tsequence = [0,100,100+TASK_entry.SampleON]; \n   59  \t}\n\n4 matches across 2 files\n\n\nSearching 13 files for \"TASK_entry.SampleOFF\" (whole word)\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_screenfunctions.js:\n   50  function refreshCanvasSettings(TASK_entry){\n   51  \t// Adjust delay period\n   52: \tif (TASK_entry.SampleOFF > 0){\n   53  \t\tCANVAS.screen_name_sequence = [\"blank\", \"sample\",\"blank\",\"test\"]\n   54: \t\tCANVAS.tsequence = [0,100,100+TASK_entry.SampleON,100+TASK_entry.SampleON+TASK_entry.SampleOFF]; \n   55  \t}\n   56: \telse if (TASK_entry.SampleOFF <= 0 ){\n   57  \t\tCANVAS.screen_name_sequence = [\"blank\",\"sample\",\"test\"]\n   58  \t\tCANVAS.tsequence = [0,100,100+TASK_entry.SampleON]; \n\n3 matches in 1 file\n\n\nSearching 13 files for \".SampleON\" (whole word)\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_screenfunctions.js:\n   52  \tif (TASK_entry.SampleOFF > 0){\n   53  \t\tCANVAS.screen_name_sequence = [\"blank\", \"sample\",\"blank\",\"test\"]\n   54: \t\tCANVAS.tsequence = [0,100,100+TASK_entry.SampleON,100+TASK_entry.SampleON+TASK_entry.SampleOFF]; \n   55  \t}\n   56  \telse if (TASK_entry.SampleOFF <= 0 ){\n   57  \t\tCANVAS.screen_name_sequence = [\"blank\",\"sample\",\"test\"]\n   58: \t\tCANVAS.tsequence = [0,100,100+TASK_entry.SampleON]; \n   59  \t}\n   60  \t\n\n3 matches in 1 file\n\n\nSearching 13 files for \"CANVAS.tsequence\" (case sensitive, whole word)\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_runtrial.js:\n  139  frame.current=0\n  140  \n  141: CURRTRIAL.tsequenceactual = await displayTrial(CANVAS.screen_name_sequence,CANVAS.tsequence);\n  142: CURRTRIAL.tsequencedesired = CANVAS.tsequence\n  143  SP.audiocontext.suspend()\n  144  \n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_screenfunctions.js:\n   52  \tif (TASK_entry.t_SampleOff > 0){\n   53  \t\tCANVAS.screen_name_sequence = [\"blank\", \"sample\",\"blank\",\"test\"]\n   54: \t\tCANVAS.tsequence = [0,100,100+TASK_entry.t_SampleON,100+TASK_entry.t_SampleON+TASK_entry.t_SampleOff]; \n   55  \t}\n   56  \telse if (TASK_entry.t_SampleOff <= 0 ){\n   57  \t\tCANVAS.screen_name_sequence = [\"blank\",\"sample\",\"test\"]\n   58: \t\tCANVAS.tsequence = [0,100,100+TASK_entry.t_SampleON]; \n   59  \t}\n   60  \t\n\n4 matches across 2 files\n\n\nSearching 13 files for \"tsequencepost\" (case sensitive, whole word)\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_globalvariables.js:\n   81  \ttsequence: NaN, \n   82  \tsequencepost: [\"blank\",\"reward\",\"blank\"], // blank, reward\n   83: \ttsequencepost: [0,50,100],\n   84  \theadsupfraction: NaN,\n   85  \toffsetleft: 0,\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_runtrial.js:\n  180  if (CURRTRIAL.correct == 1){\n  181      CANVAS.sequencepost[1]=\"reward\";\n  182:     CANVAS.tsequencepost[2] = CANVAS.tsequencepost[1]+RewardDuration*1000;\n  183  \n  184      for (var q = 0; q <= CURRTRIAL.nreward-1; q++){\n  ...\n  187  \n  188          SP.playSound(2);\n  189:         var p1 = displayTrial(CANVAS.sequencepost,CANVAS.tsequencepost)\n  190          if (ble.connected == false){\n  191              await Promise.all([p1])\n  ...\n  201  else if (CURRTRIAL.correct == 0) {\n  202      CANVAS.sequencepost[1] = \"punish\";\n  203:     CANVAS.tsequencepost[2] = CANVAS.tsequencepost[1]+TASK.PunishTimeOut;\n  204      frame.shown=[];\n  205      for (var q in CANVAS.sequencepost){frame.shown[q]=0}; frame.current=0;\n  206  \n  207:     var p1 = displayTrial(CANVAS.sequencepost,CANVAS.tsequencepost);\n  208      var num_trials_to_buffer_in_punishperiod = 0\n  209      var p2 = TQ.buffer_trials(num_trials_to_buffer_in_punishperiod)\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_screenfunctions.js:\n   60  \t\n   61  \t// Adjust length of reward screen based on reward amount \n   62: \tCANVAS.tsequencepost[2] = CANVAS.tsequencepost[1]+RewardDuration*1000;\n   63  }\n   64  \n\n9 matches across 3 files\n\n\nSearching 13 files for \"sequencepost\" (case sensitive, whole word)\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_globalvariables.js:\n   80  \tscreen_name_sequence: [\"blank\",\"sample\",\"blank\",\"test\"], // blank, sample, blank, test\n   81  \tscreen_timeon_sequence: NaN, \n   82: \tsequencepost: [\"blank\",\"reward\",\"blank\"], // blank, reward\n   83  \ttsequencepost: [0,50,100],\n   84  \theadsupfraction: NaN,\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_runtrial.js:\n  179  // REWARD\n  180  if (CURRTRIAL.correct == 1){\n  181:     CANVAS.sequencepost[1]=\"reward\";\n  182      CANVAS.tsequencepost[2] = CANVAS.tsequencepost[1]+RewardDuration*1000;\n  183  \n  184      for (var q = 0; q <= CURRTRIAL.nreward-1; q++){\n  185          frame.shown=[];\n  186:         for (var q2 in CANVAS.sequencepost){frame.shown[q2]=0}; frame.current=0;\n  187  \n  188          SP.playSound(2);\n  189:         var p1 = displayTrial(CANVAS.sequencepost,CANVAS.tsequencepost)\n  190          if (ble.connected == false){\n  191              await Promise.all([p1])\n  ...\n  200  //PUNISH\n  201  else if (CURRTRIAL.correct == 0) {\n  202:     CANVAS.sequencepost[1] = \"punish\";\n  203      CANVAS.tsequencepost[2] = CANVAS.tsequencepost[1]+TASK.PunishTimeOut;\n  204      frame.shown=[];\n  205:     for (var q in CANVAS.sequencepost){frame.shown[q]=0}; frame.current=0;\n  206  \n  207:     var p1 = displayTrial(CANVAS.sequencepost,CANVAS.tsequencepost);\n  208      var num_trials_to_buffer_in_punishperiod = 0\n  209      var p2 = TQ.buffer_trials(num_trials_to_buffer_in_punishperiod)\n\n7 matches across 2 files\n\n\nSearching 13 files for \"sequencepost\" (case sensitive, whole word)\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_globalvariables.js:\n   80  \tscreen_name_sequence: [\"blank\",\"sample\",\"blank\",\"test\"], // blank, sample, blank, test\n   81  \tscreen_timeon_sequence: NaN, \n   82: \tsequencepost: [\"blank\",\"reward\",\"blank\"], // blank, reward\n   83  \ttsequencepost: [0,50,100],\n   84  \theadsupfraction: NaN,\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_runtrial.js:\n  179  // REWARD\n  180  if (CURRTRIAL.correct == 1){\n  181:     CANVAS.sequencepost[1]=\"reward\";\n  182      CANVAS.tsequencepost[2] = CANVAS.tsequencepost[1]+RewardDuration*1000;\n  183  \n  184      for (var q = 0; q <= CURRTRIAL.nreward-1; q++){\n  185          frame.shown=[];\n  186:         for (var q2 in CANVAS.sequencepost){frame.shown[q2]=0}; frame.current=0;\n  187  \n  188          SP.playSound(2);\n  189:         var p1 = displayTrial(CANVAS.sequencepost,CANVAS.tsequencepost)\n  190          if (ble.connected == false){\n  191              await Promise.all([p1])\n  ...\n  200  //PUNISH\n  201  else if (CURRTRIAL.correct == 0) {\n  202:     CANVAS.sequencepost[1] = \"punish\";\n  203      CANVAS.tsequencepost[2] = CANVAS.tsequencepost[1]+TASK.PunishTimeOut;\n  204      frame.shown=[];\n  205:     for (var q in CANVAS.sequencepost){frame.shown[q]=0}; frame.current=0;\n  206  \n  207:     var p1 = displayTrial(CANVAS.sequencepost,CANVAS.tsequencepost);\n  208      var num_trials_to_buffer_in_punishperiod = 0\n  209      var p2 = TQ.buffer_trials(num_trials_to_buffer_in_punishperiod)\n\n7 matches across 2 files\n\n\nSearching 13 files for \"sequencepost\" (case sensitive, whole word)\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_globalvariables.js:\n   80  \tscreen_name_sequence: [\"blank\",\"sample\",\"blank\",\"test\"], // blank, sample, blank, test\n   81  \tscreen_timeon_sequence: NaN, \n   82: \tsequencepost: [\"blank\",\"reward\",\"blank\"], // blank, reward\n   83  \ttsequencepost: [0,50,100],\n   84  \theadsupfraction: NaN,\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_runtrial.js:\n  179  // REWARD\n  180  if (CURRTRIAL.correct == 1){\n  181:     CANVAS.sequencepost[1]=\"reward\";\n  182      CANVAS.tsequencepost[2] = CANVAS.tsequencepost[1]+RewardDuration*1000;\n  183  \n  184      for (var q = 0; q <= CURRTRIAL.nreward-1; q++){\n  185          frame.shown=[];\n  186:         for (var q2 in CANVAS.sequencepost){frame.shown[q2]=0}; frame.current=0;\n  187  \n  188          SP.playSound(2);\n  189:         var p1 = displayTrial(CANVAS.sequencepost,CANVAS.tsequencepost)\n  190          if (ble.connected == false){\n  191              await Promise.all([p1])\n  ...\n  200  //PUNISH\n  201  else if (CURRTRIAL.correct == 0) {\n  202:     CANVAS.sequencepost[1] = \"punish\";\n  203      CANVAS.tsequencepost[2] = CANVAS.tsequencepost[1]+TASK.PunishTimeOut;\n  204      frame.shown=[];\n  205:     for (var q in CANVAS.sequencepost){frame.shown[q]=0}; frame.current=0;\n  206  \n  207:     var p1 = displayTrial(CANVAS.sequencepost,CANVAS.tsequencepost);\n  208      var num_trials_to_buffer_in_punishperiod = 0\n  209      var p2 = TQ.buffer_trials(num_trials_to_buffer_in_punishperiod)\n\n7 matches across 2 files\n\n\nSearching 13 files for \"tsequencepre\" (case sensitive, whole word)\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_globalvariables.js:\n   77  \ttsequenceblank: [0,50], \n   78  \tsequencepre: [\"touchfix\"],\n   79: \ttsequencepre: [0],\n   80  \tscreen_name_sequence: [\"blank\",\"sample\",\"blank\",\"test\"], // blank, sample, blank, test\n   81  \tscreen_timeon_sequence: NaN, \n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_runtrial.js:\n  111  \n  112      //========= AWAIT SHOW FIXATION =========//\n  113:     await displayTrial(CANVAS.sequencepre,CANVAS.tsequencepre);\n  114      SP.audiocontext.suspend()\n  115  \n\n2 matches across 2 files\n\n\nSearching 13 files for \"displayTrial\" (case sensitive, whole word)\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_runtrial.js:\n  111  \n  112      //========= AWAIT SHOW FIXATION =========//\n  113:     await displayTrial(CANVAS.sequencepre,CANVAS.tsequencepre);\n  114      SP.audiocontext.suspend()\n  115  \n  ...\n  127      frame.current=0;\n  128      if (FLAGS.waitingforTouches > 0){\n  129:         await displayTrial(CANVAS.sequenceblank,CANVAS.tsequenceblank);\n  130      } //blank out screen\n  131  } \n  ...\n  139  frame.current=0\n  140  \n  141: CURRTRIAL.tsequenceactual = await displayTrial(CANVAS.screen_name_sequence,CANVAS.screen_timeon_sequence);\n  142  CURRTRIAL.tsequencedesired = CANVAS.screen_timeon_sequence\n  143  SP.audiocontext.suspend()\n  ...\n  187  \n  188          SP.playSound(2);\n  189:         var p1 = displayTrial(CANVAS.screen_name_post_sequence,CANVAS.tsequencepost)\n  190          if (ble.connected == false){\n  191              await Promise.all([p1])\n  ...\n  205      for (var q in CANVAS.screen_name_post_sequence){frame.shown[q]=0}; frame.current=0;\n  206  \n  207:     var p1 = displayTrial(CANVAS.screen_name_post_sequence,CANVAS.tsequencepost);\n  208      var num_trials_to_buffer_in_punishperiod = 0\n  209      var p2 = TQ.buffer_trials(num_trials_to_buffer_in_punishperiod)\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_screenfunctions.js:\n  212  \n  213  \n  214: function displayTrial(sequence,tsequence){\n  215  \tvar resolveFunc\n  216  \tvar errFunc\n\n6 matches across 2 files\n\n\nSearching 13 files for \"sequenceblank\" (case sensitive, whole word)\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_globalvariables.js:\n   74  \tnames: [\"blank\",\"sample\",\"test\",\"touchfix\",\"eyefix\",\"reward\",\"photoreward\",\"punish\"],\n   75  \tfront: \"blank\",\n   76: \tsequenceblank: [\"blank\",\"blank\"], \n   77  \ttsequenceblank: [0,50], \n   78  \tsequencepre: [\"touchfix\"],\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_runtrial.js:\n  124  \n  125      //========= AWAIT CLEAR FIXATION =========//\n  126:     for (var q in CANVAS.sequenceblank){frame.shown[q]=0}\n  127      frame.current=0;\n  128      if (FLAGS.waitingforTouches > 0){\n  129:         await displayTrial(CANVAS.sequenceblank,CANVAS.tsequenceblank);\n  130      } //blank out screen\n  131  } \n\n3 matches across 2 files\n\n\nSearching 13 files for \"refreshCanvasSettings\" (case sensitive, whole word)\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_runtrial.js:\n   21      \n   22  \n   23:     refreshCanvasSettings(TASK); \n   24      windowWidth = document.body.clientWidth; //get true window dimensions at last possible moment\n   25      windowHeight = document.body.clientHeight;  \n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_screenfunctions.js:\n   48  \n   49  \n   50: function refreshCanvasSettings(TASK_entry){\n   51  \t// Adjust delay period\n   52  \tif (TASK_entry.t_SampleOff > 0){\n\n2 matches across 2 files\n\n\nSearching 13 files for \"CURRTRIAL\" (case sensitive, whole word)\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_globalvariables.js:\n   96  }\n   97  \n   98: var CURRTRIAL = {}\n   99: CURRTRIAL.starttime = NaN; \n  100: CURRTRIAL.fixationgridindex = NaN; \n  101: CURRTRIAL.fixationxyt = [];\n  102: CURRTRIAL.allfixationxyt = [];\n  103: CURRTRIAL.sampleindex = NaN;\n  104: CURRTRIAL.sampleimage = undefined;\n  105: CURRTRIAL.testindices = NaN;\n  106: CURRTRIAL.testimages = [];\n  107: CURRTRIAL.responsexyt = []; \n  108: CURRTRIAL.response = []; \n  109: CURRTRIAL.correctitem = NaN;\n  110: CURRTRIAL.correct = [];\n  111: CURRTRIAL.nreward = NaN;\n  112: CURRTRIAL.fixationtouchevent = \"\"\n  113: CURRTRIAL.responsetouchevent = \"\"\n  114: CURRTRIAL.tsequenceactual = []\n  115: CURRTRIAL.tsequencedesired = []\n  116: CURRTRIAL.TASK_idx = []\n  117  \n  118  var boundingBoxesFixation={}; //where the fixation touch targets are on the canvas\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_runtrial.js:\n   81  //============ SELECT SAMPLE & TEST IMAGES ============//\n   82  // Draw one (1) sample image from samplebag\n   83: [CURRTRIAL.sampleimage, CURRTRIAL.sampleindex, CURRTRIAL.testimages, CURRTRIAL.testindices, CURRTRIAL.correctitem] = await TQ.get_trial(TRIAL_NUMBER_FROM_TASKSTREAM_START);\n   84  \n   85: console.log(TRIAL_NUMBER_FROM_TASKSTREAM_START,'CURRTRIAL.sampleindex', CURRTRIAL.sampleindex, 'CURRTRIAL.correctitem', CURRTRIAL.correctitem)\n   86  \n   87  //============ AWAIT BUFFER CANVASES WITH SAMPLE & TEST IMAGES ============//\n   88: boundingBoxesTestOrder = await bufferTrialImages(CURRTRIAL.sampleimage, CURRTRIAL.testimages);\n   89  \n   90  //============ FIXATION SCREEN ============//\n   91  FLAGS.waitingforTouches = 1\n   92  \n   93: CURRTRIAL.allfixationxyt = []\n   94  while (FLAGS.waitingforTouches > 0){\n   95      \n   96:     CURRTRIAL.fixationgridindex = TASK.StaticFixationGridIndex;\n   97  \n   98      // Render fixation screen \n   99      var color = \"white\" // todo move into task    \n  100:     renderFixationUsingDot(color, CURRTRIAL.fixationgridindex, FixationRadius, CANVAS.obj.touchfix);\n  101      \n  102      // Start timer for this fixation render trial. \n  103:     CURRTRIAL.starttime=Math.round(performance.now());\n  104      frame.shown=[];\n  105      for (var q in CANVAS.sequencepre){\n  ...\n  114      //========= AWAIT HOLD FIXATION TOUCH =========//\n  115      var touchhold_return = await touchhold_promise(TASK.FixationDuration,boundingBoxesFixation,FLAGS.punishOutsideTouch)\n  116:     CURRTRIAL.fixationtouchevent = touchhold_return.type\n  117:     CURRTRIAL.fixationxyt = [touchhold_return.cxyt[1], touchhold_return.cxyt[2], touchhold_return.cxyt[3]]\n  118:     CURRTRIAL.allfixationxyt[TASK.NFixations - FLAGS.waitingforTouches - 1] = CURRTRIAL.fixationxyt\n  119:     if (CURRTRIAL.fixationtouchevent == \"touchheld\"){\n  120:         CURRTRIAL.response = CURRTRIAL.correctitem\n  121      } \n  122  \n  ...\n  139  frame.current=0\n  140  \n  141: CURRTRIAL.tsequenceactual = await displayTrial(CANVAS.screen_name_sequence,CANVAS.screen_timeon_sequence);\n  142: CURRTRIAL.tsequencedesired = CANVAS.screen_timeon_sequence\n  143  SP.audiocontext.suspend()\n  144  \n  ...\n  151  \n  152  var race_return = await Promise.race([p1,p2])\n  153: CURRTRIAL.responsetouchevent = race_return.type\n  154: CURRTRIAL.response = race_return.cxyt[0] // grid number of response\n  155: CURRTRIAL.responsexyt = [race_return.cxyt[1], race_return.cxyt[2], race_return.cxyt[3]]\n  156  \n  157  \n  158  \n  159: console.log(TRIAL_NUMBER_FROM_TASKSTREAM_START, 'Stage', TASK.CurrentAutomatorStage, 'choice:', CURRTRIAL.response, 'correct choice:', CURRTRIAL.correctitem)\n  160: if (CURRTRIAL.response == CURRTRIAL.correctitem){ \n  161:     CURRTRIAL.correct = 1; \n  162  }\n  163  else { \n  164:     CURRTRIAL.correct=0; \n  165  }\n  166  \n  167  \n  168  //============ DETERMINE NUMBER OF REWARDS ============//\n  169: if (CURRTRIAL.correct == 1){\n  170:     CURRTRIAL.nreward = 1 \n  171  }\n  172: else if (CURRTRIAL.correct == 0){\n  173:     CURRTRIAL.nreward = 0;\n  174  } \n  175  \n  ...\n  178  //============ DELIVER REWARD/PUNISH ============//\n  179  // REWARD\n  180: if (CURRTRIAL.correct == 1){\n  181      CANVAS.screen_name_post_sequence[1]=\"reward\";\n  182      CANVAS.tsequencepost[2] = CANVAS.tsequencepost[1]+RewardDuration*1000;\n  183  \n  184:     for (var q = 0; q <= CURRTRIAL.nreward-1; q++){\n  185          frame.shown=[];\n  186          for (var q2 in CANVAS.screen_name_post_sequence){frame.shown[q2]=0}; frame.current=0;\n  ...\n  199  \n  200  //PUNISH\n  201: else if (CURRTRIAL.correct == 0) {\n  202      CANVAS.screen_name_post_sequence[1] = \"punish\";\n  203      CANVAS.tsequencepost[2] = CANVAS.tsequencepost[1]+TASK.PunishTimeOut;\n  ...\n  213  \n  214  //================= Record results of trial =================//\n  215: TRIAL.StartTime.push(CURRTRIAL.starttime)\n  216: TRIAL.FixationGridIndex.push(CURRTRIAL.fixationgridindex)\n  217: TRIAL.FixationXYT.push(CURRTRIAL.fixationxyt)\n  218: TRIAL.AllFixationXYT.push(CURRTRIAL.allfixationxyt  )\n  219: TRIAL.Sample.push(CURRTRIAL.sampleindex )\n  220: TRIAL.Test.push(CURRTRIAL.testindices )\n  221: TRIAL.ResponseXYT.push(CURRTRIAL.responsexyt)\n  222: TRIAL.Response.push(CURRTRIAL.response)\n  223: TRIAL.FixationTouchEvent.push(CURRTRIAL.fixationtouchevent)\n  224: TRIAL.ResponseTouchEvent.push(CURRTRIAL.responsetouchevent)\n  225: TRIAL.CorrectItem.push(CURRTRIAL.correctitem)\n  226: TRIAL.NReward.push(CURRTRIAL.nreward)\n  227  TRIAL.AutomatorStage.push(TASK.CurrentAutomatorStage)\n  228: TRIAL.TSequenceDesired.push(CURRTRIAL.tsequencedesired)\n  229: TRIAL.TSequenceActual.push(CURRTRIAL.tsequenceactual)\n  230  TRIAL.trial_num_Session.push(TRIAL_NUMBER_FROM_SESSION_START)\n  231  TRIAL.trial_num_TaskStream.push(TRIAL_NUMBER_FROM_TASKSTREAM_START)\n  ...\n  237      var current_stage = stageHash(TASK); \n  238      AM.trialhistory.trainingstage.push(current_stage);\n  239:     AM.trialhistory.starttime.push(CURRTRIAL.starttime)\n  240:     AM.trialhistory.response.push(CURRTRIAL.response)\n  241:     AM.trialhistory.correct.push(CURRTRIAL.correct)\n  242  }\n  243  TRIAL_NUMBER_FROM_SESSION_START++\n\n76 matches across 2 files\n\n\nSearching 13 files for \"CURRTRIAL\" (case sensitive, whole word)\n\n0 matches\n\nSearching 14 files for \"FLAGS.need2loadParameters\" (case sensitive, whole word)\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_globalvariables.js:\n   62  var FLAGS = {} \n   63  FLAGS.need2loadImages = 1; \n   64: FLAGS.need2loadParameters = 0; \n   65  FLAGS.debug_mode = 1; \n   66  \n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_runtrial.js:\n   10  \n   11  // Check if parameters need to be reloaded (e.g. because they changed on disk or because of the automator)\n   12: if (FLAGS.need2loadParameters == 1){\n   13  \n   14  \n   ..\n  252  }\n  253  \n  254: FLAGS.need2loadParameters = DI.checkIfFileChangedOnDisk(ParamFilePath, ParamFileRev)\n  255  \n  256  }\n\n3 matches across 2 files\n\n\nSearching 14 files for \"FLAGS.need2saveParameters\" (case sensitive, whole word)\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_automator.js:\n  133  \t\t\t\t\tconsole.log(\"Restarting automator WARNING TODO \")\n  134  \t\t\t\t\tTASK.CurrentAutomatorStage = 0\n  135: \t\t\t\t\tFLAGS.need2saveParameters=1\n  136  \t\t\t\t\tconsole.log('SUBJECT ADVANCED TO STAGE ' + (i_current_stage+1) + ' of '+(this.automator_data.length-1) + ' with ' + pctcorrect+'\\% performance on n='+ntrials)\n  137  \t\t\t\t\tconsole.log('With '+pctcorrect+'\\% performance on n='+ntrials+', subject advanced to stage '+(i_current_stage+1)+' of '+(this.automator_data.length-1)+' (zero indexing) of automator.')\n  ...\n  177  \t\t\t\t// Otherwise, advance to the next stage.\n  178  \t\t\t\tTASK.CurrentAutomatorStage = TASK.CurrentAutomatorStage + 1; \n  179: \t\t\t\tFLAGS.need2saveParameters=1\n  180  \t\t\t\tconsole.log('SUBJECT ADVANCED TO STAGE ' + (i_current_stage+1) + ' of '+(this.automator_data.length-1) + ' with ' + pctcorrect+'\\% performance on n='+ntrials)\n  181  \t\t\t\tconsole.log('With '+pctcorrect+'\\% performance on n='+ntrials+', subject advanced to stage '+(i_current_stage+1)+' of '+(this.automator_data.length-1)+' (zero indexing) of automator.')\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_runtrial.js:\n  248  }\n  249  \n  250: if (FLAGS.need2saveParameters == 1){\n  251:     FLAGS.need2saveParameters = DI.saveParameterstoDropbox(); // Save parameters asynchronously\n  252  }\n  253  \n\n4 matches across 2 files\n\n\n\nSearching 14 files for \"FLAGS.need2loadParameters\" (case sensitive, whole word)\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_globalvariables.js:\n   62  var FLAGS = {} \n   63  FLAGS.need2loadImages = 1; \n   64: FLAGS.need2loadParameters = 0; \n   65  FLAGS.debug_mode = 1; \n   66  \n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_runtrial.js:\n   10  \n   11  // Check if parameters need to be reloaded (e.g. because they changed on disk or because of the automator)\n   12: if (FLAGS.need2loadParameters == 1){\n   13  \n   14  \n\n2 matches across 2 files\n\n\nSearching 14 files for \"scaleCanvasforHiDPI\" (case sensitive, whole word)\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/experiment_flow.js:\n   19      }\n   20      if (DEVICE.DevicePixelRatio !== 1){\n   21:         scaleCanvasforHiDPI(CANVAS.obj.sample);\n   22:         scaleCanvasforHiDPI(CANVAS.obj.test);\n   23      }\n   24  \n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_runtrial.js:\n   31      }\n   32      if (DEVICE.DevicePixelRatio !== 1){\n   33:         scaleCanvasforHiDPI(CANVAS.obj.sample);\n   34:         scaleCanvasforHiDPI(CANVAS.obj.test);\n   35      }\n   36  \n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_screenfunctions.js:\n   94  // Sync: Adjust canvas for the device pixel ratio & browser backing store size\n   95  // from http://www.html5rocks.com/en/tutorials/canvas/hidpi/#disqus_thread\n   96: function scaleCanvasforHiDPI(canvasobj){\n   97  \tif (DEVICE.DevicePixelRatio !== backingStoreRatio){\n   98  \t\tcontext=canvasobj.getContext(\"2d\");\n\n5 matches across 3 files\n\n\nSearching 14 files for \"FLAGS.need2saveParameters\" (case sensitive, whole word)\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_automator.js:\n  133  \t\t\t\t\tconsole.log(\"Restarting automator WARNING TODO \")\n  134  \t\t\t\t\tTASK.CurrentAutomatorStage = 0\n  135: \t\t\t\t\tFLAGS.need2saveParameters=1\n  136  \t\t\t\t\tconsole.log('SUBJECT ADVANCED TO STAGE ' + (i_current_stage+1) + ' of '+(this.automator_data.length-1) + ' with ' + pctcorrect+'\\% performance on n='+ntrials)\n  137  \t\t\t\t\tconsole.log('With '+pctcorrect+'\\% performance on n='+ntrials+', subject advanced to stage '+(i_current_stage+1)+' of '+(this.automator_data.length-1)+' (zero indexing) of automator.')\n  ...\n  177  \t\t\t\t// Otherwise, advance to the next stage.\n  178  \t\t\t\tTASK.CurrentAutomatorStage = TASK.CurrentAutomatorStage + 1; \n  179: \t\t\t\tFLAGS.need2saveParameters=1\n  180  \t\t\t\tconsole.log('SUBJECT ADVANCED TO STAGE ' + (i_current_stage+1) + ' of '+(this.automator_data.length-1) + ' with ' + pctcorrect+'\\% performance on n='+ntrials)\n  181  \t\t\t\tconsole.log('With '+pctcorrect+'\\% performance on n='+ntrials+', subject advanced to stage '+(i_current_stage+1)+' of '+(this.automator_data.length-1)+' (zero indexing) of automator.')\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_runtrial.js:\n  213  }\n  214  \n  215: if (FLAGS.need2saveParameters == 1){\n  216:     FLAGS.need2saveParameters = DI.saveParameterstoDropbox(); // Save parameters asynchronously\n  217  }\n  218  }\n\n4 matches across 2 files\n\n\nSearching 14 files for \"saveParameterstoDropbox\" (case sensitive, whole word)\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_automator.js:\n   35  \t\t// trialhistory.trialnumber \t\t\n   36  \t\tthis.automator_data = await DI.parseAutomatorFilefromDropbox(TASK.AutomatorFilePath)\n   37: \t\t// await DI.saveParameterstoDropbox() \n   38  \n   39  \t\tthis.AutomatorPreBuffer = {}\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_dropbox.js:\n  511  \n  512  \n  513: \tasync saveParameterstoDropbox() {\n  514  \t\ttry{\n  515  \t\t\tvar savepath = ParamFilePath\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_runtrial.js:\n  214  \n  215  if (FLAGS.need2saveParameters == 1){\n  216:     FLAGS.need2saveParameters = DI.saveParameterstoDropbox(); // Save parameters asynchronously\n  217  }\n  218  }\n\n3 matches across 3 files\n\n\nSearching 14 files for \"FLAGS.need2load\" (case sensitive, whole word)\n\n0 matches\n\nSearching 14 files for \"FLAGS.need2load\"\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk.html:\n  204  \n  205  \tTRIAL_NUMBER_FROM_SESSION_START = 0\n  206: \tFLAGS.need2loadImages = 1\n  207  \tFLAGS.debug_mode = 1 // starts in debug mode; press 'Done Testing' button to start actual trials and store in appropriate directory\n  208  \n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_automator.js:\n  158  \t\t\t\t\t// If imagebags are changed by automator, load images at beginning of next trial. \n  159  \t\t\t\t\tif(!old_imageBagsTest.equals(TASK.ImageBagsTest) || !old_imageBagsSample.equals(TASK.ImageBagsSample)){\n  160: \t\t\t\t\t\tFLAGS.need2loadImages = 1; \n  161  \t\t\t\t\t}\n  162  \n  ...\n  202  \t\t\t\t// If imagebags are changed by automator, load images at beginning of next trial. \n  203  \t\t\t\tif(!old_imageBagsTest.equals(TASK.ImageBagsTest) || !old_imageBagsSample.equals(TASK.ImageBagsSample)){\n  204: \t\t\t\t\tFLAGS.need2loadImages = 1; \n  205  \t\t\t\t}\n  206  \t\t\t}\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_globalvariables.js:\n   61  \n   62  var FLAGS = {} \n   63: FLAGS.need2loadImages = 1; \n   64: FLAGS.need2loadParameters = 0; \n   65  FLAGS.debug_mode = 1; \n   66  \n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_runtrial.js:\n    9  }\n   10  \n   11: if (FLAGS.need2loadParameters == 1){\n   12      var old_ImageBagsSample = TASK.ImageBagsSample\n   13      var old_ImageBagsTest = TASK.ImageBagsTest\n   ..\n   16  \n   17      if(!old_ImageBagsTest.equals(TASK.ImageBagsTest) || !old_ImageBagsSample.equals(TASK.ImageBagsSample)){\n   18:         FLAGS.need2loadImages = 1; \n   19      }\n   20  \n   ..\n   39      ]\n   40  }\n   41: if (FLAGS.need2loadImages == 1){\n   42      if(TASK.Automator != 1){\n   43          var samplingStrategy = 'uniform_with_replacement'\n   ..\n   60      DEVICE.source_ImageHeightPixels = representative_image.height\n   61  \n   62:     FLAGS.need2loadImages = 0;\n   63  } \n   64  \n\n9 matches across 4 files\n\n\nSearching 14 files for \"FLAGS.need2loadparameters\"\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_globalvariables.js:\n   62  var FLAGS = {} \n   63  FLAGS.need2loadImages = 1; \n   64: FLAGS.need2loadParameters = 0; \n   65  FLAGS.debug_mode = 1; \n   66  \n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_runtrial.js:\n    9  }\n   10  \n   11: if (FLAGS.need2loadParameters == 1){\n   12      var old_ImageBagsSample = TASK.ImageBagsSample\n   13      var old_ImageBagsTest = TASK.ImageBagsTest\n\n2 matches across 2 files\n\n\nSearching 14 files for \"CANVAS\"\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk.html:\n   36  <!-- ************* BODY *************** -->\n   37  <body bgcolor=#7F7F7F>\n   38: <div id=\"canvasdiv\" style=\"position:relative; width:100vw; height:100vh\">\n   39  \t<button name=\"connectble\" style=\"visibility:hidden; position: absolute; top: 45%; left: 45%; height: 50px; width: 200px; border-radius: 20px\">Connect to Bluetooth juicer</button>\n   40  \n   ..\n   56  \t<button name=\"SyncButton\" style=\"visibility:hidden; position: absolute; top: 0%; left: 95%; height: 30px; width: 50px; font-size: 10px; color: green; border-radius: 10px; z-index:101\">Sync data</button>\n   57  \n   58: \t<canvas id=\"canvasblank\" width=\"0\" height=\"0\" src=\"\" style=\"z-index:99; position: absolute; left: 0px; top: 0px;\"> </canvas>\n   59: \t<canvas id=\"canvassample\" width=\"0\" height=\"0\" src=\"\" style=\"z-index:1; position: absolute; left: 0px; top: 0px;\"> </canvas>\n   60: \t<canvas id=\"canvastest\" width=\"0\" height=\"0\" src=\"\" style=\"z-index:2; position: absolute; left: 0px; top: 0px;\"> </canvas>\n   61: \t<canvas id=\"canvastouchfix\" width=\"0\" height=\"0\" src=\"\" style=\"z-index:3; position: absolute; left: 0px; top: 0px;\"> </canvas>\n   62: \t<canvas id=\"canvaseyefix\" width=\"0\" height=\"0\" src=\"\" style=\"z-index:4; position: absolute; left: 0px; top: 0px;\"> </canvas>\n   63: \t<canvas id=\"canvasreward\" width=\"0\" height=\"0\" src=\"\" style=\"z-index:5; position: absolute; left: 0px; top: 0px;\"> </canvas>\n   64: \t<canvas id=\"canvasphotoreward\" width=\"0\" height=\"0\" src=\"\" style=\"z-index:6; position: absolute; left: 0px; top: 0px;\"> </canvas>\n   65: \t<canvas id=\"canvaspunish\" width=\"0\" height=\"0\" src=\"\" style=\"z-index:7; position: absolute; left: 0px; top: 0px;\"> </canvas>\n   66  </div>\n   67  <dialog id=\"subjectID_dialog\">\n   ..\n  151  \t\n  152  \tDEVICE.DevicePixelRatio = window.devicePixelRatio || 1;\n  153: \tvar visiblecanvasobj = CANVAS.obj[CANVAS.front];\n  154: \tvar visiblecontext = visiblecanvasobj.getContext(\"2d\");\n  155  \tvar backingStoreRatio = visiblecontext.webkitBackingStorePixelRatio ||\n  156  \t                            visiblecontext.mozBackingStorePixelRatio ||\n  ...\n  158  \t                            visiblecontext.oBackingStorePixelRatio ||\n  159  \t                            visiblecontext.backingStorePixelRatio || 1;\n  160: \tDEVICE.CanvasRatio = backingStoreRatio/DEVICE.DevicePixelRatio\n  161  \t\n  162  \t//Monitor Battery - from: http://www.w3.org/TR/battery-status/\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_bluetooth.js:\n   96    if (ble.connected == false){\n   97      console.log('Requesting ble device...')\n   98:     writeTextonBlankCanvas('Requesting bluetooth device list',25.5,20.5)\n   99      // let options = {filters: [ {name: ble.name}, {services:[ ble.customserviceUUID ]} ]}\n  100      let options = {filters: [ {namePrefix: ble.namePrefix}, {services:[ ble.customserviceUUID ]} ]}\n  ...\n  242        ble.statustext = textstr\n  243        // \n  244:       // writeTextonBlankCanvas(textstr,25.5,20.5)\n  245    }\n  246    catch(error) {\n  ...\n  271    ble.statustext = ble.statustext + \"  <---->  \" + textstr\n  272    // \n  273:   // writeTextonBlankCanvas(textstr,400,20.5)\n  274  \n  275    let value = event.target.value\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_dropbox.js:\n  432  \n  433  \t//================== WRITE JSON ==================//\n  434: \tasync saveTrialDatatoDropbox(SESSION, DEVICE, TASK_ARCHIVE, CANVAS, TRIAL, save_to_debug_directory){\n  435  \t\t// Add request to queue \n  436  \n  ...\n  439  \t\tdataobj.push(DEVICE)\n  440  \t\tdataobj.push(TASK_ARCHIVE)\n  441: \t\tdataobj.push(CANVAS)\n  442  \t\tdataobj.push(TRIAL)\n  443  \t\tvar datastr = JSON.stringify(dataobj); //no pretty print for now, saves space and data file is unwieldy to look at for larger numbers of trials\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_eventlisteners.js:\n  170  \tFLAGS.debug_mode = 0\n  171  \t\n  172: \trenderBlank(CANVAS.obj.blank)\n  173  \tdocument.querySelector(\"button[name=doneTestingTask]\").style.display = \"none\"\n  174  \treturn\n  ...\n  185  async function sync_data_listener(event){\n  186  \tconsole.log(\"Called data save from sync button\")\n  187: \tawait DI.saveTrialDatatoDropbox(TASK_ARCHIVE, CANVAS, TRIAL, FLAGS.debug_mode)\n  188  \tawait DI.saveTouchestoDropbox(FLAGS.debug_mode)\n  189  \n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_globalvariables.js:\n   45  DEVICE.BatteryLDT = []\n   46  DEVICE.DevicePixelRatio = 1\n   47: DEVICE.CanvasRatio = 1\n   48  DEVICE.XGridCenter = []\n   49  DEVICE.YGridCenter = []\n   ..\n   70  FLAGS.touchGeneratorCreated = 0\n   71  \n   72: var CANVAS = {}; \n   73: var CANVAS = {\n   74  \tnames: [\"blank\",\"sample\",\"test\",\"touchfix\",\"eyefix\",\"reward\",\"photoreward\",\"punish\"],\n   75  \tfront: \"blank\",\n   ..\n   87  \tobj: [],\n   88  }\n   89: for (var i in CANVAS.names){\n   90: \tCANVAS.obj[CANVAS.names[i]]=document.getElementById(\"canvas\" + CANVAS.names[i])\n   91  }\n   92  \n   ..\n   96  }\n   97  \n   98: var boundingBoxesFixation={}; //where the fixation touch targets are on the canvas\n   99  var waitforClick; //variable to hold generator\n  100  var waitforEvent; //variable to hold generator\n  101  var touchTimer; //variable to hold timer\n  102: var xcanvascenter=[];\n  103: var ycanvascenter=[];\n  104  var curridx = null;\n  105  var datafiles=[];\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_runtrial.js:\n   34  } \n   35  \n   36: FixationRadius=(DEVICE.source_ImageWidthPixels/2)*TASK.FixationScale*DEVICE.CanvasRatio\n   37  funcreturn = defineImageGrid(TASK.NGridPoints, DEVICE.source_ImageWidthPixels, DEVICE.source_ImageHeightPixels, TASK.GridScale);\n   38: xcanvascenter = funcreturn[0]\n   39: ycanvascenter = funcreturn[1]\n   40  DEVICE.XGridCenter = funcreturn[2]\n   41  DEVICE.YGridCenter = funcreturn[3]\n   42  \n   43: renderReward(CANVAS.obj.reward);\n   44: renderPunish(CANVAS.obj.punish);\n   45: renderBlank(CANVAS.obj.blank);\n   46  \n   47  //============ SELECT SAMPLE & TEST IMAGES ============//\n   ..\n   50  \n   51  \n   52: //============ AWAIT BUFFER CANVASES WITH SAMPLE & TEST IMAGES ============//\n   53  boundingBoxesTestOrder = await bufferTrialImages(sampleimage, testimages);\n   54  \n   ..\n   62      // Render fixation screen \n   63      var color = \"white\" // todo move into task    \n   64:     renderFixationUsingDot(color, fixationgridindex, FixationRadius, CANVAS.obj.touchfix);\n   65      \n   66      // Start timer for this fixation render trial. \n   67      starttime=Math.round(performance.now());\n   68      frame.shown=[];\n   69:     for (var q in CANVAS.sequencepre){\n   70          frame.shown[q]=0\n   71      }; \n   ..\n   73  \n   74      //========= AWAIT SHOW FIXATION =========//\n   75:     await displayTrial(CANVAS.sequencepre,CANVAS.tsequencepre);\n   76      SP.audiocontext.suspend()\n   77  \n   ..\n   84  \n   85      //========= AWAIT CLEAR FIXATION =========//\n   86:     for (var q in CANVAS.sequenceblank){\n   87          frame.shown[q]=0\n   88      }\n   89      frame.current=0;\n   90      if (FLAGS.waitingforTouches > 0){\n   91:         await displayTrial(CANVAS.sequenceblank,CANVAS.tsequenceblank);\n   92      } //blank out screen\n   93  } \n   ..\n   95  //============== AWAIT SHOW SAMPLE THEN TEST ==============//\n   96  frame.shown=[]\n   97: for (var q in CANVAS.screen_name_sequence){\n   98      frame.shown[q]=0\n   99  } \n  ...\n  101  frame.current=0\n  102  \n  103: tsequenceactual = await displayTrial(CANVAS.screen_name_sequence,CANVAS.screen_timeon_sequence);\n  104: tsequencedesired = CANVAS.screen_timeon_sequence\n  105  SP.audiocontext.suspend()\n  106  \n  ...\n  132  \n  133  if (correct == 1){\n  134:     CANVAS.screen_name_post_sequence[1]=\"reward\";\n  135:     CANVAS.tsequencepost[2] = CANVAS.tsequencepost[1]+RewardDuration*1000;\n  136  \n  137      for (var q = 0; q <= nreward-1; q++){\n  138          frame.shown=[];\n  139:         for (var q2 in CANVAS.screen_name_post_sequence){frame.shown[q2]=0}; frame.current=0;\n  140  \n  141          SP.playSound(2);\n  142:         var p1 = displayTrial(CANVAS.screen_name_post_sequence,CANVAS.tsequencepost)\n  143          if (ble.connected == false){\n  144              await Promise.all([p1])\n  ...\n  153  //PUNISH\n  154  else if (correct == 0) {\n  155:     CANVAS.screen_name_post_sequence[1] = \"punish\";\n  156:     CANVAS.tsequencepost[2] = CANVAS.tsequencepost[1]+TASK.PunishTimeOut;\n  157      frame.shown=[];\n  158:     for (var q in CANVAS.screen_name_post_sequence){frame.shown[q]=0}; frame.current=0;\n  159  \n  160:     var p1 = displayTrial(CANVAS.screen_name_post_sequence,CANVAS.tsequencepost);\n  161      var num_trials_to_buffer_in_punishperiod = 0\n  162      var p2 = TQ.buffer_trials(num_trials_to_buffer_in_punishperiod)\n  ...\n  203  if ( _ms_since_last_trial_data_save > TRIALDATA_SAVE_TIMEOUT_PERIOD){ \n  204      // console.log(_ms_since_last_trial_data_save/1000+'s since last trial data save. At trial'+ TRIAL_NUMBER_FROM_SESSION_START +'. automator stage:'+TASK.CurrentAutomatorStage)\n  205:     DI.saveTrialDatatoDropbox(SESSION, DEVICE, TASK_ARCHIVE, CANVAS, TRIAL, FLAGS.debug_mode)\n  206      last_trial_data_save = performance.now()\n  207  }\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_screenfunctions.js:\n   48  \n   49  \n   50: function refreshCanvasSettings(TASK_entry){\n   51  \t// Adjust delay period\n   52  \tif (TASK_entry.t_SampleOff > 0){\n   53: \t\tCANVAS.screen_name_sequence = [\"blank\", \"sample\",\"blank\",\"test\"]\n   54: \t\tCANVAS.screen_timeon_sequence = [0,100,100+TASK_entry.t_SampleON,100+TASK_entry.t_SampleON+TASK_entry.t_SampleOff]; \n   55  \t}\n   56  \telse if (TASK_entry.t_SampleOff <= 0 ){\n   57: \t\tCANVAS.screen_name_sequence = [\"blank\",\"sample\",\"test\"]\n   58: \t\tCANVAS.screen_timeon_sequence = [0,100,100+TASK_entry.t_SampleON]; \n   59  \t}\n   60  \t\n   61  \t// Adjust length of reward screen based on reward amount \n   62: \tCANVAS.tsequencepost[2] = CANVAS.tsequencepost[1]+RewardDuration*1000;\n   63  }\n   64  \n   65: function writeTextonBlankCanvas(textstr,x,y){\n   66: \tvar blank_canvasobj=CANVAS.obj.blank\n   67: \tvar visible_ctxt = blank_canvasobj.getContext('2d')\n   68  \tvisible_ctxt.textBaseline = \"hanging\"\n   69  \tvisible_ctxt.fillStyle = \"white\"\n   ..\n   74  \n   75  \n   76: function setupCanvas(canvasobj){\n   77  \t// center in page\n   78: \tcanvasobj.style.top=CANVAS.offsettop + \"px\";\n   79: \tcanvasobj.style.left=CANVAS.offsetleft + \"px\";\n   80: \tcanvasobj.width=windowWidth - CANVAS.offsetleft;\n   81: \tcanvasobj.height=windowHeight - CANVAS.offsettop;\n   82: \tcanvasobj.style.margin=\"0 auto\";\n   83: \tcanvasobj.style.display=\"block\"; //visible\n   84  \n   85  \t// assign listeners\n   86: \tcanvasobj.addEventListener('touchstart',touchstart_listener,{capture: false,passive: false}); // handle touch & mouse behavior independently http://www.html5rocks.com/en/mobile/touchandmouse/\n   87: \tcanvasobj.addEventListener('touchmove',touchmove_listener,{passive: false}) // based on console suggestion: Consider marking event handler as 'passive' to make the page more responive. https://github.com/WICG/EventListenerOptions/blob/gh-pages/explainer.md\n   88: \tcanvasobj.addEventListener('touchend',touchend_listener,{capture: false, passive:false});\n   89: \tcanvasobj.addEventListener('mousedown',touchstart_listener,{capture: false,passive: false}); // handle touch & mouse behavior independently http://www.html5rocks.com/en/mobile/touchandmouse/\n   90: \tcanvasobj.addEventListener('mousemove',touchmove_listener,{passive: false}) // based on console suggestion: Consider marking event handler as 'passive' to make the page more responive. https://github.com/WICG/EventListenerOptions/blob/gh-pages/explainer.md\n   91: \tcanvasobj.addEventListener('mouseup',touchend_listener,{capture: false, passive:false});\n   92  } \n   93  \n   94: // Sync: Adjust canvas for the device pixel ratio & browser backing store size\n   95: // from http://www.html5rocks.com/en/tutorials/canvas/hidpi/#disqus_thread\n   96: function scaleCanvasforHiDPI(canvasobj){\n   97  \tif (DEVICE.DevicePixelRatio !== backingStoreRatio){\n   98: \t\tcontext=canvasobj.getContext(\"2d\");\n   99: \t\tvar oldWidth = canvasobj.width;\n  100: \t\tvar oldHeight = canvasobj.height;\n  101: \t\tcanvasobj.width = oldWidth/DEVICE.CanvasRatio;\n  102: \t\tcanvasobj.height = oldHeight/DEVICE.CanvasRatio;\n  103: \t\tcanvasobj.style.width = windowWidth - CANVAS.offsetleft + \"px\";\n  104: \t\tcanvasobj.style.height = windowHeight - CANVAS.offsettop + \"px\";\n  105: \t\tcanvasobj.style.margin=\"0 auto\";\n  106: \t\tcontext.scale(1/DEVICE.CanvasRatio,1/DEVICE.CanvasRatio);\n  107  \t} \n  108  } \n  ...\n  127  \t}\n  128  \n  129: \t//center x & y grid within canvas\n  130: \tvar canvas_center_x = (document.body.clientWidth - CANVAS.offsetleft)*DEVICE.CanvasRatio*DEVICE.DevicePixelRatio/2\n  131: \tvar dx = canvas_center_x - DEVICE.CanvasRatio*ngridpoints/2*wd*gridscale; //left side of grid\n  132: \tvar canvas_center_y = (document.body.clientHeight - CANVAS.offsettop)*DEVICE.CanvasRatio*DEVICE.DevicePixelRatio/2\n  133: \tvar dy = canvas_center_y - DEVICE.CanvasRatio*ngridpoints/2*ht*gridscale; //top of grid\n  134  \tfor (var i=0; i<=xgrid.length-1; i++){\n  135: \t\txgridcent[i]=Math.round(xgrid[i]*wd*gridscale*DEVICE.CanvasRatio + dx);\n  136: \t\tygridcent[i]=Math.round(ygrid[i]*ht*gridscale*DEVICE.CanvasRatio + dy);\n  137  \t}\n  138  \n  139: \treturn [canvas_center_x, canvas_center_y, xgridcent, ygridcent]\n  140  }\n  141  \n  142  async function bufferTrialImages(sample_image, test_images){\n  143: \t//========== BUFFER SAMPLE CANVAS ==========//\n  144: \tvar canvasobj=CANVAS.obj.sample\n  145: \tvar context=CANVAS.obj.sample.getContext('2d'); \n  146  \tcontext.fillStyle=\"#7F7F7F\";  // Gray out before buffering sample\n  147: \t//context.fillRect(0,100, canvasobj.width,canvasobj.height); // 100 is for the photodiode bar at the top of the screen\n  148: \tawait renderImageOnCanvas(sample_image, TASK.SampleGridIndex, TASK.SampleScale, CANVAS.obj.sample)\n  149  \t\n  150: \t//========== BUFFER TEST CANVAS ==========//\n  151  \t// Option: gray out before buffering test: (for overriding previous trial's test screen if current trial test screen has transparent elements?)\n  152  \t// var pre_grayout = true \n  153  \t// if(pre_grayout == true){\n  154: \t// \tvar canvasobj=CANVAS.obj.test;\n  155: \t// \tvar context=canvasobj.getContext('2d');\n  156  \t// \tcontext.fillStyle=\"#7F7F7F\";\n  157: \t// \tcontext.fillRect(0,100, canvasobj.width,canvasobj.height); // 100 is for the photodiode bar at the top of the screen\n  158  \t// }\n  159  \tvar boundingBoxes = {}\n  ...\n  166  \t\t\n  167  \n  168: \t\tfuncreturn = await renderImageOnCanvas(test_images[i], TASK.ObjectGridMapping[i], TASK.TestScale, CANVAS.obj.test); \n  169  \t\tboundingBoxes.x.push(funcreturn[0]); \n  170  \t\tboundingBoxes.y.push(funcreturn[1]); \n  ...\n  177  \n  178  \n  179: async function renderImageOnCanvas(image, grid_index, scale, canvasobj){\n  180: \tvar context=canvasobj.getContext('2d');\n  181  \n  182  \tvar xleft=NaN;\n  ...\n  187  \twd = image.width\n  188  \tht = image.height\n  189: \txleft = Math.round(DEVICE.XGridCenter[grid_index] - 0.5*wd*scale*DEVICE.CanvasRatio);\n  190: \tytop = Math.round(DEVICE.YGridCenter[grid_index] - 0.5*ht*scale*DEVICE.CanvasRatio);\n  191  \t\n  192  \tcontext.drawImage(\n  193  \t\timage, // Image element\n  194: \t\txleft, // dx: Canvas x-coordinate of image's top-left corner. \n  195: \t\tytop, // dy: Canvas y-coordinate of  image's top-left corner. \n  196: \t\timage.width*scale*DEVICE.CanvasRatio, // dwidth. width of drawn image. \n  197: \t\timage.height*scale*DEVICE.CanvasRatio); // dheight. height of drawn image.\n  198  \n  199: \t// For drawing cropped regions of an image in the canvas, see alternate input argument structures,\n  200: \t// See: https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/drawImage\n  201  \t\n  202: \t// Bounding boxes of images on canvas\n  203: \txbound=[xleft, xleft+wd*scale*DEVICE.CanvasRatio];\n  204: \tybound=[ytop, ytop+ht*scale*DEVICE.CanvasRatio];\n  205  \n  206: \txbound[0]=xbound[0]+CANVAS.offsetleft;\n  207: \txbound[1]=xbound[1]+CANVAS.offsetleft;\n  208: \tybound[0]=ybound[0]+CANVAS.offsettop;\n  209: \tybound[1]=ybound[1]+CANVAS.offsettop;\n  210  \treturn [xbound, ybound]\n  211  }\n  ...\n  223  \tvar start = null;\n  224  \tvar tActual = []\n  225: \tfunction updateCanvas(timestamp){\n  226  \n  227  \t\t// If start has not been set to a float timestamp, set it now.\n  ...\n  232  \t\t\t//console.log('Frame =' + frame.current+'. Duration ='+(timestamp-start)+'. Timestamp = ' + timestamp)\n  233  \t\t\ttActual[frame.current] = Math.round(100*(timestamp - start))/100 //in milliseconds, rounded to nearest hundredth of a millisecond\n  234: \t\t\t// Move canvas in front\n  235: \t\t\tvar prev_canvasobj=CANVAS.obj[CANVAS.front]\n  236: \t\t\tvar curr_canvasobj=CANVAS.obj[screen_name_sequence[frame.current]]\n  237: \t\t\tif (CANVAS.front != \"blank\"){\n  238  \t\t\t\t// Move to back\n  239: \t\t\t\tprev_canvasobj.style.zIndex=\"0\";\n  240  \t\t\t} \n  241  \t\t\tif (screen_name_sequence[frame.current] != \"blank\"){\n  242: \t\t\t\tcurr_canvasobj.style.zIndex=\"100\";\n  243: \t\t\t\tCANVAS.front = screen_name_sequence[frame.current];\n  244  \t\t\t} // move to front\n  245  \t\t\telse{\n  246: \t\t\t\tCANVAS.front = \"blank\";\n  247  \t\t\t}\n  248  \t\t\t\n  ...\n  252  \t\t// continue if not all frames shown\n  253  \t\tif (frame.shown[frame.shown.length-1] != 1){\n  254: \t\t\twindow.requestAnimationFrame(updateCanvas);\n  255  \t\t}\n  256  \t\telse{\n  ...\n  259  \t}\n  260  \t//requestAnimationFrame advantages: goes on next screen refresh and syncs to browsers refresh rate on separate clock (not js clock)\n  261: \twindow.requestAnimationFrame(updateCanvas); // kick off async work\n  262  \treturn p\n  263  } \n  264  \n  265: function renderBlank(canvasobj){\n  266: \tvar context=canvasobj.getContext('2d');\n  267  \tcontext.fillStyle=\"#7F7F7F\";\n  268: \tcontext.fillRect(0,0,canvasobj.width,canvasobj.height);\n  269  }\n  270  \n  271  \n  272: function renderReward(canvasobj){\n  273: \tvar context=canvasobj.getContext('2d');\n  274  \tcontext.fillStyle=\"green\";\n  275: \tcontext.fillRect(xcanvascenter-200,ycanvascenter-200,400,400);\n  276  }\n  277  \n  278: function renderPunish(canvasobj){\n  279: \tvar context=canvasobj.getContext('2d');\n  280: \tcontext.rect(xcanvascenter-200,ycanvascenter-200,400,400);\n  281  \tcontext.fillStyle=\"black\";\n  282  \tcontext.fill();\n  283  }\n  284  \n  285: async function renderFixationUsingImage(image, gridindex, scale, canvasobj){\n  286: \tvar context=canvasobj.getContext('2d');\n  287: \tcontext.clearRect(0,0,canvasobj.width,canvasobj.height);\n  288  \n  289  \t// Draw fixation dot\n  ...\n  292  \tboundingBoxesFixation['GridIndex'] = [TASK.gridindex]\n  293  \n  294: \tfuncreturn = await renderImageOnCanvas(image, gridindex, scale, canvasobj); \n  295  \tboundingBoxesFixation.x.push(funcreturn[0]);\n  296  \tboundingBoxesFixation.y.push(funcreturn[1]);\n  297  }\n  298: function renderFixationUsingDot(color, gridindex, dot_pixelradius, canvasobj){\n  299: \tvar context=canvasobj.getContext('2d');\n  300: \tcontext.clearRect(0,0,canvasobj.width,canvasobj.height);\n  301  \n  302  \t// Draw fixation dot\n  ...\n  313  \tboundingBoxesFixation['y']=[]\n  314  \tboundingBoxesFixation['GridIndex']=[TASK.StaticFixationGridIndex]\n  315: \tboundingBoxesFixation.x.push([xcent-rad+CANVAS.offsetleft, xcent+rad+CANVAS.offsetleft]);\n  316: \tboundingBoxesFixation.y.push([ycent-rad+CANVAS.offsettop, ycent+rad+CANVAS.offsettop]);\n  317  }\n  318  \n  319  function checkDisplayBounds(displayobject_coord){\n  320  \tvar outofbounds=0\n  321: \tif (displayobject_coord[0] < CANVAS.workspace[0] ||\n  322: \t\tdisplayobject_coord[1] < CANVAS.workspace[1] ||\n  323: \t\tdisplayobject_coord[2] > CANVAS.workspace[2] ||\n  324: \t\tdisplayobject_coord[3] > CANVAS.workspace[3]){\n  325  \t\toutofbounds=1\n  326  \t}\n  ...\n  330  \n  331  \n  332: function displayPhysicalSize(tabletname,displayobject_coord,canvasobj){\n  333  \tif (tabletname == \"nexus9\"){\n  334  \t\tvar dpi = 281\n  ...\n  346  \t\tvar dpi = -1\n  347  \t}\n  348: \tvar visible_ctxt = canvasobj.getContext('2d');\n  349  \tvisible_ctxt.textBaseline = \"hanging\";\n  350  \tvisible_ctxt.fillStyle = \"white\";\n  351  \tvisible_ctxt.font = \"16px Verdana\";\n  352  \tvisible_ctxt.fillText( \n  353: \t\tMath.round(100*(displayobject_coord[2]-displayobject_coord[0])/dpi/DEVICE.CanvasRatio)/100 +\n  354  \t\t' x ' +\n  355: \t\tMath.round(100*(displayobject_coord[3]-displayobject_coord[1])/dpi/DEVICE.CanvasRatio)/100 + \n  356  \t\t' in', \n  357  \t\tdisplayobject_coord[0],displayobject_coord[1]-16\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_utils.js:\n   58  }\n   59  \n   60: // convert base64 to buffer array (from: http://stackoverflow.com.80bola.com/questions/27524283/save-image-to-dropbox-with-data-from-canvas?rq=1)\n   61  function _base64ToArrayBuffer(base64){\n   62    base64 = base64.split('data:image/png;base64,').join('');\n   ..\n  179  \n  180  \n  181: // convert base64 to buffer array (from: http://stackoverflow.com.80bola.com/questions/27524283/save-image-to-dropbox-with-data-from-canvas?rq=1)\n  182  function _base64ToArrayBuffer(base64){\n  183    base64 = base64.split('data:image/png;base64,').join('');\n\n225 matches across 8 files\n\n\nSearching 14 files for \"CANVAS\" (case sensitive)\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk.html:\n  151  \t\n  152  \tDEVICE.DevicePixelRatio = window.devicePixelRatio || 1;\n  153: \tvar visiblecanvasobj = CANVAS.obj[CANVAS.front];\n  154  \tvar visiblecontext = visiblecanvasobj.getContext(\"2d\");\n  155  \tvar backingStoreRatio = visiblecontext.webkitBackingStorePixelRatio ||\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_dropbox.js:\n  432  \n  433  \t//================== WRITE JSON ==================//\n  434: \tasync saveTrialDatatoDropbox(SESSION, DEVICE, TASK_ARCHIVE, CANVAS, TRIAL, save_to_debug_directory){\n  435  \t\t// Add request to queue \n  436  \n  ...\n  439  \t\tdataobj.push(DEVICE)\n  440  \t\tdataobj.push(TASK_ARCHIVE)\n  441: \t\tdataobj.push(CANVAS)\n  442  \t\tdataobj.push(TRIAL)\n  443  \t\tvar datastr = JSON.stringify(dataobj); //no pretty print for now, saves space and data file is unwieldy to look at for larger numbers of trials\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_eventlisteners.js:\n  170  \tFLAGS.debug_mode = 0\n  171  \t\n  172: \trenderBlank(CANVAS.obj.blank)\n  173  \tdocument.querySelector(\"button[name=doneTestingTask]\").style.display = \"none\"\n  174  \treturn\n  ...\n  185  async function sync_data_listener(event){\n  186  \tconsole.log(\"Called data save from sync button\")\n  187: \tawait DI.saveTrialDatatoDropbox(TASK_ARCHIVE, CANVAS, TRIAL, FLAGS.debug_mode)\n  188  \tawait DI.saveTouchestoDropbox(FLAGS.debug_mode)\n  189  \n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_globalvariables.js:\n   70  FLAGS.touchGeneratorCreated = 0\n   71  \n   72: var CANVAS = {}; \n   73: var CANVAS = {\n   74  \tnames: [\"blank\",\"sample\",\"test\",\"touchfix\",\"eyefix\",\"reward\",\"photoreward\",\"punish\"],\n   75  \tfront: \"blank\",\n   ..\n   87  \tobj: [],\n   88  }\n   89: for (var i in CANVAS.names){\n   90: \tCANVAS.obj[CANVAS.names[i]]=document.getElementById(\"canvas\" + CANVAS.names[i])\n   91  }\n   92  \n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_runtrial.js:\n   41  DEVICE.YGridCenter = funcreturn[3]\n   42  \n   43: renderReward(CANVAS.obj.reward);\n   44: renderPunish(CANVAS.obj.punish);\n   45: renderBlank(CANVAS.obj.blank);\n   46  \n   47  //============ SELECT SAMPLE & TEST IMAGES ============//\n   ..\n   50  \n   51  \n   52: //============ AWAIT BUFFER CANVASES WITH SAMPLE & TEST IMAGES ============//\n   53  boundingBoxesTestOrder = await bufferTrialImages(sampleimage, testimages);\n   54  \n   ..\n   62      // Render fixation screen \n   63      var color = \"white\" // todo move into task    \n   64:     renderFixationUsingDot(color, fixationgridindex, FixationRadius, CANVAS.obj.touchfix);\n   65      \n   66      // Start timer for this fixation render trial. \n   67      starttime=Math.round(performance.now());\n   68      frame.shown=[];\n   69:     for (var q in CANVAS.sequencepre){\n   70          frame.shown[q]=0\n   71      }; \n   ..\n   73  \n   74      //========= AWAIT SHOW FIXATION =========//\n   75:     await displayTrial(CANVAS.sequencepre,CANVAS.tsequencepre);\n   76      SP.audiocontext.suspend()\n   77  \n   ..\n   84  \n   85      //========= AWAIT CLEAR FIXATION =========//\n   86:     for (var q in CANVAS.sequenceblank){\n   87          frame.shown[q]=0\n   88      }\n   89      frame.current=0;\n   90      if (FLAGS.waitingforTouches > 0){\n   91:         await displayTrial(CANVAS.sequenceblank,CANVAS.tsequenceblank);\n   92      } //blank out screen\n   93  } \n   ..\n   95  //============== AWAIT SHOW SAMPLE THEN TEST ==============//\n   96  frame.shown=[]\n   97: for (var q in CANVAS.screen_name_sequence){\n   98      frame.shown[q]=0\n   99  } \n  ...\n  101  frame.current=0\n  102  \n  103: tsequenceactual = await displayTrial(CANVAS.screen_name_sequence,CANVAS.screen_timeon_sequence);\n  104: tsequencedesired = CANVAS.screen_timeon_sequence\n  105  SP.audiocontext.suspend()\n  106  \n  ...\n  132  \n  133  if (correct == 1){\n  134:     CANVAS.screen_name_post_sequence[1]=\"reward\";\n  135:     CANVAS.tsequencepost[2] = CANVAS.tsequencepost[1]+RewardDuration*1000;\n  136  \n  137      for (var q = 0; q <= nreward-1; q++){\n  138          frame.shown=[];\n  139:         for (var q2 in CANVAS.screen_name_post_sequence){frame.shown[q2]=0}; frame.current=0;\n  140  \n  141          SP.playSound(2);\n  142:         var p1 = displayTrial(CANVAS.screen_name_post_sequence,CANVAS.tsequencepost)\n  143          if (ble.connected == false){\n  144              await Promise.all([p1])\n  ...\n  153  //PUNISH\n  154  else if (correct == 0) {\n  155:     CANVAS.screen_name_post_sequence[1] = \"punish\";\n  156:     CANVAS.tsequencepost[2] = CANVAS.tsequencepost[1]+TASK.PunishTimeOut;\n  157      frame.shown=[];\n  158:     for (var q in CANVAS.screen_name_post_sequence){frame.shown[q]=0}; frame.current=0;\n  159  \n  160:     var p1 = displayTrial(CANVAS.screen_name_post_sequence,CANVAS.tsequencepost);\n  161      var num_trials_to_buffer_in_punishperiod = 0\n  162      var p2 = TQ.buffer_trials(num_trials_to_buffer_in_punishperiod)\n  ...\n  203  if ( _ms_since_last_trial_data_save > TRIALDATA_SAVE_TIMEOUT_PERIOD){ \n  204      // console.log(_ms_since_last_trial_data_save/1000+'s since last trial data save. At trial'+ TRIAL_NUMBER_FROM_SESSION_START +'. automator stage:'+TASK.CurrentAutomatorStage)\n  205:     DI.saveTrialDatatoDropbox(SESSION, DEVICE, TASK_ARCHIVE, CANVAS, TRIAL, FLAGS.debug_mode)\n  206      last_trial_data_save = performance.now()\n  207  }\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_screenfunctions.js:\n   51  \t// Adjust delay period\n   52  \tif (TASK_entry.t_SampleOff > 0){\n   53: \t\tCANVAS.screen_name_sequence = [\"blank\", \"sample\",\"blank\",\"test\"]\n   54: \t\tCANVAS.screen_timeon_sequence = [0,100,100+TASK_entry.t_SampleON,100+TASK_entry.t_SampleON+TASK_entry.t_SampleOff]; \n   55  \t}\n   56  \telse if (TASK_entry.t_SampleOff <= 0 ){\n   57: \t\tCANVAS.screen_name_sequence = [\"blank\",\"sample\",\"test\"]\n   58: \t\tCANVAS.screen_timeon_sequence = [0,100,100+TASK_entry.t_SampleON]; \n   59  \t}\n   60  \t\n   61  \t// Adjust length of reward screen based on reward amount \n   62: \tCANVAS.tsequencepost[2] = CANVAS.tsequencepost[1]+RewardDuration*1000;\n   63  }\n   64  \n   65  function writeTextonBlankCanvas(textstr,x,y){\n   66: \tvar blank_canvasobj=CANVAS.obj.blank\n   67  \tvar visible_ctxt = blank_canvasobj.getContext('2d')\n   68  \tvisible_ctxt.textBaseline = \"hanging\"\n   ..\n   76  function setupCanvas(canvasobj){\n   77  \t// center in page\n   78: \tcanvasobj.style.top=CANVAS.offsettop + \"px\";\n   79: \tcanvasobj.style.left=CANVAS.offsetleft + \"px\";\n   80: \tcanvasobj.width=windowWidth - CANVAS.offsetleft;\n   81: \tcanvasobj.height=windowHeight - CANVAS.offsettop;\n   82  \tcanvasobj.style.margin=\"0 auto\";\n   83  \tcanvasobj.style.display=\"block\"; //visible\n   ..\n  101  \t\tcanvasobj.width = oldWidth/DEVICE.CanvasRatio;\n  102  \t\tcanvasobj.height = oldHeight/DEVICE.CanvasRatio;\n  103: \t\tcanvasobj.style.width = windowWidth - CANVAS.offsetleft + \"px\";\n  104: \t\tcanvasobj.style.height = windowHeight - CANVAS.offsettop + \"px\";\n  105  \t\tcanvasobj.style.margin=\"0 auto\";\n  106  \t\tcontext.scale(1/DEVICE.CanvasRatio,1/DEVICE.CanvasRatio);\n  ...\n  128  \n  129  \t//center x & y grid within canvas\n  130: \tvar canvas_center_x = (document.body.clientWidth - CANVAS.offsetleft)*DEVICE.CanvasRatio*DEVICE.DevicePixelRatio/2\n  131  \tvar dx = canvas_center_x - DEVICE.CanvasRatio*ngridpoints/2*wd*gridscale; //left side of grid\n  132: \tvar canvas_center_y = (document.body.clientHeight - CANVAS.offsettop)*DEVICE.CanvasRatio*DEVICE.DevicePixelRatio/2\n  133  \tvar dy = canvas_center_y - DEVICE.CanvasRatio*ngridpoints/2*ht*gridscale; //top of grid\n  134  \tfor (var i=0; i<=xgrid.length-1; i++){\n  ...\n  141  \n  142  async function bufferTrialImages(sample_image, test_images){\n  143: \t//========== BUFFER SAMPLE CANVAS ==========//\n  144: \tvar canvasobj=CANVAS.obj.sample\n  145: \tvar context=CANVAS.obj.sample.getContext('2d'); \n  146  \tcontext.fillStyle=\"#7F7F7F\";  // Gray out before buffering sample\n  147  \t//context.fillRect(0,100, canvasobj.width,canvasobj.height); // 100 is for the photodiode bar at the top of the screen\n  148: \tawait renderImageOnCanvas(sample_image, TASK.SampleGridIndex, TASK.SampleScale, CANVAS.obj.sample)\n  149  \t\n  150: \t//========== BUFFER TEST CANVAS ==========//\n  151  \t// Option: gray out before buffering test: (for overriding previous trial's test screen if current trial test screen has transparent elements?)\n  152  \t// var pre_grayout = true \n  153  \t// if(pre_grayout == true){\n  154: \t// \tvar canvasobj=CANVAS.obj.test;\n  155  \t// \tvar context=canvasobj.getContext('2d');\n  156  \t// \tcontext.fillStyle=\"#7F7F7F\";\n  ...\n  166  \t\t\n  167  \n  168: \t\tfuncreturn = await renderImageOnCanvas(test_images[i], TASK.ObjectGridMapping[i], TASK.TestScale, CANVAS.obj.test); \n  169  \t\tboundingBoxes.x.push(funcreturn[0]); \n  170  \t\tboundingBoxes.y.push(funcreturn[1]); \n  ...\n  204  \tybound=[ytop, ytop+ht*scale*DEVICE.CanvasRatio];\n  205  \n  206: \txbound[0]=xbound[0]+CANVAS.offsetleft;\n  207: \txbound[1]=xbound[1]+CANVAS.offsetleft;\n  208: \tybound[0]=ybound[0]+CANVAS.offsettop;\n  209: \tybound[1]=ybound[1]+CANVAS.offsettop;\n  210  \treturn [xbound, ybound]\n  211  }\n  ...\n  233  \t\t\ttActual[frame.current] = Math.round(100*(timestamp - start))/100 //in milliseconds, rounded to nearest hundredth of a millisecond\n  234  \t\t\t// Move canvas in front\n  235: \t\t\tvar prev_canvasobj=CANVAS.obj[CANVAS.front]\n  236: \t\t\tvar curr_canvasobj=CANVAS.obj[screen_name_sequence[frame.current]]\n  237: \t\t\tif (CANVAS.front != \"blank\"){\n  238  \t\t\t\t// Move to back\n  239  \t\t\t\tprev_canvasobj.style.zIndex=\"0\";\n  ...\n  241  \t\t\tif (screen_name_sequence[frame.current] != \"blank\"){\n  242  \t\t\t\tcurr_canvasobj.style.zIndex=\"100\";\n  243: \t\t\t\tCANVAS.front = screen_name_sequence[frame.current];\n  244  \t\t\t} // move to front\n  245  \t\t\telse{\n  246: \t\t\t\tCANVAS.front = \"blank\";\n  247  \t\t\t}\n  248  \t\t\t\n  ...\n  313  \tboundingBoxesFixation['y']=[]\n  314  \tboundingBoxesFixation['GridIndex']=[TASK.StaticFixationGridIndex]\n  315: \tboundingBoxesFixation.x.push([xcent-rad+CANVAS.offsetleft, xcent+rad+CANVAS.offsetleft]);\n  316: \tboundingBoxesFixation.y.push([ycent-rad+CANVAS.offsettop, ycent+rad+CANVAS.offsettop]);\n  317  }\n  318  \n  319  function checkDisplayBounds(displayobject_coord){\n  320  \tvar outofbounds=0\n  321: \tif (displayobject_coord[0] < CANVAS.workspace[0] ||\n  322: \t\tdisplayobject_coord[1] < CANVAS.workspace[1] ||\n  323: \t\tdisplayobject_coord[2] > CANVAS.workspace[2] ||\n  324: \t\tdisplayobject_coord[3] > CANVAS.workspace[3]){\n  325  \t\toutofbounds=1\n  326  \t}\n\n80 matches across 6 files\n\n\nSearching 14 files for \"visiblecanvasobj\" (case sensitive)\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk.html:\n  151  \t\n  152  \tDEVICE.DevicePixelRatio = window.devicePixelRatio || 1;\n  153: \tvar visiblecanvasobj = CANVAS.obj[CANVAS.front];\n  154: \tvar visiblecontext = visiblecanvasobj.getContext(\"2d\");\n  155  \tvar backingStoreRatio = visiblecontext.webkitBackingStorePixelRatio ||\n  156  \t                            visiblecontext.mozBackingStorePixelRatio ||\n\n2 matches in 1 file\n\n\nSearching 14 files for \"renderBlank\" (case sensitive)\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_eventlisteners.js:\n  170  \tFLAGS.debug_mode = 0\n  171  \t\n  172: \trenderBlank(CANVAS.obj.blank)\n  173  \tdocument.querySelector(\"button[name=doneTestingTask]\").style.display = \"none\"\n  174  \treturn\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_runtrial.js:\n   43  renderReward(CANVAS.obj.reward);\n   44  renderPunish(CANVAS.obj.punish);\n   45: renderBlank(CANVAS.obj.blank);\n   46  \n   47  //============ SELECT SAMPLE & TEST IMAGES ============//\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_screenfunctions.js:\n  263  } \n  264  \n  265: function renderBlank(canvasobj){\n  266  \tvar context=canvasobj.getContext('2d');\n  267  \tcontext.fillStyle=\"#7F7F7F\";\n\n3 matches across 3 files\n\n\nSearching 14 files for \"doneTestingTask_listener\" (case sensitive)\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk.html:\n  133  \t'mouseup',doneEditingParams_listener,false)\n  134  document.querySelector(\"button[name=doneTestingTask]\").addEventListener(\n  135: \t'touchend',doneTestingTask_listener,false)\n  136  document.querySelector(\"button[name=doneTestingTask]\").addEventListener(\n  137: \t'mouseup',doneTestingTask_listener,false)\n  138  \n  139  document.querySelector(\"button[name=SyncButton]\").addEventListener(\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_eventlisteners.js:\n  165  }\n  166  \n  167: function doneTestingTask_listener(event){\n  168  \tevent.preventDefault()\n  169  \t//console.log(\"User is done testing. Start saving data\");\n\n3 matches across 2 files\n\n\nSearching 14 files for \".t_SampleOff\" (case sensitive)\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_screenfunctions.js:\n   50  function refreshCanvasSettings(TASK_entry){\n   51  \t// Adjust delay period\n   52: \tif (TASK_entry.t_SampleOff > 0){\n   53  \t\tCANVAS.screen_name_sequence = [\"blank\", \"sample\",\"blank\",\"test\"]\n   54: \t\tCANVAS.screen_timeon_sequence = [0,100,100+TASK_entry.t_SampleON,100+TASK_entry.t_SampleON+TASK_entry.t_SampleOff]; \n   55  \t}\n   56: \telse if (TASK_entry.t_SampleOff <= 0 ){\n   57  \t\tCANVAS.screen_name_sequence = [\"blank\",\"sample\",\"test\"]\n   58  \t\tCANVAS.screen_timeon_sequence = [0,100,100+TASK_entry.t_SampleON]; \n\n3 matches in 1 file\n\n\nSearching 14 files for \".t_SampleOn\" (case sensitive)\n\n0 matches\n\nSearching 14 files for \".t_SampleON\" (case sensitive)\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_screenfunctions.js:\n   52  \tif (TASK_entry.t_SampleOFF > 0){\n   53  \t\tCANVAS.screen_name_sequence = [\"blank\", \"sample\",\"blank\",\"test\"]\n   54: \t\tCANVAS.screen_timeon_sequence = [0,100,100+TASK_entry.t_SampleON,100+TASK_entry.t_SampleON+TASK_entry.t_SampleOFF]; \n   55  \t}\n   56  \telse if (TASK_entry.t_SampleOFF <= 0 ){\n   57  \t\tCANVAS.screen_name_sequence = [\"blank\",\"sample\",\"test\"]\n   58: \t\tCANVAS.screen_timeon_sequence = [0,100,100+TASK_entry.t_SampleON]; \n   59  \t}\n   60  \t\n\n3 matches in 1 file\n\n\nSearching 14 files for \"CANVAS\" (case sensitive)\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk.html:\n  151  \t\n  152  \tDEVICE.DevicePixelRatio = window.devicePixelRatio || 1;\n  153: \tvar visiblecontext = CANVAS.obj[CANVAS.front].getContext(\"2d\");\n  154  \tvar backingStoreRatio = visiblecontext.webkitBackingStorePixelRatio ||\n  155  \t                            visiblecontext.mozBackingStorePixelRatio ||\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_dropbox.js:\n  432  \n  433  \t//================== WRITE JSON ==================//\n  434: \tasync saveTrialDatatoDropbox(SESSION, DEVICE, TASK_ARCHIVE, CANVAS, TRIAL, save_to_debug_directory){\n  435  \t\t// Add request to queue \n  436  \n  ...\n  439  \t\tdataobj.push(DEVICE)\n  440  \t\tdataobj.push(TASK_ARCHIVE)\n  441: \t\tdataobj.push(CANVAS)\n  442  \t\tdataobj.push(TRIAL)\n  443  \t\tvar datastr = JSON.stringify(dataobj); //no pretty print for now, saves space and data file is unwieldy to look at for larger numbers of trials\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_eventlisteners.js:\n  170  \tFLAGS.debug_mode = 0\n  171  \t\n  172: \trenderBlank(CANVAS.obj.blank)\n  173  \tdocument.querySelector(\"button[name=doneTestingTask]\").style.display = \"none\"\n  174  \treturn\n  ...\n  185  async function sync_data_listener(event){\n  186  \tconsole.log(\"Called data save from sync button\")\n  187: \tawait DI.saveTrialDatatoDropbox(TASK_ARCHIVE, CANVAS, TRIAL, FLAGS.debug_mode)\n  188  \tawait DI.saveTouchestoDropbox(FLAGS.debug_mode)\n  189  \n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_globalvariables.js:\n   73  \n   74  \n   75: var CANVAS = {}; \n   76: var CANVAS = {\n   77  \tnames: [\"blank\",\"sample\",\"test\",\"touchfix\",\"eyefix\",\"reward\",\"photoreward\",\"punish\"],\n   78  \tfront: \"blank\",\n   ..\n   90  \tobj: [],\n   91  }\n   92: for (var i in CANVAS.names){\n   93: \tCANVAS.obj[CANVAS.names[i]]=document.getElementById(\"canvas\" + CANVAS.names[i])\n   94  }\n   95  \n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_runtrial.js:\n   41  DEVICE.YGridCenter = funcreturn[3]\n   42  \n   43: renderReward(CANVAS.obj.reward);\n   44: renderPunish(CANVAS.obj.punish);\n   45: renderBlank(CANVAS.obj.blank);\n   46  \n   47  //============ SELECT SAMPLE & TEST IMAGES ============//\n   ..\n   50  \n   51  \n   52: //============ AWAIT BUFFER CANVASES WITH SAMPLE & TEST IMAGES ============//\n   53  boundingBoxesTestOrder = await bufferTrialImages(sampleimage, testimages);\n   54  \n   ..\n   62      // Render fixation screen \n   63      var color = \"white\" // todo move into task    \n   64:     renderFixationUsingDot(color, fixationgridindex, FixationRadius, CANVAS.obj.touchfix);\n   65      \n   66      // Start timer for this fixation render trial. \n   67      starttime=Math.round(performance.now());\n   68      frame.shown=[];\n   69:     for (var q in CANVAS.sequencepre){\n   70          frame.shown[q]=0\n   71      }; \n   ..\n   73  \n   74      //========= AWAIT SHOW FIXATION =========//\n   75:     await displayTrial(CANVAS.sequencepre,CANVAS.tsequencepre);\n   76      SP.audiocontext.suspend()\n   77  \n   ..\n   84  \n   85      //========= AWAIT CLEAR FIXATION =========//\n   86:     for (var q in CANVAS.sequenceblank){\n   87          frame.shown[q]=0\n   88      }\n   89      frame.current=0;\n   90      if (FLAGS.waitingforTouches > 0){\n   91:         await displayTrial(CANVAS.sequenceblank,CANVAS.tsequenceblank);\n   92      } //blank out screen\n   93  } \n   ..\n   95  //============== AWAIT SHOW SAMPLE THEN TEST ==============//\n   96  frame.shown=[]\n   97: for (var q in CANVAS.screen_name_sequence){\n   98      frame.shown[q]=0\n   99  } \n  ...\n  101  frame.current=0\n  102  \n  103: tsequenceactual = await displayTrial(CANVAS.screen_name_sequence,CANVAS.screen_timeon_sequence);\n  104: tsequencedesired = CANVAS.screen_timeon_sequence\n  105  SP.audiocontext.suspend()\n  106  \n  ...\n  132  \n  133  if (correct == 1){\n  134:     CANVAS.screen_name_post_sequence[1]=\"reward\";\n  135:     CANVAS.tsequencepost[2] = CANVAS.tsequencepost[1]+RewardDuration*1000;\n  136  \n  137      for (var q = 0; q <= nreward-1; q++){\n  138          frame.shown=[];\n  139:         for (var q2 in CANVAS.screen_name_post_sequence){frame.shown[q2]=0}; frame.current=0;\n  140  \n  141          SP.playSound(2);\n  142:         var p1 = displayTrial(CANVAS.screen_name_post_sequence,CANVAS.tsequencepost)\n  143          if (ble.connected == false){\n  144              await Promise.all([p1])\n  ...\n  153  //PUNISH\n  154  else if (correct == 0) {\n  155:     CANVAS.screen_name_post_sequence[1] = \"punish\";\n  156:     CANVAS.tsequencepost[2] = CANVAS.tsequencepost[1]+TASK.PunishTimeOut;\n  157      frame.shown=[];\n  158:     for (var q in CANVAS.screen_name_post_sequence){frame.shown[q]=0}; frame.current=0;\n  159  \n  160:     var p1 = displayTrial(CANVAS.screen_name_post_sequence,CANVAS.tsequencepost);\n  161      var num_trials_to_buffer_in_punishperiod = 0\n  162      var p2 = TQ.buffer_trials(num_trials_to_buffer_in_punishperiod)\n  ...\n  203  if ( _ms_since_last_trial_data_save > TRIALDATA_SAVE_TIMEOUT_PERIOD){ \n  204      // console.log(_ms_since_last_trial_data_save/1000+'s since last trial data save. At trial'+ TRIAL_NUMBER_FROM_SESSION_START +'. automator stage:'+TASK.CurrentAutomatorStage)\n  205:     DI.saveTrialDatatoDropbox(SESSION, DEVICE, TASK_ARCHIVE, CANVAS, TRIAL, FLAGS.debug_mode)\n  206      last_trial_data_save = performance.now()\n  207  }\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_screenfunctions.js:\n   51  \t// Adjust delay period\n   52  \tif (TASK_entry.t_SampleOFF > 0){\n   53: \t\tCANVAS.screen_name_sequence = [\"blank\", \"sample\",\"blank\",\"test\"]\n   54: \t\tCANVAS.screen_timeon_sequence = [0,100,100+TASK_entry.t_SampleON,100+TASK_entry.t_SampleON+TASK_entry.t_SampleOFF]; \n   55  \t}\n   56  \telse if (TASK_entry.t_SampleOFF <= 0 ){\n   57: \t\tCANVAS.screen_name_sequence = [\"blank\",\"sample\",\"test\"]\n   58: \t\tCANVAS.screen_timeon_sequence = [0,100,100+TASK_entry.t_SampleON]; \n   59  \t}\n   60  \t\n   61  \t// Adjust length of reward screen based on reward amount \n   62: \tCANVAS.tsequencepost[2] = CANVAS.tsequencepost[1]+RewardDuration*1000;\n   63  }\n   64  \n   65  function writeTextonBlankCanvas(textstr,x,y){\n   66: \tvar blank_canvasobj=CANVAS.obj.blank\n   67  \tvar visible_ctxt = blank_canvasobj.getContext('2d')\n   68  \tvisible_ctxt.textBaseline = \"hanging\"\n   ..\n   76  function setupCanvas(canvasobj){\n   77  \t// center in page\n   78: \tcanvasobj.style.top=CANVAS.offsettop + \"px\";\n   79: \tcanvasobj.style.left=CANVAS.offsetleft + \"px\";\n   80: \tcanvasobj.width=windowWidth - CANVAS.offsetleft;\n   81: \tcanvasobj.height=windowHeight - CANVAS.offsettop;\n   82  \tcanvasobj.style.margin=\"0 auto\";\n   83  \tcanvasobj.style.display=\"block\"; //visible\n   ..\n  101  \t\tcanvasobj.width = oldWidth/DEVICE.CanvasRatio;\n  102  \t\tcanvasobj.height = oldHeight/DEVICE.CanvasRatio;\n  103: \t\tcanvasobj.style.width = windowWidth - CANVAS.offsetleft + \"px\";\n  104: \t\tcanvasobj.style.height = windowHeight - CANVAS.offsettop + \"px\";\n  105  \t\tcanvasobj.style.margin=\"0 auto\";\n  106  \t\tcontext.scale(1/DEVICE.CanvasRatio,1/DEVICE.CanvasRatio);\n  ...\n  128  \n  129  \t//center x & y grid within canvas\n  130: \tvar canvas_center_x = (document.body.clientWidth - CANVAS.offsetleft)*DEVICE.CanvasRatio*DEVICE.DevicePixelRatio/2\n  131  \tvar dx = canvas_center_x - DEVICE.CanvasRatio*ngridpoints/2*wd*gridscale; //left side of grid\n  132: \tvar canvas_center_y = (document.body.clientHeight - CANVAS.offsettop)*DEVICE.CanvasRatio*DEVICE.DevicePixelRatio/2\n  133  \tvar dy = canvas_center_y - DEVICE.CanvasRatio*ngridpoints/2*ht*gridscale; //top of grid\n  134  \tfor (var i=0; i<=xgrid.length-1; i++){\n  ...\n  141  \n  142  async function bufferTrialImages(sample_image, test_images){\n  143: \t//========== BUFFER SAMPLE CANVAS ==========//\n  144: \tvar canvasobj=CANVAS.obj.sample\n  145: \tvar context=CANVAS.obj.sample.getContext('2d'); \n  146  \tcontext.fillStyle=\"#7F7F7F\";  // Gray out before buffering sample\n  147  \t//context.fillRect(0,100, canvasobj.width,canvasobj.height); // 100 is for the photodiode bar at the top of the screen\n  148: \tawait renderImageOnCanvas(sample_image, TASK.SampleGridIndex, TASK.SampleScale, CANVAS.obj.sample)\n  149  \t\n  150: \t//========== BUFFER TEST CANVAS ==========//\n  151  \t// Option: gray out before buffering test: (for overriding previous trial's test screen if current trial test screen has transparent elements?)\n  152  \t// var pre_grayout = true \n  153  \t// if(pre_grayout == true){\n  154: \t// \tvar canvasobj=CANVAS.obj.test;\n  155  \t// \tvar context=canvasobj.getContext('2d');\n  156  \t// \tcontext.fillStyle=\"#7F7F7F\";\n  ...\n  166  \t\t\n  167  \n  168: \t\tfuncreturn = await renderImageOnCanvas(test_images[i], TASK.ObjectGridMapping[i], TASK.TestScale, CANVAS.obj.test); \n  169  \t\tboundingBoxes.x.push(funcreturn[0]); \n  170  \t\tboundingBoxes.y.push(funcreturn[1]); \n  ...\n  204  \tybound=[ytop, ytop+ht*scale*DEVICE.CanvasRatio];\n  205  \n  206: \txbound[0]=xbound[0]+CANVAS.offsetleft;\n  207: \txbound[1]=xbound[1]+CANVAS.offsetleft;\n  208: \tybound[0]=ybound[0]+CANVAS.offsettop;\n  209: \tybound[1]=ybound[1]+CANVAS.offsettop;\n  210  \treturn [xbound, ybound]\n  211  }\n  ...\n  233  \t\t\ttActual[frame.current] = Math.round(100*(timestamp - start))/100 //in milliseconds, rounded to nearest hundredth of a millisecond\n  234  \t\t\t// Move canvas in front\n  235: \t\t\tvar prev_canvasobj=CANVAS.obj[CANVAS.front]\n  236: \t\t\tvar curr_canvasobj=CANVAS.obj[screen_name_sequence[frame.current]]\n  237: \t\t\tif (CANVAS.front != \"blank\"){\n  238  \t\t\t\t// Move to back\n  239  \t\t\t\tprev_canvasobj.style.zIndex=\"0\";\n  ...\n  241  \t\t\tif (screen_name_sequence[frame.current] != \"blank\"){\n  242  \t\t\t\tcurr_canvasobj.style.zIndex=\"100\";\n  243: \t\t\t\tCANVAS.front = screen_name_sequence[frame.current];\n  244  \t\t\t} // move to front\n  245  \t\t\telse{\n  246: \t\t\t\tCANVAS.front = \"blank\";\n  247  \t\t\t}\n  248  \t\t\t\n  ...\n  313  \tboundingBoxesFixation['y']=[]\n  314  \tboundingBoxesFixation['GridIndex']=[TASK.StaticFixationGridIndex]\n  315: \tboundingBoxesFixation.x.push([xcent-rad+CANVAS.offsetleft, xcent+rad+CANVAS.offsetleft]);\n  316: \tboundingBoxesFixation.y.push([ycent-rad+CANVAS.offsettop, ycent+rad+CANVAS.offsettop]);\n  317  }\n  318  \n  319  function checkDisplayBounds(displayobject_coord){\n  320  \tvar outofbounds=0\n  321: \tif (displayobject_coord[0] < CANVAS.workspace[0] ||\n  322: \t\tdisplayobject_coord[1] < CANVAS.workspace[1] ||\n  323: \t\tdisplayobject_coord[2] > CANVAS.workspace[2] ||\n  324: \t\tdisplayobject_coord[3] > CANVAS.workspace[3]){\n  325  \t\toutofbounds=1\n  326  \t}\n\n80 matches across 6 files\n\n\nSearching 14 files for \"CANVAS\" (case sensitive)\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk.html:\n  151  \t\n  152  \tDEVICE.DevicePixelRatio = window.devicePixelRatio || 1;\n  153: \tvar visiblecontext = CANVAS.obj[CANVAS.front].getContext(\"2d\");\n  154  \tvar backingStoreRatio = visiblecontext.webkitBackingStorePixelRatio ||\n  155  \t                            visiblecontext.mozBackingStorePixelRatio ||\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_dropbox.js:\n  432  \n  433  \t//================== WRITE JSON ==================//\n  434: \tasync saveTrialDatatoDropbox(SESSION, DEVICE, TASK_ARCHIVE, CANVAS, TRIAL, save_to_debug_directory){\n  435  \t\t// Add request to queue \n  436  \n  ...\n  439  \t\tdataobj.push(DEVICE)\n  440  \t\tdataobj.push(TASK_ARCHIVE)\n  441: \t\tdataobj.push(CANVAS)\n  442  \t\tdataobj.push(TRIAL)\n  443  \t\tvar datastr = JSON.stringify(dataobj); //no pretty print for now, saves space and data file is unwieldy to look at for larger numbers of trials\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_eventlisteners.js:\n  170  \tFLAGS.debug_mode = 0\n  171  \t\n  172: \trenderBlank(CANVAS.obj.blank)\n  173  \tdocument.querySelector(\"button[name=doneTestingTask]\").style.display = \"none\"\n  174  \treturn\n  ...\n  185  async function sync_data_listener(event){\n  186  \tconsole.log(\"Called data save from sync button\")\n  187: \tawait DI.saveTrialDatatoDropbox(TASK_ARCHIVE, CANVAS, TRIAL, FLAGS.debug_mode)\n  188  \tawait DI.saveTouchestoDropbox(FLAGS.debug_mode)\n  189  \n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_globalvariables.js:\n   73  \n   74  \n   75: var CANVAS = {}; \n   76: var CANVAS = {\n   77  \tnames: [\"blank\",\"sample\",\"test\",\"touchfix\",\"eyefix\",\"reward\",\"photoreward\",\"punish\"],\n   78  \tfront: \"blank\",\n   ..\n   90  \tobj: [],\n   91  }\n   92: for (var i in CANVAS.names){\n   93: \tCANVAS.obj[CANVAS.names[i]]=document.getElementById(\"canvas\" + CANVAS.names[i])\n   94  }\n   95  \n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_runtrial.js:\n   41  DEVICE.YGridCenter = funcreturn[3]\n   42  \n   43: renderReward(CANVAS.obj.reward);\n   44: renderPunish(CANVAS.obj.punish);\n   45: renderBlank(CANVAS.obj.blank);\n   46  \n   47  //============ SELECT SAMPLE & TEST IMAGES ============//\n   ..\n   50  \n   51  \n   52: //============ AWAIT BUFFER CANVASES WITH SAMPLE & TEST IMAGES ============//\n   53  boundingBoxesTestOrder = await bufferTrialImages(sampleimage, testimages);\n   54  \n   ..\n   62      // Render fixation screen \n   63      var color = \"white\" // todo move into task    \n   64:     renderFixationUsingDot(color, fixationgridindex, FixationRadius, CANVAS.obj.touchfix);\n   65      \n   66      // Start timer for this fixation render trial. \n   67      starttime=Math.round(performance.now());\n   68      frame.shown=[];\n   69:     for (var q in CANVAS.sequencepre){\n   70          frame.shown[q]=0\n   71      }; \n   ..\n   73  \n   74      //========= AWAIT SHOW FIXATION =========//\n   75:     await displayTrial(CANVAS.sequencepre,CANVAS.tsequencepre);\n   76      SP.audiocontext.suspend()\n   77  \n   ..\n   84  \n   85      //========= AWAIT CLEAR FIXATION =========//\n   86:     for (var q in CANVAS.sequenceblank){\n   87          frame.shown[q]=0\n   88      }\n   89      frame.current=0;\n   90      if (FLAGS.waitingforTouches > 0){\n   91:         await displayTrial(CANVAS.sequenceblank,CANVAS.tsequenceblank);\n   92      } //blank out screen\n   93  } \n   ..\n   95  //============== AWAIT SHOW SAMPLE THEN TEST ==============//\n   96  frame.shown=[]\n   97: for (var q in CANVAS.screen_name_sequence){\n   98      frame.shown[q]=0\n   99  } \n  ...\n  101  frame.current=0\n  102  \n  103: tsequenceactual = await displayTrial(CANVAS.screen_name_sequence,CANVAS.screen_timeon_sequence);\n  104: tsequencedesired = CANVAS.screen_timeon_sequence\n  105  SP.audiocontext.suspend()\n  106  \n  ...\n  132  \n  133  if (correct == 1){\n  134:     CANVAS.screen_name_post_sequence[1]=\"reward\";\n  135:     CANVAS.tsequencepost[2] = CANVAS.tsequencepost[1]+RewardDuration*1000;\n  136  \n  137      for (var q = 0; q <= nreward-1; q++){\n  138          frame.shown=[];\n  139:         for (var q2 in CANVAS.screen_name_post_sequence){frame.shown[q2]=0}; frame.current=0;\n  140  \n  141          SP.playSound(2);\n  142:         var p1 = displayTrial(CANVAS.screen_name_post_sequence,CANVAS.tsequencepost)\n  143          if (ble.connected == false){\n  144              await Promise.all([p1])\n  ...\n  153  //PUNISH\n  154  else if (correct == 0) {\n  155:     CANVAS.screen_name_post_sequence[1] = \"punish\";\n  156:     CANVAS.tsequencepost[2] = CANVAS.tsequencepost[1]+TASK.PunishTimeOut;\n  157      frame.shown=[];\n  158:     for (var q in CANVAS.screen_name_post_sequence){frame.shown[q]=0}; frame.current=0;\n  159  \n  160:     var p1 = displayTrial(CANVAS.screen_name_post_sequence,CANVAS.tsequencepost);\n  161      var num_trials_to_buffer_in_punishperiod = 0\n  162      var p2 = TQ.buffer_trials(num_trials_to_buffer_in_punishperiod)\n  ...\n  203  if ( _ms_since_last_trial_data_save > TRIALDATA_SAVE_TIMEOUT_PERIOD){ \n  204      // console.log(_ms_since_last_trial_data_save/1000+'s since last trial data save. At trial'+ TRIAL_NUMBER_FROM_SESSION_START +'. automator stage:'+TASK.CurrentAutomatorStage)\n  205:     DI.saveTrialDatatoDropbox(SESSION, DEVICE, TASK_ARCHIVE, CANVAS, TRIAL, FLAGS.debug_mode)\n  206      last_trial_data_save = performance.now()\n  207  }\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_screenfunctions.js:\n   51  \t// Adjust delay period\n   52  \tif (TASK_entry.t_SampleOFF > 0){\n   53: \t\tCANVAS.screen_name_sequence = [\"blank\", \"sample\",\"blank\",\"test\"]\n   54: \t\tCANVAS.screen_timeon_sequence = [0,100,100+TASK_entry.t_SampleON,100+TASK_entry.t_SampleON+TASK_entry.t_SampleOFF]; \n   55  \t}\n   56  \telse if (TASK_entry.t_SampleOFF <= 0 ){\n   57: \t\tCANVAS.screen_name_sequence = [\"blank\",\"sample\",\"test\"]\n   58: \t\tCANVAS.screen_timeon_sequence = [0,100,100+TASK_entry.t_SampleON]; \n   59  \t}\n   60  \t\n   61  \t// Adjust length of reward screen based on reward amount \n   62: \tCANVAS.tsequencepost[2] = CANVAS.tsequencepost[1]+RewardDuration*1000;\n   63  }\n   64  \n   65  function writeTextonBlankCanvas(textstr,x,y){\n   66: \tvar blank_canvasobj=CANVAS.obj.blank\n   67  \tvar visible_ctxt = blank_canvasobj.getContext('2d')\n   68  \tvisible_ctxt.textBaseline = \"hanging\"\n   ..\n   76  function setupCanvas(canvasobj){\n   77  \t// center in page\n   78: \tcanvasobj.style.top=CANVAS.offsettop + \"px\";\n   79: \tcanvasobj.style.left=CANVAS.offsetleft + \"px\";\n   80: \tcanvasobj.width=windowWidth - CANVAS.offsetleft;\n   81: \tcanvasobj.height=windowHeight - CANVAS.offsettop;\n   82  \tcanvasobj.style.margin=\"0 auto\";\n   83  \tcanvasobj.style.display=\"block\"; //visible\n   ..\n  101  \t\tcanvasobj.width = oldWidth/DEVICE.CanvasRatio;\n  102  \t\tcanvasobj.height = oldHeight/DEVICE.CanvasRatio;\n  103: \t\tcanvasobj.style.width = windowWidth - CANVAS.offsetleft + \"px\";\n  104: \t\tcanvasobj.style.height = windowHeight - CANVAS.offsettop + \"px\";\n  105  \t\tcanvasobj.style.margin=\"0 auto\";\n  106  \t\tcontext.scale(1/DEVICE.CanvasRatio,1/DEVICE.CanvasRatio);\n  ...\n  128  \n  129  \t//center x & y grid within canvas\n  130: \tvar canvas_center_x = (document.body.clientWidth - CANVAS.offsetleft)*DEVICE.CanvasRatio*DEVICE.DevicePixelRatio/2\n  131  \tvar dx = canvas_center_x - DEVICE.CanvasRatio*ngridpoints/2*wd*gridscale; //left side of grid\n  132: \tvar canvas_center_y = (document.body.clientHeight - CANVAS.offsettop)*DEVICE.CanvasRatio*DEVICE.DevicePixelRatio/2\n  133  \tvar dy = canvas_center_y - DEVICE.CanvasRatio*ngridpoints/2*ht*gridscale; //top of grid\n  134  \tfor (var i=0; i<=xgrid.length-1; i++){\n  ...\n  141  \n  142  async function bufferTrialImages(sample_image, test_images){\n  143: \t//========== BUFFER SAMPLE CANVAS ==========//\n  144: \tvar canvasobj=CANVAS.obj.sample\n  145: \tvar context=CANVAS.obj.sample.getContext('2d'); \n  146  \tcontext.fillStyle=\"#7F7F7F\";  // Gray out before buffering sample\n  147  \t//context.fillRect(0,100, canvasobj.width,canvasobj.height); // 100 is for the photodiode bar at the top of the screen\n  148: \tawait renderImageOnCanvas(sample_image, TASK.SampleGridIndex, TASK.SampleScale, CANVAS.obj.sample)\n  149  \t\n  150: \t//========== BUFFER TEST CANVAS ==========//\n  151  \t// Option: gray out before buffering test: (for overriding previous trial's test screen if current trial test screen has transparent elements?)\n  152  \t// var pre_grayout = true \n  153  \t// if(pre_grayout == true){\n  154: \t// \tvar canvasobj=CANVAS.obj.test;\n  155  \t// \tvar context=canvasobj.getContext('2d');\n  156  \t// \tcontext.fillStyle=\"#7F7F7F\";\n  ...\n  166  \t\t\n  167  \n  168: \t\tfuncreturn = await renderImageOnCanvas(test_images[i], TASK.ObjectGridMapping[i], TASK.TestScale, CANVAS.obj.test); \n  169  \t\tboundingBoxes.x.push(funcreturn[0]); \n  170  \t\tboundingBoxes.y.push(funcreturn[1]); \n  ...\n  204  \tybound=[ytop, ytop+ht*scale*DEVICE.CanvasRatio];\n  205  \n  206: \txbound[0]=xbound[0]+CANVAS.offsetleft;\n  207: \txbound[1]=xbound[1]+CANVAS.offsetleft;\n  208: \tybound[0]=ybound[0]+CANVAS.offsettop;\n  209: \tybound[1]=ybound[1]+CANVAS.offsettop;\n  210  \treturn [xbound, ybound]\n  211  }\n  ...\n  233  \t\t\ttActual[frame.current] = Math.round(100*(timestamp - start))/100 //in milliseconds, rounded to nearest hundredth of a millisecond\n  234  \t\t\t// Move canvas in front\n  235: \t\t\tvar prev_canvasobj=CANVAS.obj[CANVAS.front]\n  236: \t\t\tvar curr_canvasobj=CANVAS.obj[screen_name_sequence[frame.current]]\n  237: \t\t\tif (CANVAS.front != \"blank\"){\n  238  \t\t\t\t// Move to back\n  239  \t\t\t\tprev_canvasobj.style.zIndex=\"0\";\n  ...\n  241  \t\t\tif (screen_name_sequence[frame.current] != \"blank\"){\n  242  \t\t\t\tcurr_canvasobj.style.zIndex=\"100\";\n  243: \t\t\t\tCANVAS.front = screen_name_sequence[frame.current];\n  244  \t\t\t} // move to front\n  245  \t\t\telse{\n  246: \t\t\t\tCANVAS.front = \"blank\";\n  247  \t\t\t}\n  248  \t\t\t\n  ...\n  313  \tboundingBoxesFixation['y']=[]\n  314  \tboundingBoxesFixation['GridIndex']=[TASK.StaticFixationGridIndex]\n  315: \tboundingBoxesFixation.x.push([xcent-rad+CANVAS.offsetleft, xcent+rad+CANVAS.offsetleft]);\n  316: \tboundingBoxesFixation.y.push([ycent-rad+CANVAS.offsettop, ycent+rad+CANVAS.offsettop]);\n  317  }\n  318  \n  319  function checkDisplayBounds(displayobject_coord){\n  320  \tvar outofbounds=0\n  321: \tif (displayobject_coord[0] < CANVAS.workspace[0] ||\n  322: \t\tdisplayobject_coord[1] < CANVAS.workspace[1] ||\n  323: \t\tdisplayobject_coord[2] > CANVAS.workspace[2] ||\n  324: \t\tdisplayobject_coord[3] > CANVAS.workspace[3]){\n  325  \t\toutofbounds=1\n  326  \t}\n\n80 matches across 6 files\n\n\n\\Searching 14 files for \"renderFixationUsingDot\" (case sensitive)\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_runtrial.js:\n   62      // Render fixation screen \n   63      var color = \"white\" // todo move into task    \n   64:     renderFixationUsingDot(color, fixationgridindex, FixationRadius, CANVAS.obj.touchfix);\n   65      \n   66      // Start timer for this fixation render trial. \n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_screenfunctions.js:\n  288  \tboundingBoxesFixation.y.push(funcreturn[1]);\n  289  }\n  290: function renderFixationUsingDot(color, gridindex, dot_pixelradius, canvasobj){\n  291  \tvar context=canvasobj.getContext('2d');\n  292  \tcontext.clearRect(0,0,canvasobj.width,canvasobj.height);\n\n2 matches across 2 files\n\n\nSearching 14 files for \"canvastouchfix\" (case sensitive)\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk.html:\n   59  \t<canvas id=\"canvassample\" width=\"0\" height=\"0\" src=\"\" style=\"z-index:1; position: absolute; left: 0px; top: 0px;\"> </canvas>\n   60  \t<canvas id=\"canvastest\" width=\"0\" height=\"0\" src=\"\" style=\"z-index:2; position: absolute; left: 0px; top: 0px;\"> </canvas>\n   61: \t<canvas id=\"canvastouchfix\" width=\"0\" height=\"0\" src=\"\" style=\"z-index:3; position: absolute; left: 0px; top: 0px;\"> </canvas>\n   62  \t<canvas id=\"canvaseyefix\" width=\"0\" height=\"0\" src=\"\" style=\"z-index:4; position: absolute; left: 0px; top: 0px;\"> </canvas>\n   63  \t<canvas id=\"canvasreward\" width=\"0\" height=\"0\" src=\"\" style=\"z-index:5; position: absolute; left: 0px; top: 0px;\"> </canvas>\n\n1 match in 1 file\n\n\nSearching 14 files for \"correct\" (case sensitive)\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_TrialQueue.js:\n   22  \tthis.testq.filenames = []; \n   23  \tthis.testq.indices = []; \n   24: \tthis.testq.correctIndex = [];\n   25  \n   26  \tthis.trialNumber_q = []\n   ..\n   95  \t\tthis.testq.filenames.push(test_filenames)\n   96  \t\tthis.testq.indices.push(test_indices)\n   97: \t\tthis.testq.correctIndex.push(test_labels.indexOf(sample_label))\n   98  \n   99  \t\tthis.trialNumber_q.push(trialnumber)\n  ...\n  119  \tvar test_filenames = this.testq.filenames[idx]\n  120  \tvar test_indices = this.testq.indices[idx] \n  121: \tvar test_correctIndex = this.testq.correctIndex[idx]\n  122: \tvar test_correctGridIndex = TASK.ObjectGridMapping[test_correctIndex]\n  123  \n  124  \tvar sample_image = await this.IB.get_by_name(sample_filename); \n  ...\n  128  \t}\n  129  \n  130: \treturn [sample_image, sample_index, test_images, test_indices, test_correctGridIndex]\n  131  }\n  132  }\n  ...\n  147  }\n  148  \n  149: function selectTestImages(correct_label, testbag_labels, ObjectGridMapping, _RNGseed){\n  150  \t\n  151  \tMath.seedrandom(_RNGseed)\n  152  \n  153  \tvar testIndices = []; \n  154: \tvar correctSelection = NaN;\n  155  \n  156  \t// If SR is on, \n  ...\n  179  \tfor (var i = 0; i < testbag_labels.length; i++){\n  180  \t\tif(labelspace.indexOf(testbag_labels[i]) == -1 && \n  181: \t\t\ttestbag_labels[i] != correct_label){\n  182  \t\t\tlabelspace.push(testbag_labels[i])\n  183  \t\t}\n  ...\n  191  \t}\n  192  \n  193: \t// Add distractors and correct label to testpool, and then shuffle. \n  194  \tvar testpool = []\n  195  \ttestpool.push(... distractors)\n  196: \ttestpool.push(correct_label)\n  197  \ttestpool = shuffle(testpool)\t\n  198  \n  ...\n  203  \t\ttest_image_index = object_test_indices[Math.floor((object_test_indices.length)*Math.random())]; \n  204  \t\ttestIndices[i] = test_image_index\n  205: \t\tif(label == correct_label){\n  206: \t\t\tcorrectSelection = i\n  207  \t\t}\n  208  \t}\n  209  \n  210: \treturn [testIndices, correctSelection]\n  211  }\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_automator.js:\n   32  \t\t// trialhistory.starttime\n   33  \t\t// trialhistory.response \n   34: \t\t// trialhistory.correct \n   35  \t\t// trialhistory.trialnumber \t\t\n   36  \t\tthis.automator_data = await DI.parseAutomatorFilefromDropbox(TASK.AutomatorFilePath)\n   ..\n  105  \t\tvar CurrentAutomatorStageName = this.automator_data[i_current_stage].CurrentAutomatorStageName;\n  106  \n  107: \t\t// Calculate current pctcorrect and ntrials\n  108: \t\tvar funcreturn = computeRunningHistory(MinTrialsCriterion, current_stage_hash, this.trialhistory.trainingstage, this.trialhistory.correct)\n  109: \t\tvar pctcorrect = funcreturn[0]\n  110  \t\tvar ntrials = funcreturn[1]\n  111  \n  112: \t\tconsole.log('For '+ntrials+' trials, pctcorrect='+pctcorrect)\n  113  \n  114  \t\t// ---------- CHANGE TASK.STUFF TO AUTOMATOR DATA [ NEXT_STAGE ] --------------------------------------- \n  115: \t\tif(pctcorrect >= MinPercentCriterion && ntrials >= MinTrialsCriterion){\n  116  \t\t\tif (FLAGS.debug_mode == 1){\n  117  \t\t\t\ttoggleProgressbar(1)\n  ...\n  134  \t\t\t\t\tTASK.CurrentAutomatorStage = 0\n  135  \t\t\t\t\tFLAGS.need2saveParameters=1\n  136: \t\t\t\t\tconsole.log('SUBJECT ADVANCED TO STAGE ' + (i_current_stage+1) + ' of '+(this.automator_data.length-1) + ' with ' + pctcorrect+'\\% performance on n='+ntrials)\n  137: \t\t\t\t\tconsole.log('With '+pctcorrect+'\\% performance on n='+ntrials+', subject advanced to stage '+(i_current_stage+1)+' of '+(this.automator_data.length-1)+' (zero indexing) of automator.')\n  138  \n  139  \t\t\t\t\t// Update TASK \n  ...\n  170  \t\t\t\t\tTASK.CurrentAutomatorStage = 'off';\n  171  \t\t\t\t\tconsole.log('COMPLETED FINAL STAGE, TURNING AUTOMATOR OFF')\n  172: \t\t\t\t\tconsole.log('With '+pctcorrect+'\\% performance on n='+ntrials+', subject completed the final stage '+(i_current_stage)+' of '+(this.automator_data.length-1)+' (zero indexing) of automator.')\n  173  \t\t\t\t\treturn TASK\n  174  \t\t\t\t}\n  ...\n  178  \t\t\t\tTASK.CurrentAutomatorStage = TASK.CurrentAutomatorStage + 1; \n  179  \t\t\t\tFLAGS.need2saveParameters=1\n  180: \t\t\t\tconsole.log('SUBJECT ADVANCED TO STAGE ' + (i_current_stage+1) + ' of '+(this.automator_data.length-1) + ' with ' + pctcorrect+'\\% performance on n='+ntrials)\n  181: \t\t\t\tconsole.log('With '+pctcorrect+'\\% performance on n='+ntrials+', subject advanced to stage '+(i_current_stage+1)+' of '+(this.automator_data.length-1)+' (zero indexing) of automator.')\n  182  \n  183  \t\t\t\t// Update TASK \n  ...\n  235  \n  236  \n  237: function computeRunningHistory(mintrials, current_stage, history_trainingstage, history_corrects){\n  238  \t// todo: \n  239  \t// should trials that are performed with the automator off, but with the SAME settings as an automator stage, \n  240  \t// be counted as being part of the automator? (nope, explicit is always better. -MLee. )\n  241  \n  242: \tif (history_trainingstage.length!=history_corrects.length){\n  243  \t \tconsole.log('trainingstage vec. length'+history_trainingstage.length)\n  244: \t \tconsole.log('corrects vec. length '+history_corrects.length)\n  245   \t\tthrow('The history arrays are of different length. Check what went wrong; cannot compute performance history.')\n  246  \t}\n  ...\n  289  \n  290  \tvar ntrial=0;\n  291: \tvar ncorrect=0;\n  292: \tvar pctcorrect = NaN\n  293: \tif (startingindex == history_corrects.length){\n  294: \t\tpctcorrect = 0;\n  295: \t\treturn [pctcorrect, ntrial]\n  296  \t}\n  297  \n  298: \tfor (var i=startingindex; i<history_corrects.length; i++){\n  299: \t\tif (history_corrects[i]==1){\n  300: \t\t\tncorrect = ncorrect+1;\n  301  \t\t}\n  302  \t\t\n  303  \t\tntrial++;\n  304  \t}\n  305: \tpctcorrect = 100 * ncorrect/ntrial;\n  306: \treturn [pctcorrect, ntrial]\n  307  }\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_dropbox.js:\n  386  \t\ttrialhistory.starttime = []\n  387  \t\ttrialhistory.response = []\n  388: \t\ttrialhistory.correct = []\n  389  \t\ttrialhistory.trialnumber = []\n  390  \n  ...\n  413  \t\t\t// Iterate over TRIALs\n  414  \t\t\tfor (var i_trial = 0; i_trial<numTRIALs; i_trial++){\n  415: \t\t\t\t// Correct/incorrect TRIAL\n  416: \t\t\t\tvar correct = Number(trial_data.Response[i_trial] == trial_data.CorrectItem[i_trial])\n  417: \t\t\t\ttrialhistory.correct.push(correct)\n  418  \n  419  \t\t\t\t// Current automator stage \n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_runtrial.js:\n   77  //============ SELECT SAMPLE & TEST IMAGES ============//\n   78  // Draw one (1) sample image from samplebag\n   79: [sampleimage, sampleindex, testimages, testindices, correctitem] = await TQ.get_trial(TRIAL_NUMBER_FROM_TASKSTREAM_START);\n   80  \n   81  \n   ..\n  110      fixationtouchevent = touchhold_return.type\n  111      if (fixationtouchevent == \"touchheld\"){\n  112:         response = correctitem\n  113      } \n  114  \n  ...\n  148  \n  149  \n  150: console.log(TRIAL_NUMBER_FROM_TASKSTREAM_START, 'Stage', TASK.CurrentAutomatorStage, 'choice:', response, 'correct choice:', correctitem)\n  151: if (response == correctitem){ \n  152      nreward = 1 \n  153  }\n  ...\n  203  TRIAL.FixationTouchEvent.push(fixationtouchevent)\n  204  TRIAL.ResponseTouchEvent.push(responsetouchevent)\n  205: TRIAL.CorrectItem.push(correctitem)\n  206  TRIAL.NReward.push(nreward)\n  207  TRIAL.AutomatorStage.push(TASK.CurrentAutomatorStage)\n  ...\n  219      AM.trialhistory.starttime.push(starttime)\n  220      AM.trialhistory.response.push(response)\n  221:     AM.trialhistory.correct.push(correct)\n  222  }\n  223  TRIAL_NUMBER_FROM_SESSION_START++\n\n56 matches across 4 files\n\n\nSearching 14 files for \"need2loadparameters\"\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_globalvariables.js:\n   62  var FLAGS = {} \n   63  FLAGS.need2loadImages = 1; \n   64: FLAGS.need2loadParameters = 0; \n   65  FLAGS.debug_mode = 1; \n   66  \n\n1 match in 1 file\n\n\nSearching 14 files for \"TASK =\"\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/experiment_flow.js:\n    4      var old_ImageBagsTest = TASK.ImageBagsTest\n    5  \n    6:     TASK = await TASK_reader.get()\n    7      \n    8      if(!old_ImageBagsTest.equals(TASK.ImageBagsTest) || !old_ImageBagsSample.equals(TASK.ImageBagsSample)){\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk.html:\n  194  \tTASK_reader = new ParamFile(ParamFilePath, DI)\n  195  \tawait TASK_reader.build()\n  196: \tTASK = await TASK_reader.get()\n  197  \t\n  198  \t\n  ...\n  207  \n  208  // ============ MAIN LOOP ==================================================================================== // \n  209: __initial_load_TASK = TASK\n  210  __initial_load_TASK_ARCHIVE = TASK_ARCHIVE // Reset to this once you transition from debug to test mode\n  211  \n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_globalvariables.js:\n  117  \tTASK_ARCHIVE = __initial_load_TASK_ARCHIVE\n  118  \t__initial_load_TASK_ARCHIVE = undefined\n  119: \tTASK = __initial_load_TASK\n  120: \t__initial_load_TASK = undefined\n  121  \tTASK_ARCHIVE_COUNTER = 0\n  122  \n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_runtrial.js:\n    6  \n    7  if (TASK.Automator !=0){    \n    8:     TASK = await AM.monitorStage_State_and_Transition(TASK);\n    9  }\n   10  \n   ..\n   14      var old_ImageBagsTest = TASK.ImageBagsTest\n   15  \n   16:     TASK = await TASK_reader.get()\n   17  \n   18      if(!old_ImageBagsTest.equals(TASK.ImageBagsTest) || !old_ImageBagsSample.equals(TASK.ImageBagsSample)){\n   ..\n  248  }\n  249  \n  250: TASK = TASK_reader.get()\n  251  }\n\n8 matches across 4 files\n\n\nSearching 14 files for \"renderFixationUsingDot\"\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_runtrial.js:\n   92  \n   93      var color = \"white\" // todo move into task    \n   94:     renderFixationUsingDot(color, fixationgridindex, FixationRadius, CANVAS.obj.touchfix);\n   95      \n   96      // Start timer for this fixation render trial. \n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_screenfunctions.js:\n  288  \tboundingBoxesFixation.y.push(funcreturn[1]);\n  289  }\n  290: function renderFixationUsingDot(color, gridindex, dot_pixelradius, canvasobj){\n  291: \tconsole.log('Renderfixationusingdot called')\n  292  \tconsole.log(color)\n  293  \tconsole.log(gridindex)\n\n3 matches across 2 files\n\n\nSearching 14 files for \"frame\"\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_globalvariables.js:\n   94  }\n   95  \n   96: var frame = {\n   97  \tcurrent: 0,\n   98  \tshown: [],\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_runtrial.js:\n   96      // Start timer for this fixation render trial. \n   97      starttime=Math.round(performance.now());\n   98:     frame.shown=[];\n   99      for (var q in CANVAS.sequencepre){\n  100:         frame.shown[q]=0\n  101      }; \n  102:     frame.current=0;\n  103  \n  104      //========= AWAIT SHOW FIXATION =========//\n  ...\n  115      //========= AWAIT CLEAR FIXATION =========//\n  116      for (var q in CANVAS.sequenceblank){\n  117:         frame.shown[q]=0\n  118      }\n  119:     frame.current=0;\n  120      if (FLAGS.waitingforTouches > 0){\n  121          await displayTrial(CANVAS.sequenceblank,CANVAS.tsequenceblank);\n  ...\n  124  \n  125  //============== AWAIT SHOW SAMPLE THEN TEST ==============//\n  126: frame.shown=[]\n  127  for (var q in CANVAS.screen_name_sequence){\n  128:     frame.shown[q]=0\n  129  } \n  130  \n  131: frame.current=0\n  132  \n  133  tsequenceactual = await displayTrial(CANVAS.screen_name_sequence,CANVAS.screen_timeon_sequence);\n  ...\n  168  \n  169      for (var q = 0; q <= nreward-1; q++){\n  170:         frame.shown=[];\n  171:         for (var q2 in CANVAS.screen_name_post_sequence){frame.shown[q2]=0}; frame.current=0;\n  172  \n  173          SP.playSound(2);\n  ...\n  187      CANVAS.screen_name_post_sequence[1] = \"punish\";\n  188      CANVAS.tsequencepost[2] = CANVAS.tsequencepost[1]+TASK.PunishTimeOut;\n  189:     frame.shown=[];\n  190:     for (var q in CANVAS.screen_name_post_sequence){frame.shown[q]=0}; frame.current=0;\n  191  \n  192      var p1 = displayTrial(CANVAS.screen_name_post_sequence,CANVAS.tsequencepost);\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_screenfunctions.js:\n  220  \t\tif (!start) start = timestamp;\n  221  \n  222: \t\t// If time to show new frame, \n  223: \t\tif (timestamp - start > screen_timeon_sequence[frame.current]){\n  224: \t\t\t//console.log('Frame =' + frame.current+'. Duration ='+(timestamp-start)+'. Timestamp = ' + timestamp)\n  225: \t\t\ttActual[frame.current] = Math.round(100*(timestamp - start))/100 //in milliseconds, rounded to nearest hundredth of a millisecond\n  226  \t\t\t// Move canvas in front\n  227  \t\t\tvar prev_canvasobj=CANVAS.obj[CANVAS.front]\n  228: \t\t\tvar curr_canvasobj=CANVAS.obj[screen_name_sequence[frame.current]]\n  229  \t\t\tif (CANVAS.front != \"blank\"){\n  230  \t\t\t\t// Move to back\n  231  \t\t\t\tprev_canvasobj.style.zIndex=\"0\";\n  232  \t\t\t} \n  233: \t\t\tif (screen_name_sequence[frame.current] != \"blank\"){\n  234  \t\t\t\tcurr_canvasobj.style.zIndex=\"100\";\n  235: \t\t\t\tCANVAS.front = screen_name_sequence[frame.current];\n  236  \t\t\t} // move to front\n  237  \t\t\telse{\n  ...\n  239  \t\t\t}\n  240  \t\t\t\n  241: \t\t\tframe.shown[frame.current]=1;\n  242: \t\t\tframe.current++;\n  243  \t\t}; \n  244: \t\t// continue if not all frames shown\n  245: \t\tif (frame.shown[frame.shown.length-1] != 1){\n  246: \t\t\twindow.requestAnimationFrame(updateCanvas);\n  247  \t\t}\n  248  \t\telse{\n  ...\n  250  \t\t}\n  251  \t}\n  252: \t//requestAnimationFrame advantages: goes on next screen refresh and syncs to browsers refresh rate on separate clock (not js clock)\n  253: \twindow.requestAnimationFrame(updateCanvas); // kick off async work\n  254  \treturn p\n  255  } \n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_utils.js:\n   73  // ----- Array equality ---- \n   74  if(Array.prototype.equals)\n   75:     console.warn(\"Overriding existing Array.prototype.equals. Possible causes: New API defines the method, there's a framework conflict or you've got double inclusions in your code.\");\n   76  // attach the .equals method to Array's prototype to call it on any array\n   77  Array.prototype.equals = function (array) {\n\n33 matches across 4 files\n\n\nSearching 14 files for \"CANVAS\"\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/experiment_flow.js:\n   13      TASK_ARCHIVE_COUNTER++\n   14      \n   15:     refreshCanvasSettings(TASK); \n   16    \n   17:     for (var i = 0; i <= CANVAS.names.length-1; i++) {\n   18:         setupCanvas(CANVAS.obj[CANVAS.names[i]]);\n   19      }\n   20      if (DEVICE.DevicePixelRatio !== 1){\n   21:         scaleCanvasforHiDPI(CANVAS.obj.sample);\n   22:         scaleCanvasforHiDPI(CANVAS.obj.test);\n   23      }\n   24  \n   25:     CANVAS.workspace = [\n   26          0,\n   27          0,\n   28:         CANVAS.obj[\"touchfix\"].width,\n   29:         CANVAS.obj[\"touchfix\"].height\n   30      ]\n   31  }\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk.html:\n   36  <!-- ************* BODY *************** -->\n   37  <body bgcolor=#7F7F7F>\n   38: <div id=\"canvasdiv\" style=\"position:relative; width:100vw; height:100vh\">\n   39  \t<button name=\"connectble\" style=\"visibility:hidden; position: absolute; top: 45%; left: 45%; height: 50px; width: 200px; border-radius: 20px\">Connect to Bluetooth juicer</button>\n   40  \n   ..\n   56  \t<button name=\"SyncButton\" style=\"visibility:hidden; position: absolute; top: 0%; left: 95%; height: 30px; width: 50px; font-size: 10px; color: green; border-radius: 10px; z-index:101\">Sync data</button>\n   57  \n   58: \t<canvas id=\"canvasblank\" width=\"0\" height=\"0\" src=\"\" style=\"z-index:99; position: absolute; left: 0px; top: 0px;\"> </canvas>\n   59: \t<canvas id=\"canvassample\" width=\"0\" height=\"0\" src=\"\" style=\"z-index:1; position: absolute; left: 0px; top: 0px;\"> </canvas>\n   60: \t<canvas id=\"canvastest\" width=\"0\" height=\"0\" src=\"\" style=\"z-index:2; position: absolute; left: 0px; top: 0px;\"> </canvas>\n   61: \t<canvas id=\"canvastouchfix\" width=\"0\" height=\"0\" src=\"\" style=\"z-index:3; position: absolute; left: 0px; top: 0px;\"> </canvas>\n   62: \t<canvas id=\"canvaseyefix\" width=\"0\" height=\"0\" src=\"\" style=\"z-index:4; position: absolute; left: 0px; top: 0px;\"> </canvas>\n   63: \t<canvas id=\"canvasreward\" width=\"0\" height=\"0\" src=\"\" style=\"z-index:5; position: absolute; left: 0px; top: 0px;\"> </canvas>\n   64: \t<canvas id=\"canvasphotoreward\" width=\"0\" height=\"0\" src=\"\" style=\"z-index:6; position: absolute; left: 0px; top: 0px;\"> </canvas>\n   65: \t<canvas id=\"canvaspunish\" width=\"0\" height=\"0\" src=\"\" style=\"z-index:7; position: absolute; left: 0px; top: 0px;\"> </canvas>\n   66  </div>\n   67  <dialog id=\"subjectID_dialog\">\n   ..\n  151  \t\n  152  \tDEVICE.DevicePixelRatio = window.devicePixelRatio || 1;\n  153: \tvar visiblecontext = CANVAS.obj[CANVAS.front].getContext(\"2d\");\n  154  \tvar backingStoreRatio = visiblecontext.webkitBackingStorePixelRatio ||\n  155  \t                            visiblecontext.mozBackingStorePixelRatio ||\n  ...\n  157  \t                            visiblecontext.oBackingStorePixelRatio ||\n  158  \t                            visiblecontext.backingStorePixelRatio || 1;\n  159: \tDEVICE.CanvasRatio = backingStoreRatio/DEVICE.DevicePixelRatio\n  160  \t\n  161  \t//Monitor Battery - from: http://www.w3.org/TR/battery-status/\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_bluetooth.js:\n   96    if (ble.connected == false){\n   97      console.log('Requesting ble device...')\n   98:     writeTextonBlankCanvas('Requesting bluetooth device list',25.5,20.5)\n   99      // let options = {filters: [ {name: ble.name}, {services:[ ble.customserviceUUID ]} ]}\n  100      let options = {filters: [ {namePrefix: ble.namePrefix}, {services:[ ble.customserviceUUID ]} ]}\n  ...\n  242        ble.statustext = textstr\n  243        // \n  244:       // writeTextonBlankCanvas(textstr,25.5,20.5)\n  245    }\n  246    catch(error) {\n  ...\n  271    ble.statustext = ble.statustext + \"  <---->  \" + textstr\n  272    // \n  273:   // writeTextonBlankCanvas(textstr,400,20.5)\n  274  \n  275    let value = event.target.value\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_dropbox.js:\n  440  \n  441  \t//================== WRITE JSON ==================//\n  442: \tasync saveTrialDatatoDropbox(SESSION, DEVICE, TASK_ARCHIVE, CANVAS, TRIAL, save_to_debug_directory){\n  443  \t\t// Add request to queue \n  444  \n  ...\n  447  \t\tdataobj.push(DEVICE)\n  448  \t\tdataobj.push(TASK_ARCHIVE)\n  449: \t\tdataobj.push(CANVAS)\n  450  \t\tdataobj.push(TRIAL)\n  451  \t\tvar datastr = JSON.stringify(dataobj); //no pretty print for now, saves space and data file is unwieldy to look at for larger numbers of trials\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_eventlisteners.js:\n  170  \tFLAGS.debug_mode = 0\n  171  \t\n  172: \trenderBlank(CANVAS.obj.blank)\n  173  \tdocument.querySelector(\"button[name=doneTestingTask]\").style.display = \"none\"\n  174  \treturn\n  ...\n  185  async function sync_data_listener(event){\n  186  \tconsole.log(\"Called data save from sync button\")\n  187: \tawait DI.saveTrialDatatoDropbox(TASK_ARCHIVE, CANVAS, TRIAL, FLAGS.debug_mode)\n  188  \tawait DI.saveTouchestoDropbox(FLAGS.debug_mode)\n  189  \n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_globalvariables.js:\n   45  DEVICE.BatteryLDT = []\n   46  DEVICE.DevicePixelRatio = 1\n   47: DEVICE.CanvasRatio = 1\n   48  DEVICE.XGridCenter = []\n   49  DEVICE.YGridCenter = []\n   ..\n   73  \n   74  \n   75: var CANVAS = {}; \n   76: var CANVAS = {\n   77  \tnames: [\"blank\",\"sample\",\"test\",\"touchfix\",\"eyefix\",\"reward\",\"photoreward\",\"punish\"],\n   78  \tfront: \"blank\",\n   ..\n   90  \tobj: [],\n   91  }\n   92: for (var i in CANVAS.names){\n   93: \tCANVAS.obj[CANVAS.names[i]]=document.getElementById(\"canvas\" + CANVAS.names[i])\n   94  }\n   95  \n   ..\n   99  }\n  100  \n  101: var boundingBoxesFixation={}; //where the fixation touch targets are on the canvas\n  102  var waitforClick; //variable to hold generator\n  103  var waitforEvent; //variable to hold generator\n  104  var touchTimer; //variable to hold timer\n  105: var xcanvascenter=[];\n  106: var ycanvascenter=[];\n  107  var curridx = null;\n  108  var datafiles=[];\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_runtrial.js:\n   23      TASK_ARCHIVE_COUNTER++\n   24  \n   25:     refreshCanvasSettings(TASK); \n   26  \n   27:     for (var i = 0; i <= CANVAS.names.length-1; i++) {\n   28:         setupCanvas(CANVAS.obj[CANVAS.names[i]]);\n   29      }\n   30      if (DEVICE.DevicePixelRatio !== 1){\n   31:         scaleCanvasforHiDPI(CANVAS.obj.sample);\n   32:         scaleCanvasforHiDPI(CANVAS.obj.test);\n   33      }\n   34  \n   35:     CANVAS.workspace = [\n   36          0,\n   37          0,\n   38:         CANVAS.obj[\"touchfix\"].width,\n   39:         CANVAS.obj[\"touchfix\"].height\n   40      ]\n   41  }\n   ..\n   65  } \n   66  \n   67: FixationRadius=(DEVICE.source_ImageWidthPixels/2)*TASK.FixationScale*DEVICE.CanvasRatio\n   68  funcreturn = defineImageGrid(TASK.NGridPoints, DEVICE.source_ImageWidthPixels, DEVICE.source_ImageHeightPixels, TASK.GridScale);\n   69: xcanvascenter = funcreturn[0]\n   70: ycanvascenter = funcreturn[1]\n   71  DEVICE.XGridCenter = funcreturn[2]\n   72  DEVICE.YGridCenter = funcreturn[3]\n   73  \n   74: renderReward(CANVAS.obj.reward);\n   75: renderPunish(CANVAS.obj.punish);\n   76: renderBlank(CANVAS.obj.blank);\n   77  \n   78  //============ SELECT SAMPLE & TEST IMAGES ============//\n   ..\n   81  \n   82  \n   83: //============ AWAIT BUFFER CANVASES WITH SAMPLE & TEST IMAGES ============//\n   84  boundingBoxesTestOrder = await bufferTrialImages(sampleimage, testimages);\n   85  \n   ..\n   92  \n   93      var color = \"white\" // todo move into task    \n   94:     renderFixationUsingDot(color, fixationgridindex, FixationRadius, CANVAS.obj.touchfix);\n   95      \n   96      // Start timer for this fixation render trial. \n   97      starttime=Math.round(performance.now());\n   98      frame.shown=[];\n   99:     for (var q in CANVAS.sequencepre){\n  100          frame.shown[q]=0\n  101      }; \n  ...\n  103  \n  104      //========= AWAIT SHOW FIXATION =========//\n  105:     await displayTrial(CANVAS.sequencepre,CANVAS.tsequencepre);\n  106      SP.audiocontext.suspend()\n  107  \n  ...\n  114  \n  115      //========= AWAIT CLEAR FIXATION =========//\n  116:     for (var q in CANVAS.sequenceblank){\n  117          frame.shown[q]=0\n  118      }\n  119      frame.current=0;\n  120      if (FLAGS.waitingforTouches > 0){\n  121:         await displayTrial(CANVAS.sequenceblank,CANVAS.tsequenceblank);\n  122      } //blank out screen\n  123  } \n  ...\n  125  //============== AWAIT SHOW SAMPLE THEN TEST ==============//\n  126  frame.shown=[]\n  127: for (var q in CANVAS.screen_name_sequence){\n  128      frame.shown[q]=0\n  129  } \n  ...\n  131  frame.current=0\n  132  \n  133: tsequenceactual = await displayTrial(CANVAS.screen_name_sequence,CANVAS.screen_timeon_sequence);\n  134: tsequencedesired = CANVAS.screen_timeon_sequence\n  135  SP.audiocontext.suspend()\n  136  \n  ...\n  164  \n  165  if (correct == 1){\n  166:     CANVAS.screen_name_post_sequence[1]=\"reward\";\n  167:     CANVAS.tsequencepost[2] = CANVAS.tsequencepost[1]+RewardDuration*1000;\n  168  \n  169      for (var q = 0; q <= nreward-1; q++){\n  170          frame.shown=[];\n  171:         for (var q2 in CANVAS.screen_name_post_sequence){frame.shown[q2]=0}; frame.current=0;\n  172  \n  173          SP.playSound(2);\n  174:         var p1 = displayTrial(CANVAS.screen_name_post_sequence,CANVAS.tsequencepost)\n  175          if (ble.connected == false){\n  176              await Promise.all([p1])\n  ...\n  185  //PUNISH\n  186  else if (correct == 0) {\n  187:     CANVAS.screen_name_post_sequence[1] = \"punish\";\n  188:     CANVAS.tsequencepost[2] = CANVAS.tsequencepost[1]+TASK.PunishTimeOut;\n  189      frame.shown=[];\n  190:     for (var q in CANVAS.screen_name_post_sequence){frame.shown[q]=0}; frame.current=0;\n  191  \n  192:     var p1 = displayTrial(CANVAS.screen_name_post_sequence,CANVAS.tsequencepost);\n  193      var num_trials_to_buffer_in_punishperiod = 0\n  194      var p2 = TQ.buffer_trials(num_trials_to_buffer_in_punishperiod)\n  ...\n  234  if ( _ms_since_last_trial_data_save > TRIALDATA_SAVE_TIMEOUT_PERIOD){ \n  235      // console.log(_ms_since_last_trial_data_save/1000+'s since last trial data save. At trial'+ TRIAL_NUMBER_FROM_SESSION_START +'. automator stage:'+TASK.CurrentAutomatorStage)\n  236:     DI.saveTrialDatatoDropbox(SESSION, DEVICE, TASK_ARCHIVE, CANVAS, TRIAL, FLAGS.debug_mode)\n  237      last_trial_data_save = performance.now()\n  238  }\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_screenfunctions.js:\n   48  \n   49  \n   50: function refreshCanvasSettings(TASK_entry){\n   51  \t// Adjust delay period\n   52  \tif (TASK_entry.t_SampleOFF > 0){\n   53: \t\tCANVAS.screen_name_sequence = [\"blank\", \"sample\",\"blank\",\"test\"]\n   54: \t\tCANVAS.screen_timeon_sequence = [0,100,100+TASK_entry.t_SampleON,100+TASK_entry.t_SampleON+TASK_entry.t_SampleOFF]; \n   55  \t}\n   56  \telse if (TASK_entry.t_SampleOFF <= 0 ){\n   57: \t\tCANVAS.screen_name_sequence = [\"blank\",\"sample\",\"test\"]\n   58: \t\tCANVAS.screen_timeon_sequence = [0,100,100+TASK_entry.t_SampleON]; \n   59  \t}\n   60  \t\n   61  \t// Adjust length of reward screen based on reward amount \n   62: \tCANVAS.tsequencepost[2] = CANVAS.tsequencepost[1]+RewardDuration*1000;\n   63  }\n   64  \n   65: function writeTextonBlankCanvas(textstr,x,y){\n   66: \tvar blank_canvasobj=CANVAS.obj.blank\n   67: \tvar visible_ctxt = blank_canvasobj.getContext('2d')\n   68  \tvisible_ctxt.textBaseline = \"hanging\"\n   69  \tvisible_ctxt.fillStyle = \"white\"\n   ..\n   74  \n   75  \n   76: function setupCanvas(canvasobj){\n   77  \t// center in page\n   78: \tcanvasobj.style.top=CANVAS.offsettop + \"px\";\n   79: \tcanvasobj.style.left=CANVAS.offsetleft + \"px\";\n   80: \tcanvasobj.width=windowWidth - CANVAS.offsetleft;\n   81: \tcanvasobj.height=windowHeight - CANVAS.offsettop;\n   82: \tcanvasobj.style.margin=\"0 auto\";\n   83: \tcanvasobj.style.display=\"block\"; //visible\n   84  \n   85  \t// assign listeners\n   86: \tcanvasobj.addEventListener('touchstart',touchstart_listener,{capture: false,passive: false}); // handle touch & mouse behavior independently http://www.html5rocks.com/en/mobile/touchandmouse/\n   87: \tcanvasobj.addEventListener('touchmove',touchmove_listener,{passive: false}) // based on console suggestion: Consider marking event handler as 'passive' to make the page more responive. https://github.com/WICG/EventListenerOptions/blob/gh-pages/explainer.md\n   88: \tcanvasobj.addEventListener('touchend',touchend_listener,{capture: false, passive:false});\n   89: \tcanvasobj.addEventListener('mousedown',touchstart_listener,{capture: false,passive: false}); // handle touch & mouse behavior independently http://www.html5rocks.com/en/mobile/touchandmouse/\n   90: \tcanvasobj.addEventListener('mousemove',touchmove_listener,{passive: false}) // based on console suggestion: Consider marking event handler as 'passive' to make the page more responive. https://github.com/WICG/EventListenerOptions/blob/gh-pages/explainer.md\n   91: \tcanvasobj.addEventListener('mouseup',touchend_listener,{capture: false, passive:false});\n   92  } \n   93  \n   94: // Sync: Adjust canvas for the device pixel ratio & browser backing store size\n   95: // from http://www.html5rocks.com/en/tutorials/canvas/hidpi/#disqus_thread\n   96: function scaleCanvasforHiDPI(canvasobj){\n   97  \tif (DEVICE.DevicePixelRatio !== backingStoreRatio){\n   98: \t\tcontext=canvasobj.getContext(\"2d\");\n   99: \t\tvar oldWidth = canvasobj.width;\n  100: \t\tvar oldHeight = canvasobj.height;\n  101: \t\tcanvasobj.width = oldWidth/DEVICE.CanvasRatio;\n  102: \t\tcanvasobj.height = oldHeight/DEVICE.CanvasRatio;\n  103: \t\tcanvasobj.style.width = windowWidth - CANVAS.offsetleft + \"px\";\n  104: \t\tcanvasobj.style.height = windowHeight - CANVAS.offsettop + \"px\";\n  105: \t\tcanvasobj.style.margin=\"0 auto\";\n  106: \t\tcontext.scale(1/DEVICE.CanvasRatio,1/DEVICE.CanvasRatio);\n  107  \t} \n  108  } \n  ...\n  127  \t}\n  128  \n  129: \t//center x & y grid within canvas\n  130: \tvar canvas_center_x = (document.body.clientWidth - CANVAS.offsetleft)*DEVICE.CanvasRatio*DEVICE.DevicePixelRatio/2\n  131: \tvar dx = canvas_center_x - DEVICE.CanvasRatio*ngridpoints/2*wd*gridscale; //left side of grid\n  132: \tvar canvas_center_y = (document.body.clientHeight - CANVAS.offsettop)*DEVICE.CanvasRatio*DEVICE.DevicePixelRatio/2\n  133: \tvar dy = canvas_center_y - DEVICE.CanvasRatio*ngridpoints/2*ht*gridscale; //top of grid\n  134  \tfor (var i=0; i<=xgrid.length-1; i++){\n  135: \t\txgridcent[i]=Math.round(xgrid[i]*wd*gridscale*DEVICE.CanvasRatio + dx);\n  136: \t\tygridcent[i]=Math.round(ygrid[i]*ht*gridscale*DEVICE.CanvasRatio + dy);\n  137  \t}\n  138  \n  139: \treturn [canvas_center_x, canvas_center_y, xgridcent, ygridcent]\n  140  }\n  141  \n  142  async function bufferTrialImages(sample_image, test_images){\n  143: \t//========== BUFFER SAMPLE CANVAS ==========//\n  144: \tvar canvasobj=CANVAS.obj.sample\n  145: \tvar context=CANVAS.obj.sample.getContext('2d'); \n  146  \tcontext.fillStyle=\"#7F7F7F\";  // Gray out before buffering sample\n  147: \t//context.fillRect(0,100, canvasobj.width,canvasobj.height); // 100 is for the photodiode bar at the top of the screen\n  148: \tawait renderImageOnCanvas(sample_image, TASK.SampleGridIndex, TASK.SampleScale, CANVAS.obj.sample)\n  149  \t\n  150  \n  ...\n  158  \t\t\n  159  \n  160: \t\tfuncreturn = await renderImageOnCanvas(test_images[i], TASK.ObjectGridMapping[i], TASK.TestScale, CANVAS.obj.test); \n  161  \t\tboundingBoxes.x.push(funcreturn[0]); \n  162  \t\tboundingBoxes.y.push(funcreturn[1]); \n  ...\n  169  \n  170  \n  171: async function renderImageOnCanvas(image, grid_index, scale, canvasobj){\n  172: \tvar context=canvasobj.getContext('2d');\n  173  \n  174  \tvar xleft=NaN;\n  ...\n  179  \twd = image.width\n  180  \tht = image.height\n  181: \txleft = Math.round(DEVICE.XGridCenter[grid_index] - 0.5*wd*scale*DEVICE.CanvasRatio);\n  182: \tytop = Math.round(DEVICE.YGridCenter[grid_index] - 0.5*ht*scale*DEVICE.CanvasRatio);\n  183  \t\n  184  \tcontext.drawImage(\n  185  \t\timage, // Image element\n  186: \t\txleft, // dx: Canvas x-coordinate of image's top-left corner. \n  187: \t\tytop, // dy: Canvas y-coordinate of  image's top-left corner. \n  188: \t\timage.width*scale*DEVICE.CanvasRatio, // dwidth. width of drawn image. \n  189: \t\timage.height*scale*DEVICE.CanvasRatio); // dheight. height of drawn image.\n  190  \n  191: \t// For drawing cropped regions of an image in the canvas, see alternate input argument structures,\n  192: \t// See: https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/drawImage\n  193  \t\n  194: \t// Bounding boxes of images on canvas\n  195: \txbound=[xleft, xleft+wd*scale*DEVICE.CanvasRatio];\n  196: \tybound=[ytop, ytop+ht*scale*DEVICE.CanvasRatio];\n  197  \n  198: \txbound[0]=xbound[0]+CANVAS.offsetleft;\n  199: \txbound[1]=xbound[1]+CANVAS.offsetleft;\n  200: \tybound[0]=ybound[0]+CANVAS.offsettop;\n  201: \tybound[1]=ybound[1]+CANVAS.offsettop;\n  202  \treturn [xbound, ybound]\n  203  }\n  ...\n  215  \tvar start = null;\n  216  \tvar tActual = []\n  217: \tfunction updateCanvas(timestamp){\n  218  \n  219  \t\t// If start has not been set to a float timestamp, set it now.\n  ...\n  224  \t\t\t//console.log('Frame =' + frame.current+'. Duration ='+(timestamp-start)+'. Timestamp = ' + timestamp)\n  225  \t\t\ttActual[frame.current] = Math.round(100*(timestamp - start))/100 //in milliseconds, rounded to nearest hundredth of a millisecond\n  226: \t\t\t// Move canvas in front\n  227: \t\t\tvar prev_canvasobj=CANVAS.obj[CANVAS.front]\n  228: \t\t\tvar curr_canvasobj=CANVAS.obj[screen_name_sequence[frame.current]]\n  229: \t\t\tif (CANVAS.front != \"blank\"){\n  230  \t\t\t\t// Move to back\n  231: \t\t\t\tprev_canvasobj.style.zIndex=\"0\";\n  232  \t\t\t} \n  233  \t\t\tif (screen_name_sequence[frame.current] != \"blank\"){\n  234: \t\t\t\tcurr_canvasobj.style.zIndex=\"100\";\n  235: \t\t\t\tCANVAS.front = screen_name_sequence[frame.current];\n  236  \t\t\t} // move to front\n  237  \t\t\telse{\n  238: \t\t\t\tCANVAS.front = \"blank\";\n  239  \t\t\t}\n  240  \t\t\t\n  ...\n  244  \t\t// continue if not all frames shown\n  245  \t\tif (frame.shown[frame.shown.length-1] != 1){\n  246: \t\t\twindow.requestAnimationFrame(updateCanvas);\n  247  \t\t}\n  248  \t\telse{\n  ...\n  251  \t}\n  252  \t//requestAnimationFrame advantages: goes on next screen refresh and syncs to browsers refresh rate on separate clock (not js clock)\n  253: \twindow.requestAnimationFrame(updateCanvas); // kick off async work\n  254  \treturn p\n  255  } \n  256  \n  257: function renderBlank(canvasobj){\n  258: \tvar context=canvasobj.getContext('2d');\n  259  \tcontext.fillStyle=\"#7F7F7F\";\n  260: \tcontext.fillRect(0,0,canvasobj.width,canvasobj.height);\n  261  }\n  262  \n  263  \n  264: function renderReward(canvasobj){\n  265: \tvar context=canvasobj.getContext('2d');\n  266  \tcontext.fillStyle=\"green\";\n  267: \tcontext.fillRect(xcanvascenter-200,ycanvascenter-200,400,400);\n  268  }\n  269  \n  270: function renderPunish(canvasobj){\n  271: \tvar context=canvasobj.getContext('2d');\n  272: \tcontext.rect(xcanvascenter-200,ycanvascenter-200,400,400);\n  273  \tcontext.fillStyle=\"black\";\n  274  \tcontext.fill();\n  275  }\n  276  \n  277: function renderFixationUsingDot(color, gridindex, dot_pixelradius, canvasobj){\n  278  \n  279: \tvar context=canvasobj.getContext('2d');\n  280: \tcontext.clearRect(0,0,canvasobj.width,canvasobj.height);\n  281  \n  282  \t// Draw fixation dot\n  ...\n  291  \tboundingBoxesFixation['y']=[]\n  292  \tboundingBoxesFixation['GridIndex']=[TASK.StaticFixationGridIndex]\n  293: \tboundingBoxesFixation.x.push([xcent-rad+CANVAS.offsetleft, xcent+rad+CANVAS.offsetleft]);\n  294: \tboundingBoxesFixation.y.push([ycent-rad+CANVAS.offsettop, ycent+rad+CANVAS.offsettop]);\n  295  }\n  296  \n  297  function checkDisplayBounds(displayobject_coord){\n  298  \tvar outofbounds=0\n  299: \tif (displayobject_coord[0] < CANVAS.workspace[0] ||\n  300: \t\tdisplayobject_coord[1] < CANVAS.workspace[1] ||\n  301: \t\tdisplayobject_coord[2] > CANVAS.workspace[2] ||\n  302: \t\tdisplayobject_coord[3] > CANVAS.workspace[3]){\n  303  \t\toutofbounds=1\n  304  \t}\n  ...\n  308  \n  309  \n  310: function displayPhysicalSize(tabletname,displayobject_coord,canvasobj){\n  311  \tif (tabletname == \"nexus9\"){\n  312  \t\tvar dpi = 281\n  ...\n  324  \t\tvar dpi = -1\n  325  \t}\n  326: \tvar visible_ctxt = canvasobj.getContext('2d');\n  327  \tvisible_ctxt.textBaseline = \"hanging\";\n  328  \tvisible_ctxt.fillStyle = \"white\";\n  329  \tvisible_ctxt.font = \"16px Verdana\";\n  330  \tvisible_ctxt.fillText( \n  331: \t\tMath.round(100*(displayobject_coord[2]-displayobject_coord[0])/dpi/DEVICE.CanvasRatio)/100 +\n  332  \t\t' x ' +\n  333: \t\tMath.round(100*(displayobject_coord[3]-displayobject_coord[1])/dpi/DEVICE.CanvasRatio)/100 + \n  334  \t\t' in', \n  335  \t\tdisplayobject_coord[0],displayobject_coord[1]-16\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_utils.js:\n   58  }\n   59  \n   60: // convert base64 to buffer array (from: http://stackoverflow.com.80bola.com/questions/27524283/save-image-to-dropbox-with-data-from-canvas?rq=1)\n   61  function _base64ToArrayBuffer(base64){\n   62    base64 = base64.split('data:image/png;base64,').join('');\n   ..\n  179  \n  180  \n  181: // convert base64 to buffer array (from: http://stackoverflow.com.80bola.com/questions/27524283/save-image-to-dropbox-with-data-from-canvas?rq=1)\n  182  function _base64ToArrayBuffer(base64){\n  183    base64 = base64.split('data:image/png;base64,').join('');\n\n235 matches across 9 files\n\n\nSearching 14 files for \"CANVAS.sequencepre\"\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_runtrial.js:\n   97      starttime=Math.round(performance.now());\n   98      frame.shown=[];\n   99:     for (var q in CANVAS.sequencepre){\n  100          frame.shown[q]=0\n  101      }; \n  ...\n  103  \n  104      //========= AWAIT SHOW FIXATION =========//\n  105:     await displayTrial(CANVAS.sequencepre,CANVAS.tsequencepre);\n  106      SP.audiocontext.suspend()\n  107  \n\n2 matches in 1 file\n\n\nSearching 14 files for \"sequencepre\"\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_globalvariables.js:\n   79  \tsequenceblank: [\"blank\",\"blank\"], \n   80  \ttsequenceblank: [0,50], \n   81: \tsequencepre: [\"touchfix\"],\n   82: \ttsequencepre: [0],\n   83  \tscreen_name_sequence: [\"blank\",\"sample\",\"blank\",\"test\"], // blank, sample, blank, test\n   84  \tscreen_timeon_sequence: NaN, \n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_runtrial.js:\n   97      starttime=Math.round(performance.now());\n   98      frame.shown=[];\n   99:     for (var q in CANVAS.sequencepre){\n  100          frame.shown[q]=0\n  101      }; \n  ...\n  103  \n  104      //========= AWAIT SHOW FIXATION =========//\n  105:     await displayTrial(CANVAS.sequencepre,CANVAS.tsequencepre);\n  106      SP.audiocontext.suspend()\n  107  \n\n5 matches across 2 files\n\n\nSearching 14 files for \"displayTrial\"\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_runtrial.js:\n  103  \n  104      //========= AWAIT SHOW FIXATION =========//\n  105:     await displayTrial(CANVAS.sequencepre,CANVAS.tsequencepre);\n  106      SP.audiocontext.suspend()\n  107  \n  ...\n  119      frame.current=0;\n  120      if (FLAGS.waitingforTouches > 0){\n  121:         await displayTrial(CANVAS.sequenceblank,CANVAS.tsequenceblank);\n  122      } //blank out screen\n  123  } \n  ...\n  131  frame.current=0\n  132  \n  133: tsequenceactual = await displayTrial(CANVAS.screen_name_sequence,CANVAS.screen_timeon_sequence);\n  134  tsequencedesired = CANVAS.screen_timeon_sequence\n  135  SP.audiocontext.suspend()\n  ...\n  172  \n  173          SP.playSound(2);\n  174:         var p1 = displayTrial(CANVAS.screen_name_post_sequence,CANVAS.tsequencepost)\n  175          if (ble.connected == false){\n  176              await Promise.all([p1])\n  ...\n  190      for (var q in CANVAS.screen_name_post_sequence){frame.shown[q]=0}; frame.current=0;\n  191  \n  192:     var p1 = displayTrial(CANVAS.screen_name_post_sequence,CANVAS.tsequencepost);\n  193      var num_trials_to_buffer_in_punishperiod = 0\n  194      var p2 = TQ.buffer_trials(num_trials_to_buffer_in_punishperiod)\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_screenfunctions.js:\n  204  \n  205  \n  206: function displayTrial(screen_name_sequence, screen_timeon_sequence){\n  207  \tvar resolveFunc\n  208  \tvar errFunc\n\n6 matches across 2 files\n\n\nSearching 14 files for \"frame.shown\"\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_runtrial.js:\n   94      // Start timer for this fixation render trial. \n   95      starttime=Math.round(performance.now());\n   96:     frame.shown=[];\n   97      for (var q in CANVAS.sequencepre){\n   98:         frame.shown[q]=0\n   99      }; \n  100      frame.current=0;\n  ...\n  113      //========= AWAIT CLEAR FIXATION =========//\n  114      for (var q in CANVAS.sequenceblank){\n  115:         frame.shown[q]=0\n  116      }\n  117      frame.current=0;\n  ...\n  122  \n  123  //============== AWAIT SHOW SAMPLE THEN TEST ==============//\n  124: frame.shown=[]\n  125  for (var q in CANVAS.screen_name_sequence){\n  126:     frame.shown[q]=0\n  127  } \n  128  \n  ...\n  166  \n  167      for (var q = 0; q <= nreward-1; q++){\n  168:         frame.shown=[];\n  169:         for (var q2 in CANVAS.screen_name_post_sequence){frame.shown[q2]=0}; frame.current=0;\n  170  \n  171          SP.playSound(2);\n  ...\n  185      CANVAS.screen_name_post_sequence[1] = \"punish\";\n  186      CANVAS.tsequencepost[2] = CANVAS.tsequencepost[1]+TASK.PunishTimeOut;\n  187:     frame.shown=[];\n  188:     for (var q in CANVAS.screen_name_post_sequence){frame.shown[q]=0}; frame.current=0;\n  189  \n  190      var p1 = displayTrial(CANVAS.screen_name_post_sequence,CANVAS.tsequencepost);\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_screenfunctions.js:\n  238  \t\t\t}\n  239  \t\t\t\n  240: \t\t\tframe.shown[frame.current]=1;\n  241  \t\t\tframe.current++;\n  242  \t\t}; \n  243  \t\t// continue if not all frames shown\n  244: \t\tif (frame.shown[frame.shown.length-1] != 1){\n  245  \t\t\twindow.requestAnimationFrame(updateCanvas);\n  246  \t\t}\n\n12 matches across 2 files\n\n\nSearching 14 files for \"shown\"\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_globalvariables.js:\n   96  var frame = {\n   97  \tcurrent: 0,\n   98: \tshown: [],\n   99  }\n  100  \n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_runtrial.js:\n   94      // Start timer for this fixation render trial. \n   95      starttime=Math.round(performance.now());\n   96:     frame.was_shown=[];\n   97      for (var q in CANVAS.sequencepre){\n   98:         frame.was_shown[q]=0\n   99      }; \n  100      frame.current=0;\n  ...\n  113      //========= AWAIT CLEAR FIXATION =========//\n  114      for (var q in CANVAS.sequenceblank){\n  115:         frame.was_shown[q]=0\n  116      }\n  117      frame.current=0;\n  ...\n  122  \n  123  //============== AWAIT SHOW SAMPLE THEN TEST ==============//\n  124: frame.was_shown=[]\n  125  for (var q in CANVAS.screen_name_sequence){\n  126:     frame.was_shown[q]=0\n  127  } \n  128  \n  ...\n  166  \n  167      for (var q = 0; q <= nreward-1; q++){\n  168:         frame.was_shown=[];\n  169:         for (var q2 in CANVAS.screen_name_post_sequence){frame.was_shown[q2]=0}; frame.current=0;\n  170  \n  171          SP.playSound(2);\n  ...\n  185      CANVAS.screen_name_post_sequence[1] = \"punish\";\n  186      CANVAS.tsequencepost[2] = CANVAS.tsequencepost[1]+TASK.PunishTimeOut;\n  187:     frame.was_shown=[];\n  188:     for (var q in CANVAS.screen_name_post_sequence){frame.was_shown[q]=0}; frame.current=0;\n  189  \n  190      var p1 = displayTrial(CANVAS.screen_name_post_sequence,CANVAS.tsequencepost);\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_screenfunctions.js:\n  238  \t\t\t}\n  239  \t\t\t\n  240: \t\t\tframe.was_shown[frame.current]=1;\n  241  \t\t\tframe.current++;\n  242  \t\t}; \n  243: \t\t// continue if not all frames shown\n  244: \t\tif (frame.was_shown[frame.was_shown.length-1] != 1){\n  245  \t\t\twindow.requestAnimationFrame(updateCanvas);\n  246  \t\t}\n\n14 matches across 3 files\n\n\nSearching 14 files for \"current\"\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_automator.js:\n   40  \t\tthis.AutomatorPreBuffer['TrialQueue'] = {}; \n   41  \n   42: \t\tfor (var a = TASK.CurrentAutomatorStage; a < this.automator_data.length; a++){\n   43  \t\t\t\n   44  \t\t\tconsole.time('Loaded stage '+a)\n   ..\n   80  \t\t// Enforce adherence to the automator file if user has changed paramfile.\n   81  \n   82: \t\tvar current_stage_hash = stageHash(TASK); \n   83: \t\tvar i_current_stage = TASK.CurrentAutomatorStage\n   84  \n   85: \t\t// Overwrite any user-generated changes to TASK to adhere to i_current_stage\n   86: \t\tfor (var property in this.automator_data[i_current_stage]){\n   87: \t\t\tif (this.automator_data[i_current_stage].hasOwnProperty(property)){ // Apparently a necessary 'if' statement, as explained in: http://stackoverflow.com/questions/8312459/iterate-through-object-properties\n   88  \t\t\t\tif (property === 'MinPercentCriterion' || property === 'MinTrialsCriterion' || \n   89: \t\t\t\t\tproperty === 'CurrentAutomatorStageName'){\n   90  \t\t\t\t\tcontinue \n   91  \t\t\t\t}\n   92: \t\t\t\tif (!(TASK[property].toString() == this.automator_data[i_current_stage][property].toString())){\n   93  \n   94: \t\t\t\t\tTASK[property] = this.automator_data[i_current_stage][property]\n   95  \t\t\t\t\tFLAGS.need2writeParameters=1\n   96  \t\t\t\t}\n   ..\n  100  \t\t// ---------- CHECK IF STAGE TRANSITION CRITERIA HAS BEEN MET: -----------------------------------------\n  101  \t\t// Read transition criteria from automator_data\n  102: \t\tvar MinPercentCriterion = this.automator_data[i_current_stage].MinPercentCriterion;\n  103: \t\tvar MinTrialsCriterion = this.automator_data[i_current_stage].MinTrialsCriterion; \n  104: \t\tvar CurrentAutomatorStageName = this.automator_data[i_current_stage].CurrentAutomatorStageName;\n  105  \n  106: \t\t// Calculate current pctcorrect and ntrials\n  107: \t\tvar funcreturn = computeRunningHistory(MinTrialsCriterion, current_stage_hash, this.trialhistory.trainingstage, this.trialhistory.correct)\n  108  \t\tvar pctcorrect = funcreturn[0]\n  109  \t\tvar ntrials = funcreturn[1]\n  ...\n  123  \t\t\tTRIAL_NUMBER_FROM_TASKSTREAM_START = 0 // todo: read from disk \n  124  \t\t\tconsole.log('TASK_ARCHIVE.push @ stage transition')\n  125: \t\t\tTASK_ARCHIVE.push(TASK) // Archive current TASK state\n  126  \t\t\tTASK_ARCHIVE_COUNTER++\n  127  \t\t\t// If finished final stage of automator,\n  128  \n  129: \t\t\tif(TASK.CurrentAutomatorStage+1 >= this.automator_data.length){\n  130  \t\t\t\tvar restart_automator = true // todo: move into user control somehow \n  131  \t\t\t\tif(restart_automator == true){\n  132  \t\t\t\t\tconsole.log(\"Restarting automator WARNING TODO \")\n  133: \t\t\t\t\tTASK.CurrentAutomatorStage = 0\n  134  \t\t\t\t\tFLAGS.need2saveParameters=1\n  135: \t\t\t\t\tconsole.log('SUBJECT ADVANCED TO STAGE ' + (i_current_stage+1) + ' of '+(this.automator_data.length-1) + ' with ' + pctcorrect+'\\% performance on n='+ntrials)\n  136: \t\t\t\t\tconsole.log('With '+pctcorrect+'\\% performance on n='+ntrials+', subject advanced to stage '+(i_current_stage+1)+' of '+(this.automator_data.length-1)+' (zero indexing) of automator.')\n  137  \n  138  \t\t\t\t\t// Update TASK \n  ...\n  140  \t\t\t\t\tvar old_imageBagsTest = TASK.ImageBagsTest\n  141  \n  142: \t\t\t\t\tfor (var property in this.automator_data[i_current_stage+1]){\n  143  \t\t\t\t\t\tif (property === 'MinPercentCriterion' || property === 'MinTrialsCriterion' ||\n  144: \t\t\t\t\t\t\tproperty === 'CurrentAutomatorStageName'){\n  145  \t\t\t\t\t\t\tcontinue \n  146  \t\t\t\t\t\t}\n  147: \t\t\t\t\t\tif (this.automator_data[i_current_stage+1].hasOwnProperty(property)){ \n  148: \t\t\t\t\t\t\tif (!(TASK[property].toString() == this.automator_data[i_current_stage+1][property].toString())){\n  149: \t\t\t\t\t\t\t\tconsole.log('\\\"'+property+'\\\" changed from '+TASK[property]+' to '+this.automator_data[i_current_stage+1][property])\n  150  \n  151: \t\t\t\t\t\t\t\tTASK[property] = this.automator_data[i_current_stage+1][property]\n  152  \t\t\t\t\t\t\t\t\n  153  \t\t\t\t\t\t\t}\n  ...\n  163  \t\t\t\telse{\n  164  \n  165: \t\t\t\t\t// Stay in current stage settings, and \n  166  \t\t\t\t\t// Turn automator off\n  167  \n  168  \t\t\t\t\tTASK.Automator = 0; \n  169: \t\t\t\t\tTASK.CurrentAutomatorStage = 'off';\n  170  \t\t\t\t\tconsole.log('COMPLETED FINAL STAGE, TURNING AUTOMATOR OFF')\n  171: \t\t\t\t\tconsole.log('With '+pctcorrect+'\\% performance on n='+ntrials+', subject completed the final stage '+(i_current_stage)+' of '+(this.automator_data.length-1)+' (zero indexing) of automator.')\n  172  \t\t\t\t\treturn TASK\n  173  \t\t\t\t}\n  ...\n  175  \t\t\telse{\n  176  \t\t\t\t// Otherwise, advance to the next stage.\n  177: \t\t\t\tTASK.CurrentAutomatorStage = TASK.CurrentAutomatorStage + 1; \n  178  \t\t\t\tFLAGS.need2saveParameters=1\n  179: \t\t\t\tconsole.log('SUBJECT ADVANCED TO STAGE ' + (i_current_stage+1) + ' of '+(this.automator_data.length-1) + ' with ' + pctcorrect+'\\% performance on n='+ntrials)\n  180: \t\t\t\tconsole.log('With '+pctcorrect+'\\% performance on n='+ntrials+', subject advanced to stage '+(i_current_stage+1)+' of '+(this.automator_data.length-1)+' (zero indexing) of automator.')\n  181  \n  182  \t\t\t\t// Update TASK \n  ...\n  184  \t\t\t\tvar old_imageBagsTest = TASK.ImageBagsTest\n  185  \n  186: \t\t\t\tfor (var property in this.automator_data[i_current_stage+1]){\n  187  \t\t\t\t\tif (property === 'MinPercentCriterion' || property === 'MinTrialsCriterion' ||\n  188: \t\t\t\t\t\tproperty === 'CurrentAutomatorStageName'){\n  189  \t\t\t\t\t\tcontinue \n  190  \t\t\t\t\t}\n  191: \t\t\t\t\tif (this.automator_data[i_current_stage+1].hasOwnProperty(property)){ \n  192: \t\t\t\t\t\tif (!(TASK[property].toString() == this.automator_data[i_current_stage+1][property].toString())){\n  193: \t\t\t\t\t\t\tconsole.log('\\\"'+property+'\\\" changed from '+TASK[property]+' to '+this.automator_data[i_current_stage+1][property])\n  194  \n  195: \t\t\t\t\t\t\tTASK[property] = this.automator_data[i_current_stage+1][property]\n  196  \t\t\t\t\t\t\t\n  197  \t\t\t\t\t\t}\n  ...\n  216  function stageHash(task){\n  217  \t// Returns a value that uniquely describes the automator and stage of the automator\n  218: \tvar current_stage_hash_string = ''\n  219  \tif (task.Automator != 0){\n  220: \t\tcurrent_stage_hash_string = task.AutomatorFilePath+'_stage'+task.CurrentAutomatorStage; \n  221  \t}\n  222  \n  223  \telse{\n  224: \t\tcurrent_stage_hash_string = 'automator_off'\n  225  \t}\n  226  \n  227: \treturn current_stage_hash_string\n  228  \n  229  \t// Todo: decide whether to count trials which have TASK that is consistent with an automator stage, as being part of that stage\n  ...\n  234  \n  235  \n  236: function computeRunningHistory(mintrials, current_stage, history_trainingstage, history_corrects){\n  237  \t// todo: \n  238  \t// should trials that are performed with the automator off, but with the SAME settings as an automator stage, \n  ...\n  246  \n  247  \t// returns \n  248: \t// The at most current-mintrials trial which starts a contiguous sequence to current trial with the same trainingstage/automatorfilepath as the current state,  \n  249  \n  250: \t// trialhistory is assumed to include all trials except the current one\n  251: \t// It is arranged in [oldest, ..., current-1] order\n  252  \n  253  \n  ...\n  255  \tvar startingindex = history_trainingstage.length;\n  256  \tfor (var i = history_trainingstage.length-1; i >= 0; i--){\n  257: \t\tif (history_trainingstage[i] == current_stage){\n  258  \t\t\tif(history_trainingstage.length - i <= mintrials){\n  259  \t\t\t\tstartingindex = i;\n  ...\n  265  \t\t}\n  266  \n  267: \t\telse if (history_trainingstage[i] != current_stage){\n  268  \t\t\tbreak\n  269  \t\t}\n  270  \t\telse{\n  271  \t\t\tconsole.log(history_trainingstage[i])\n  272: \t\t\tconsole.log(current_stage)\n  273  \t\t\tthrow \"Something went wrong 2\"\n  274  \t\t}\n  ...\n  278  \tvar ncountedtrials = 0\n  279  \tfor (var i = startingindex; i<history_trainingstage.length; i++){\n  280: \t\tif (history_trainingstage[i] != current_stage){\n  281  \t\t\tndiscrepancy = ndiscrepancy+1\n  282  \t\t\tconsole.log(history_trainingstage[i])\n  283: \t\t\tconsole.log(current_stage)\n  284  \t\t\tthrow \"Something went wrong 3\"\n  285  \t\t}\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_bluetooth.js:\n  158  \n  159    await ble.pumpcharacteristic.startNotifications()\n  160:     var currentTime = performance.now()\n  161:     while (currentTime + 1000 >= performance.now()) {\n  162      }\n  163  \n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_dropbox.js:\n   56  \t\tthis.dbx = dbx\n   57  \n   58: \t\tvar datestr = SESSION.CurrentDate.toISOString();\n   59  \t\tdatestr = datestr.slice(0,datestr.indexOf(\".\"))\n   60  \n   ..\n  425  \t\t\t\ttrialhistory.correct.push(correct)\n  426  \n  427: \t\t\t\t// Current automator stage \n  428: \t\t\t\tvar current_stage = stageHash(task_archive_data[task_archive_data.length-1])\n  429: \t\t\t\ttrialhistory.trainingstage.push(current_stage)\n  430  \n  431  \t\t\t\t// Start time (fixation dot appears) of trial \n  ...\n  466  \t\t\t\tcontents: datastr,\n  467  \t\t\t\tmode: {[\".tag\"]: \"overwrite\"} })\n  468: \t\t\t\tconsole.log(TASK.CurrentAutomatorStage+\" BEHAVIOR FILE UPLOADED at \"+savepath)\n  469  \t\t\t\n  470  \n  ...\n  488  \t\t\t}\n  489  \n  490: \t\t\tvar datestr = SESSION.CurrentDate.toISOString();\n  491  \t\t\tdatestr = datestr.slice(0,datestr.indexOf(\".\"))\n  492  \n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_globalvariables.js:\n   18  \n   19  TASK_ARCHIVE_COUNTER = 0 // attached to trial data\n   20: var TASK_ARCHIVE = []; // Array whose entries are objects that encapsulates state of the current task, read from Subject's Params file\n   21: var TASK // Current \n   22  \n   23  var TRIAL = {} // Global that contains data variables that are incremented every trial, and are dumped to disk for scientific purposes.\n   ..\n   54  SESSION.Subject = ''\n   55  SESSION.UnixTimestampAtStart = window.performance.timing.navigationStart\n   56: SESSION.CurrentDate = new Date;\n   57: var __datestr = SESSION.CurrentDate.toISOString();\n   58  SESSION.TrialDataFileName_suffix = __datestr.slice(0, __datestr.indexOf(\".\")) + \"_\" + SESSION.Subject + \".txt\";\n   59  \n   ..\n   95  \n   96  var frame = {\n   97: \tcurrent: 0,\n   98  \twas_shown: [],\n   99  }\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_runtrial.js:\n   49  \n   50      else if(TASK.Automator == 1){\n   51:         TQ = AM.AutomatorPreBuffer.TrialQueue[TASK.CurrentAutomatorStage]\n   52      } \n   53  \n   ..\n   98          frame.was_shown[q]=0\n   99      }; \n  100:     frame.current=0;\n  101  \n  102      //========= AWAIT SHOW FIXATION =========//\n  ...\n  115          frame.was_shown[q]=0\n  116      }\n  117:     frame.current=0;\n  118      if (FLAGS.waitingforTouches > 0){\n  119          await displayTrial(CANVAS.sequenceblank,CANVAS.tsequenceblank);\n  ...\n  127  } \n  128  \n  129: frame.current=0\n  130  \n  131  tsequenceactual = await displayTrial(CANVAS.screen_name_sequence,CANVAS.screen_timeon_sequence);\n  ...\n  146  \n  147  \n  148: console.log(TRIAL_NUMBER_FROM_TASKSTREAM_START, 'Stage', TASK.CurrentAutomatorStage, 'choice:', response, 'correct choice:', correctitem)\n  149  if (response == correctitem){ \n  150      correct = 1 \n  ...\n  167      for (var q = 0; q <= nreward-1; q++){\n  168          frame.was_shown=[];\n  169:         for (var q2 in CANVAS.screen_name_post_sequence){frame.was_shown[q2]=0}; frame.current=0;\n  170  \n  171          SP.playSound(2);\n  ...\n  186      CANVAS.tsequencepost[2] = CANVAS.tsequencepost[1]+TASK.PunishTimeOut;\n  187      frame.was_shown=[];\n  188:     for (var q in CANVAS.screen_name_post_sequence){frame.was_shown[q]=0}; frame.current=0;\n  189  \n  190      var p1 = displayTrial(CANVAS.screen_name_post_sequence,CANVAS.tsequencepost);\n  ...\n  205  TRIAL.CorrectItem.push(correctitem)\n  206  TRIAL.NReward.push(nreward)\n  207: TRIAL.AutomatorStage.push(TASK.CurrentAutomatorStage)\n  208  TRIAL.TSequenceDesired.push(tsequencedesired)\n  209  TRIAL.TSequenceActual.push(tsequenceactual)\n  ...\n  215  if (TASK.Automator == 1){\n  216  \n  217:     var current_stage = stageHash(TASK); \n  218:     AM.trialhistory.trainingstage.push(current_stage);\n  219      AM.trialhistory.starttime.push(starttime)\n  220      AM.trialhistory.response.push(response)\n  ...\n  231  \n  232  if ( _ms_since_last_trial_data_save > TRIALDATA_SAVE_TIMEOUT_PERIOD){ \n  233:     // console.log(_ms_since_last_trial_data_save/1000+'s since last trial data save. At trial'+ TRIAL_NUMBER_FROM_SESSION_START +'. automator stage:'+TASK.CurrentAutomatorStage)\n  234      DI.saveTrialDatatoDropbox(SESSION, DEVICE, TASK_ARCHIVE, CANVAS, TRIAL, FLAGS.debug_mode)\n  235      last_trial_data_save = performance.now()\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_screenfunctions.js:\n  220  \n  221  \t\t// If time to show new frame, \n  222: \t\tif (timestamp - start > screen_timeon_sequence[frame.current]){\n  223: \t\t\t//console.log('Frame =' + frame.current+'. Duration ='+(timestamp-start)+'. Timestamp = ' + timestamp)\n  224: \t\t\ttActual[frame.current] = Math.round(100*(timestamp - start))/100 //in milliseconds, rounded to nearest hundredth of a millisecond\n  225  \t\t\t// Move canvas in front\n  226  \t\t\tvar prev_canvasobj=CANVAS.obj[CANVAS.front]\n  227: \t\t\tvar curr_canvasobj=CANVAS.obj[screen_name_sequence[frame.current]]\n  228  \t\t\tif (CANVAS.front != \"blank\"){\n  229  \t\t\t\t// Move to back\n  230  \t\t\t\tprev_canvasobj.style.zIndex=\"0\";\n  231  \t\t\t} \n  232: \t\t\tif (screen_name_sequence[frame.current] != \"blank\"){\n  233  \t\t\t\tcurr_canvasobj.style.zIndex=\"100\";\n  234: \t\t\t\tCANVAS.front = screen_name_sequence[frame.current];\n  235  \t\t\t} // move to front\n  236  \t\t\telse{\n  ...\n  238  \t\t\t}\n  239  \t\t\t\n  240: \t\t\tframe.was_shown[frame.current]=1;\n  241: \t\t\tframe.current++;\n  242  \t\t}; \n  243  \t\t// continue if not all frames shown\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_utils.js:\n  121    Math.seedrandom(RNGseed)\n  122  \n  123:   var currentIndex = array.length, temporaryValue, randomIndex;\n  124  \n  125    // While there remain elements to shuffle...\n  126:   while (0 !== currentIndex) {\n  127  \n  128      // Pick a remaining element...\n  129:     randomIndex = Math.floor(Math.random() * currentIndex);\n  130:     currentIndex -= 1;\n  131  \n  132:     // And swap it with the current element.\n  133:     temporaryValue = array[currentIndex];\n  134:     array[currentIndex] = array[randomIndex];\n  135      array[randomIndex] = temporaryValue;\n  136    }\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/seedrandom.js:\n   24  \n   25  // Sets Math.random to an ARC4-based PRNG that is autoseeded using the\n   26: // current time, dom state, and other accumulated local entropy.\n   27  // The generated seed string is returned.\n   28  Math.seedrandom();\n   ..\n  153  When seedrandom() is called with zero args or a null seed, it uses a\n  154  seed drawn from the browser crypto object if present.  If there is no\n  155: crypto support, seedrandom() uses the current time, the native rng,\n  156  and a walk of several DOM objects to collect a few bits of entropy.\n  157  \n\n98 matches across 8 files\n\n\nSearching 14 files for \"frame.current\"\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_runtrial.js:\n   98          frame.was_shown[q]=0\n   99      }; \n  100:     frame.current=0;\n  101  \n  102      //========= AWAIT SHOW FIXATION =========//\n  ...\n  115          frame.was_shown[q]=0\n  116      }\n  117:     frame.current=0;\n  118      if (FLAGS.waitingforTouches > 0){\n  119          await displayTrial(CANVAS.sequenceblank,CANVAS.tsequenceblank);\n  ...\n  127  } \n  128  \n  129: frame.current=0\n  130  \n  131  tsequenceactual = await displayTrial(CANVAS.screen_name_sequence,CANVAS.screen_timeon_sequence);\n  ...\n  167      for (var q = 0; q <= nreward-1; q++){\n  168          frame.was_shown=[];\n  169:         for (var q2 in CANVAS.screen_name_post_sequence){frame.was_shown[q2]=0}; frame.current=0;\n  170  \n  171          SP.playSound(2);\n  ...\n  186      CANVAS.tsequencepost[2] = CANVAS.tsequencepost[1]+TASK.PunishTimeOut;\n  187      frame.was_shown=[];\n  188:     for (var q in CANVAS.screen_name_post_sequence){frame.was_shown[q]=0}; frame.current=0;\n  189  \n  190      var p1 = displayTrial(CANVAS.screen_name_post_sequence,CANVAS.tsequencepost);\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_screenfunctions.js:\n  220  \n  221  \t\t// If time to show new frame, \n  222: \t\tif (timestamp - start > screen_timeon_sequence[frame.current]){\n  223: \t\t\t//console.log('Frame =' + frame.current+'. Duration ='+(timestamp-start)+'. Timestamp = ' + timestamp)\n  224: \t\t\ttActual[frame.current] = Math.round(100*(timestamp - start))/100 //in milliseconds, rounded to nearest hundredth of a millisecond\n  225  \t\t\t// Move canvas in front\n  226  \t\t\tvar prev_canvasobj=CANVAS.obj[CANVAS.front]\n  227: \t\t\tvar curr_canvasobj=CANVAS.obj[screen_name_sequence[frame.current]]\n  228  \t\t\tif (CANVAS.front != \"blank\"){\n  229  \t\t\t\t// Move to back\n  230  \t\t\t\tprev_canvasobj.style.zIndex=\"0\";\n  231  \t\t\t} \n  232: \t\t\tif (screen_name_sequence[frame.current] != \"blank\"){\n  233  \t\t\t\tcurr_canvasobj.style.zIndex=\"100\";\n  234: \t\t\t\tCANVAS.front = screen_name_sequence[frame.current];\n  235  \t\t\t} // move to front\n  236  \t\t\telse{\n  ...\n  238  \t\t\t}\n  239  \t\t\t\n  240: \t\t\tframe.was_shown[frame.current]=1;\n  241: \t\t\tframe.current++;\n  242  \t\t}; \n  243  \t\t// continue if not all frames shown\n\n13 matches across 2 files\n\n\nSearching 14 files for \"CANVAS\" (case sensitive)\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/experiment_flow.js:\n   15      refreshCanvasSettings(TASK); \n   16    \n   17:     for (var i = 0; i <= CANVAS.names.length-1; i++) {\n   18:         setupCanvas(CANVAS.obj[CANVAS.names[i]]);\n   19      }\n   20      if (DEVICE.DevicePixelRatio !== 1){\n   21:         scaleCanvasforHiDPI(CANVAS.obj.sample);\n   22:         scaleCanvasforHiDPI(CANVAS.obj.test);\n   23      }\n   24  \n   25:     CANVAS.workspace = [\n   26          0,\n   27          0,\n   28:         CANVAS.obj[\"touchfix\"].width,\n   29:         CANVAS.obj[\"touchfix\"].height\n   30      ]\n   31  }\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk.html:\n  151  \t\n  152  \tDEVICE.DevicePixelRatio = window.devicePixelRatio || 1;\n  153: \tvar visiblecontext = CANVAS.obj[CANVAS.front].getContext(\"2d\");\n  154  \tvar backingStoreRatio = visiblecontext.webkitBackingStorePixelRatio ||\n  155  \t                            visiblecontext.mozBackingStorePixelRatio ||\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_dropbox.js:\n  440  \n  441  \t//================== WRITE JSON ==================//\n  442: \tasync saveTrialDatatoDropbox(SESSION, DEVICE, TASK_ARCHIVE, CANVAS, TRIAL, save_to_debug_directory){\n  443  \t\t// Add request to queue \n  444  \n  ...\n  447  \t\tdataobj.push(DEVICE)\n  448  \t\tdataobj.push(TASK_ARCHIVE)\n  449: \t\tdataobj.push(CANVAS)\n  450  \t\tdataobj.push(TRIAL)\n  451  \t\tvar datastr = JSON.stringify(dataobj); //no pretty print for now, saves space and data file is unwieldy to look at for larger numbers of trials\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_eventlisteners.js:\n  170  \tFLAGS.debug_mode = 0\n  171  \t\n  172: \trenderBlank(CANVAS.obj.blank)\n  173  \tdocument.querySelector(\"button[name=doneTestingTask]\").style.display = \"none\"\n  174  \treturn\n  ...\n  185  async function sync_data_listener(event){\n  186  \tconsole.log(\"Called data save from sync button\")\n  187: \tawait DI.saveTrialDatatoDropbox(TASK_ARCHIVE, CANVAS, TRIAL, FLAGS.debug_mode)\n  188  \tawait DI.saveTouchestoDropbox(FLAGS.debug_mode)\n  189  \n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_globalvariables.js:\n   73  \n   74  \n   75: var CANVAS = {}; \n   76: var CANVAS = {\n   77  \tnames: [\"blank\",\"sample\",\"test\",\"touchfix\",\"eyefix\",\"reward\",\"photoreward\",\"punish\"],\n   78  \tfront: \"blank\",\n   ..\n   90  \tobj: [],\n   91  }\n   92: for (var i in CANVAS.names){\n   93: \tCANVAS.obj[CANVAS.names[i]]=document.getElementById(\"canvas\" + CANVAS.names[i])\n   94  }\n   95  \n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_runtrial.js:\n   25      refreshCanvasSettings(TASK); \n   26  \n   27:     for (var i = 0; i <= CANVAS.names.length-1; i++) {\n   28:         setupCanvas(CANVAS.obj[CANVAS.names[i]]);\n   29      }\n   30      if (DEVICE.DevicePixelRatio !== 1){\n   31:         scaleCanvasforHiDPI(CANVAS.obj.sample);\n   32:         scaleCanvasforHiDPI(CANVAS.obj.test);\n   33      }\n   34  \n   35:     CANVAS.workspace = [\n   36          0,\n   37          0,\n   38:         CANVAS.obj[\"touchfix\"].width,\n   39:         CANVAS.obj[\"touchfix\"].height\n   40      ]\n   41  }\n   ..\n   72  DEVICE.YGridCenter = funcreturn[3]\n   73  \n   74: renderReward(CANVAS.obj.reward);\n   75: renderPunish(CANVAS.obj.punish);\n   76: renderBlank(CANVAS.obj.blank);\n   77  \n   78  //============ SELECT SAMPLE & TEST IMAGES ============//\n   ..\n   81  \n   82  \n   83: //============ AWAIT BUFFER CANVASES WITH SAMPLE & TEST IMAGES ============//\n   84  boundingBoxesTestOrder = await bufferTrialImages(sampleimage, testimages);\n   85  \n   ..\n   90  while (FLAGS.waitingforTouches > 0){\n   91      \n   92:     renderFixationUsingDot(\"white\", TASK.StaticFixationGridIndex, FixationRadius, CANVAS.obj.touchfix);\n   93      \n   94      // Start timer for this fixation render trial. \n   95      starttime=Math.round(performance.now());\n   96      frame.was_shown=[];\n   97:     for (var q in CANVAS.sequencepre){\n   98          frame.was_shown[q] = 0\n   99      }; \n  ...\n  101  \n  102      //========= AWAIT SHOW FIXATION =========//\n  103:     await displayTrial(CANVAS.sequencepre,CANVAS.tsequencepre);\n  104      SP.audiocontext.suspend()\n  105  \n  ...\n  112  \n  113      //========= AWAIT CLEAR FIXATION =========//\n  114:     for (var q in CANVAS.sequenceblank){\n  115          frame.was_shown[q]=0\n  116      }\n  117      frame.current_frame_idx=0;\n  118      if (FLAGS.waitingforTouches > 0){\n  119:         await displayTrial(CANVAS.sequenceblank,CANVAS.tsequenceblank);\n  120      } //blank out screen\n  121  } \n  ...\n  123  //============== AWAIT SHOW SAMPLE THEN TEST ==============//\n  124  frame.was_shown=[]\n  125: for (var q in CANVAS.screen_name_sequence){\n  126      frame.was_shown[q]=0\n  127  } \n  ...\n  129  frame.current_frame_idx=0\n  130  \n  131: tsequenceactual = await displayTrial(CANVAS.screen_name_sequence,CANVAS.screen_timeon_sequence);\n  132: tsequencedesired = CANVAS.screen_timeon_sequence\n  133  SP.audiocontext.suspend()\n  134  \n  ...\n  162  \n  163  if (correct == 1){\n  164:     CANVAS.screen_name_post_sequence[1]=\"reward\";\n  165:     CANVAS.tsequencepost[2] = CANVAS.tsequencepost[1]+RewardDuration*1000;\n  166  \n  167      for (var q = 0; q <= nreward-1; q++){\n  168          frame.was_shown=[];\n  169:         for (var q2 in CANVAS.screen_name_post_sequence){frame.was_shown[q2]=0}; frame.current_frame_idx=0;\n  170  \n  171          SP.playSound(2);\n  172:         var p1 = displayTrial(CANVAS.screen_name_post_sequence,CANVAS.tsequencepost)\n  173          if (ble.connected == false){\n  174              await Promise.all([p1])\n  ...\n  183  //PUNISH\n  184  else if (correct == 0) {\n  185:     CANVAS.screen_name_post_sequence[1] = \"punish\";\n  186:     CANVAS.tsequencepost[2] = CANVAS.tsequencepost[1]+TASK.PunishTimeOut;\n  187      frame.was_shown=[];\n  188:     for (var q in CANVAS.screen_name_post_sequence){frame.was_shown[q]=0}; frame.current_frame_idx=0;\n  189  \n  190:     var p1 = displayTrial(CANVAS.screen_name_post_sequence,CANVAS.tsequencepost);\n  191      var num_trials_to_buffer_in_punishperiod = 0\n  192      var p2 = TQ.buffer_trials(num_trials_to_buffer_in_punishperiod)\n  ...\n  232  if ( _ms_since_last_trial_data_save > TRIALDATA_SAVE_TIMEOUT_PERIOD){ \n  233      // console.log(_ms_since_last_trial_data_save/1000+'s since last trial data save. At trial'+ TRIAL_NUMBER_FROM_SESSION_START +'. automator stage:'+TASK.CurrentAutomatorStage)\n  234:     DI.saveTrialDatatoDropbox(SESSION, DEVICE, TASK_ARCHIVE, CANVAS, TRIAL, FLAGS.debug_mode)\n  235      last_trial_data_save = performance.now()\n  236  }\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_screenfunctions.js:\n   51  \t// Adjust delay period\n   52  \tif (TASK_entry.t_SampleOFF > 0){\n   53: \t\tCANVAS.screen_name_sequence = [\"blank\", \"sample\",\"blank\",\"test\"]\n   54: \t\tCANVAS.screen_timeon_sequence = [0,100,100+TASK_entry.t_SampleON,100+TASK_entry.t_SampleON+TASK_entry.t_SampleOFF]; \n   55  \t}\n   56  \telse if (TASK_entry.t_SampleOFF <= 0 ){\n   57: \t\tCANVAS.screen_name_sequence = [\"blank\",\"sample\",\"test\"]\n   58: \t\tCANVAS.screen_timeon_sequence = [0,100,100+TASK_entry.t_SampleON]; \n   59  \t}\n   60  \t\n   61  \t// Adjust length of reward screen based on reward amount \n   62: \tCANVAS.tsequencepost[2] = CANVAS.tsequencepost[1]+RewardDuration*1000;\n   63  }\n   64  \n   65  function writeTextonBlankCanvas(textstr,x,y){\n   66: \tvar blank_canvasobj=CANVAS.obj.blank\n   67  \tvar visible_ctxt = blank_canvasobj.getContext('2d')\n   68  \tvisible_ctxt.textBaseline = \"hanging\"\n   ..\n   76  function setupCanvas(canvasobj){\n   77  \t// center in page\n   78: \tcanvasobj.style.top=CANVAS.offsettop + \"px\";\n   79: \tcanvasobj.style.left=CANVAS.offsetleft + \"px\";\n   80: \tcanvasobj.width=windowWidth - CANVAS.offsetleft;\n   81: \tcanvasobj.height=windowHeight - CANVAS.offsettop;\n   82  \tcanvasobj.style.margin=\"0 auto\";\n   83  \tcanvasobj.style.display=\"block\"; //visible\n   ..\n  101  \t\tcanvasobj.width = oldWidth/DEVICE.CanvasRatio;\n  102  \t\tcanvasobj.height = oldHeight/DEVICE.CanvasRatio;\n  103: \t\tcanvasobj.style.width = windowWidth - CANVAS.offsetleft + \"px\";\n  104: \t\tcanvasobj.style.height = windowHeight - CANVAS.offsettop + \"px\";\n  105  \t\tcanvasobj.style.margin=\"0 auto\";\n  106  \t\tcontext.scale(1/DEVICE.CanvasRatio,1/DEVICE.CanvasRatio);\n  ...\n  128  \n  129  \t//center x & y grid within canvas\n  130: \tvar canvas_center_x = (document.body.clientWidth - CANVAS.offsetleft)*DEVICE.CanvasRatio*DEVICE.DevicePixelRatio/2\n  131  \tvar dx = canvas_center_x - DEVICE.CanvasRatio*ngridpoints/2*wd*gridscale; //left side of grid\n  132: \tvar canvas_center_y = (document.body.clientHeight - CANVAS.offsettop)*DEVICE.CanvasRatio*DEVICE.DevicePixelRatio/2\n  133  \tvar dy = canvas_center_y - DEVICE.CanvasRatio*ngridpoints/2*ht*gridscale; //top of grid\n  134  \tfor (var i=0; i<=xgrid.length-1; i++){\n  ...\n  141  \n  142  async function bufferTrialImages(sample_image, test_images){\n  143: \t//========== BUFFER SAMPLE CANVAS ==========//\n  144: \tvar canvasobj=CANVAS.obj.sample\n  145: \tvar context=CANVAS.obj.sample.getContext('2d'); \n  146  \tcontext.fillStyle=\"#7F7F7F\";  // Gray out before buffering sample\n  147  \t//context.fillRect(0,100, canvasobj.width,canvasobj.height); // 100 is for the photodiode bar at the top of the screen\n  148: \tawait renderImageOnCanvas(sample_image, TASK.SampleGridIndex, TASK.SampleScale, CANVAS.obj.sample)\n  149  \t\n  150  \n  ...\n  158  \t\t\n  159  \n  160: \t\tfuncreturn = await renderImageOnCanvas(test_images[i], TASK.ObjectGridMapping[i], TASK.TestScale, CANVAS.obj.test); \n  161  \t\tboundingBoxes.x.push(funcreturn[0]); \n  162  \t\tboundingBoxes.y.push(funcreturn[1]); \n  ...\n  196  \tybound=[ytop, ytop+ht*scale*DEVICE.CanvasRatio];\n  197  \n  198: \txbound[0]=xbound[0]+CANVAS.offsetleft;\n  199: \txbound[1]=xbound[1]+CANVAS.offsetleft;\n  200: \tybound[0]=ybound[0]+CANVAS.offsettop;\n  201: \tybound[1]=ybound[1]+CANVAS.offsettop;\n  202  \treturn [xbound, ybound]\n  203  }\n  ...\n  224  \t\t\ttActual[frame.current_frame_idx] = Math.round(100*(timestamp - start))/100 //in milliseconds, rounded to nearest hundredth of a millisecond\n  225  \t\t\t// Move canvas in front\n  226: \t\t\tvar prev_canvasobj=CANVAS.obj[CANVAS.front]\n  227: \t\t\tvar curr_canvasobj=CANVAS.obj[screen_name_sequence[frame.current_frame_idx]]\n  228: \t\t\tif (CANVAS.front != \"blank\"){\n  229  \t\t\t\t// Move to back\n  230  \t\t\t\tprev_canvasobj.style.zIndex=\"0\";\n  ...\n  232  \t\t\tif (screen_name_sequence[frame.current_frame_idx] != \"blank\"){\n  233  \t\t\t\tcurr_canvasobj.style.zIndex=\"100\";\n  234: \t\t\t\tCANVAS.front = screen_name_sequence[frame.current_frame_idx];\n  235  \t\t\t} // move to front\n  236  \t\t\telse{\n  237: \t\t\t\tCANVAS.front = \"blank\";\n  238  \t\t\t}\n  239  \t\t\t\n  ...\n  290  \tboundingBoxesFixation['y']=[]\n  291  \tboundingBoxesFixation['GridIndex']=[gridindex]\n  292: \tboundingBoxesFixation.x.push([xcent-dot_pixelradius+CANVAS.offsetleft, xcent+dot_pixelradius+CANVAS.offsetleft]);\n  293: \tboundingBoxesFixation.y.push([ycent-dot_pixelradius+CANVAS.offsettop, ycent+dot_pixelradius+CANVAS.offsettop]);\n  294  }\n  295  \n  296  function checkDisplayBounds(displayobject_coord){\n  297  \tvar outofbounds=0\n  298: \tif (displayobject_coord[0] < CANVAS.workspace[0] ||\n  299: \t\tdisplayobject_coord[1] < CANVAS.workspace[1] ||\n  300: \t\tdisplayobject_coord[2] > CANVAS.workspace[2] ||\n  301: \t\tdisplayobject_coord[3] > CANVAS.workspace[3]){\n  302  \t\toutofbounds=1\n  303  \t}\n\n94 matches across 7 files\n\n\nSearching 14 files for \"displayTrial\" (case sensitive)\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_runtrial.js:\n  101  \n  102      //========= AWAIT SHOW FIXATION =========//\n  103:     await displayTrial(CANVAS.sequencepre,CANVAS.tsequencepre);\n  104      SP.audiocontext.suspend()\n  105  \n  ...\n  117      frame.current_frame_idx=0;\n  118      if (FLAGS.waitingforTouches > 0){\n  119:         await displayTrial(CANVAS.sequenceblank,CANVAS.tsequenceblank);\n  120      } //blank out screen\n  121  } \n  ...\n  129  frame.current_frame_idx=0\n  130  \n  131: tsequenceactual = await displayTrial(CANVAS.screen_name_sequence,CANVAS.screen_timeon_sequence);\n  132  tsequencedesired = CANVAS.screen_timeon_sequence\n  133  SP.audiocontext.suspend()\n  ...\n  170  \n  171          SP.playSound(2);\n  172:         var p1 = displayTrial(CANVAS.screen_name_post_sequence,CANVAS.tsequencepost)\n  173          if (ble.connected == false){\n  174              await Promise.all([p1])\n  ...\n  188      for (var q in CANVAS.screen_name_post_sequence){frame.was_shown[q]=0}; frame.current_frame_idx=0;\n  189  \n  190:     var p1 = displayTrial(CANVAS.screen_name_post_sequence,CANVAS.tsequencepost);\n  191      var num_trials_to_buffer_in_punishperiod = 0\n  192      var p2 = TQ.buffer_trials(num_trials_to_buffer_in_punishperiod)\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_screenfunctions.js:\n  204  \n  205  \n  206: function displayTrial(screen_name_sequence, screen_timeon_sequence){\n  207  \tvar resolveFunc\n  208  \tvar errFunc\n\n6 matches across 2 files\n\n\nSearching 15 files for \"waitforEvent\" (case sensitive)\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_eventlisteners.js:\n   74  \t\t\t\t\t\t\tFLAGS.acquiredTouch = 0\n   75  \t\t\t\t\t\t\tFLAGS.touchGeneratorCreated = 0 //block other callbacks\n   76: \t\t\t\t\t\t\twaitforEvent.next({type: \"touchheld\"})\n   77  \t\t\t\t\t\t},touchduration)\n   78  \t\t\t\t\t} //if touch hold required\n   ..\n  111  \t\tresolveFunc(return_event)\n  112  \t} //generator\n  113: \twaitforEvent = waitforeventGenerator(); // start async function\n  114  \tFLAGS.touchGeneratorCreated = 1\n  115  \t////console.log('GENERATOR CREATED waiting for ntouches',FLAGS.waitingforTouches)\n  116: \twaitforEvent.next(); //move out of default state\n  117  \treturn p;\n  118  }\n  ...\n  131  \telse {\n  132  \t\t////console.log('touchstart_listener called')\n  133: \t\twaitforEvent.next(event)\n  134  \t}\n  135  } //touchstart_listener\n  ...\n  141  \t} //if no click generator created\n  142  \telse {\n  143: \t\twaitforEvent.next(event)\n  144  \t}\n  145  } //touchmove_listener\n  ...\n  151  \t} //if no click generator created\n  152  \telse {\n  153: \t\twaitforEvent.next(event)\n  154  \t}\n  155  } //touchend_listener\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_globalvariables.js:\n   99  var boundingBoxesFixation={}; //where the fixation touch targets are on the canvas\n  100  var waitforClick; //variable to hold generator\n  101: var waitforEvent; //variable to hold generator\n  102  var touchTimer; //variable to hold timer\n  103  var xcanvascenter=[];\n\n7 matches across 2 files\n\n\nSearching 15 files for \"editParamsPromise\" (case sensitive)\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_eventlisteners.js:\n  231  \n  232  // Promise: Edit Parameters Text\n  233: function editParamsPromise(){\n  234  \tvar resolveFunc\n  235  \tvar errFunc\n\n1 match in 1 file\n\n\nSearching 14 files for \"TASK_reader\" (case sensitive)\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk.html:\n  192  \tawait subjectIDPromise()\n  193  \tParamFilePath = PARAM_DIRPATH + SESSION.Subject + \"_params.txt\";\n  194: \tTASK_reader = new ParamFile(ParamFilePath, DI)\n  195: \tawait TASK_reader.build()\n  196: \tTASK = await TASK_reader.get()\n  197  \t\n  198  \t\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_runtrial.js:\n   11  }\n   12  \n   13: if(TASK_reader.refresh_task_flag == true){\n   14:     TASK_reader.refresh_task_flag = false\n   15      var old_ImageBagsSample = TASK.ImageBagsSample\n   16      var old_ImageBagsTest = TASK.ImageBagsTest\n   17  \n   18:     TASK = await TASK_reader.get()\n   19  \n   20      if(!old_ImageBagsTest.equals(TASK.ImageBagsTest) || !old_ImageBagsSample.equals(TASK.ImageBagsSample)){\n   ..\n  262  }\n  263  if (_ms_since_last_TASK_check > TASK_CHECK_TIMEOUT_PERIOD){\n  264:     TASK_reader.check_status()\n  265      last_TASK_check = performance.now()\n  266  }\n\n7 matches across 2 files\n\n\nSearching 14 files for \"ParamFile\" (case sensitive)\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk.html:\n  191  \tsubjectdialog.showModal()\n  192  \tawait subjectIDPromise()\n  193: \tParamFilePath = PARAM_DIRPATH + SESSION.Subject + \"_params.txt\";\n  194: \tTASK_reader = new ParamFile(ParamFilePath, DI)\n  195  \tawait TASK_reader.build()\n  196  \tTASK = await TASK_reader.get()\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_dropbox.js:\n   11  //================== LIST FILES ==================//\n   12  // Asynchronous: Get file list from dropbox directory\n   13: class ParamFile{\n   14  \tconstructor(filepath, DI){\n   15  \t\tthis.filepath = filepath \n   ..\n   44  \t\t}\n   45  \t\tcatch(error){\n   46: \t\t\tconsole.error('Error at ParamFile.get()', error)\n   47  \t\t}\n   48  \t\treturn this.__contents \n   ..\n  521  \tasync saveParameterstoDropbox() {\n  522  \t\ttry{\n  523: \t\t\tvar savepath = ParamFilePath\n  524  \t\t    var datastr = JSON.stringify(TASK ,null,' ');\n  525  \n  ...\n  530  \t\t\t\n  531  \t\t\tvar filemeta = await this.dbx.filesGetMetadata({path: savepath})\n  532: \t\t\tParamFileRev = filemeta.rev\n  533  \t\n  534: \t\t\tconsole.log(\"TASK written to disk as \"+ParamFilePath+\". Size: \" + response.size)\n  535  \t\t\treturn 0; //need2saveParameters\n  536  \t\t}\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_globalvariables.js:\n   17  Y = -1\n   18  \n   19: var ParamFilePath = ''; \n   20: var ParamFileRev = ''; // Tracks revision number of the TASK file on disk. \n   21  \n   22  TASK_ARCHIVE_COUNTER = 0 // attached to trial data\n\n10 matches across 3 files\n\n\nSearching 14 files for \"refresh_task_flag\" (case sensitive)\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_dropbox.js:\n   17  \t\tthis.__contents = undefined \n   18  \t\tthis.__rev = undefined\n   19: \t\tthis.refresh_task_flag = true\n   20  \t}\n   21  \tasync build(){\n   ..\n   29  \t\tvar filemeta = await this.__DI.dbx.filesGetMetadata({path: this.filepath})\n   30  \t\tif (this.__rev != filemeta.rev){\n   31: \t\t\tthis.refresh_task_flag = true\n   32  \t\t\tthis.__rev = filemeta.rev\n   33  \t\t}\n   ..\n   38  \t\t\tvar filemeta = await this.__DI.dbx.filesGetMetadata({path: this.filepath})\n   39  \t\t\tif (this.__rev != filemeta.rev){\n   40: \t\t\t\tthis.refresh_task_flag = true\n   41  \t\t\t\tvar datastring_updated = await this.__DI.loadTextFilefromDropbox(this.__DI.dbx, this.filepath)\n   42  \t\t\t\tthis.__contents = JSON.parse(datastring_updated)\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_runtrial.js:\n   11  }\n   12  \n   13: if(TASK_reader.refresh_task_flag == true){\n   14:     TASK_reader.refresh_task_flag = false\n   15      var old_ImageBagsSample = TASK.ImageBagsSample\n   16      var old_ImageBagsTest = TASK.ImageBagsTest\n\n5 matches across 2 files\n\n\nSearching 14 files for \"xyt\" (case sensitive)\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_eventlisteners.js:\n   28  \tfunction *waitforeventGenerator(){\n   29  \t\tvar touchevent\n   30: \t\tvar return_event = {type: \"\", cxyt: []}\n   31  \t\twhile (true){\n   32  \n   ..\n   49  \n   50  \t\t\t// Get CHOICE,XYT\n   51: \t\t\tvar touchcxyt = [-1, -1, -1, -1]\n   52  \t\t\tif (FLAGS.waitingforTouches > 0 && touchevent.type != \"touchend\" && touchevent.type != \"mouseup\"){\n   53  \t\t\t\tvar chosenbox = -1\n   ..\n   70  \t\t\t\t\t}//if in bounding box\n   71  \t\t\t\t}//for q boxes\n   72: \t\t\t\tvar touchcxyt = [chosenGridIndex,x,y,Math.round(performance.now())];\t\t\n   73  \t\t\t}\n   74  \n   ..\n   80  \t\t\t\t\t\n   81  \t\t\t\t\t//do nothing for touching outside boxes\n   82: \t\t\t\t\ttouchcxyt[0] = -1\n   83  \t\t\t\t\n   84  \t\t\t\t} //if touched outside box\n   ..\n  125  \t\t} //while events\n  126  \t\t////console.log('RETURN_EVENT', return_event.type)\n  127: \t\treturn_event.cxyt = touchcxyt\n  128  \t\tresolveFunc(return_event)\n  129  \t} //generator\n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_runtrial.js:\n  145  var race_return = await Promise.race([p1,p2])\n  146  responsetouchevent = race_return.type\n  147: response = race_return.cxyt[0] // grid number of response\n  148  \n  149  \n\n/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_utils.js:\n  211    return new Promise(\n  212      function(resolve, reject){\n  213:       var timer_return = {type: \"TimeOut\", cxyt: [-1,-1,-1,-1]}\n  214        setTimeout(function(){resolve(timer_return)},timeout)\n  215      })\n\n8 matches across 3 files\n",
			"settings":
			{
				"buffer_size": 341135,
				"line_ending": "Unix",
				"name": "Find Results",
				"scratch": true
			}
		},
		{
			"file": "mkturk_screenfunctions.js",
			"settings":
			{
				"buffer_size": 11520,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "mkturk_eventlisteners.js",
			"settings":
			{
				"buffer_size": 7071,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "screen_sequence.js",
			"settings":
			{
				"buffer_size": 621,
				"encoding": "UTF-8",
				"line_ending": "Unix",
				"name": "class ScreenSequence"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 367.0,
		"last_filter": "Package Control: ",
		"selected_items":
		[
			[
				"Package Control: ",
				"Package Control: Install Package"
			],
			[
				"Package Control: c",
				"Package Control: List Packages"
			],
			[
				"install",
				"Package Control: Install Package"
			]
		],
		"width": 392.0
	},
	"console":
	{
		"height": 126.0,
		"history":
		[
			"import urllib.request,os,hashlib; h = 'df21e130d211cfc94d9b0905775a7c0f' + '1e3d39e33b79698005270310898eea76'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/experiment_flow.js",
		"/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk.html",
		"/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_runtrial.js",
		"/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_dropbox.js",
		"/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_hardware.js",
		"/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/liveplot_googlecharts.js",
		"/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/liveplot_utils.js",
		"/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_utils.js",
		"/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_TrialQueue.js",
		"/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_installsettings.js",
		"/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_eventlisteners.js",
		"/Users/michaellee/Dropbox (MIT)/Apps/MonkeyTurk_mil_app/test.txt",
		"/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_automator.js",
		"/Users/michaellee/dicarlo5/public_html/MonkeyTurk/mkturk/public/mkturk_bluetooth.js",
		"/Users/michaellee/Dropbox (MIT)/MonkeyTurk/parameterfiles/subjects/Zico_params.txt",
		"/Users/michaellee/Dropbox (MIT)/PrimatePsychophysics/BehavioralComparisons.py",
		"/Users/michaellee/Dropbox (MIT)/PrimatePsychophysics/Analyses/BehavioralComparisons.py",
		"/Users/michaellee/Dropbox (MIT)/PrimatePsychophysics/.git_ignore",
		"/Users/michaellee/Dropbox (MIT)/ModelTurk/SupervisedModels/SupervisedModel.py",
		"/Users/michaellee/Dropbox (MIT)/ModelTurk/Wedjat/PolicyGradContinuous.py",
		"/Users/michaellee/Dropbox (MIT)/ModelTurk/Wedjat/QLearningGaussianContinuous.pyc",
		"/Volumes/mil/ModelTurk/SupervisedModels/OmniglotVinyals.py",
		"/Users/michaellee/Dropbox (MIT)/ModelTurk/SupervisedModels/VinyalsBaselineClassifier.py",
		"/Volumes/mil/ModelTurk/Science/FewShotSupervised/RunBaselineClassifier.py",
		"/Volumes/mil/ModelTurk/SupervisedModels/VinyalsBaselineClassifier.py",
		"/Users/michaellee/Dropbox (MIT)/MutantBakery/.gitignore",
		"/Users/michaellee/Dropbox (MIT)/ModelTurk/SupervisedModels/test_tensorboard.py",
		"/Users/michaellee/Dropbox (MIT)/ModelTurk/TaskStreams/Generator.py",
		"/Users/michaellee/Dropbox (MIT)/ModelTurk/Wedjat/NwayModels_TF.py",
		"/Users/michaellee/Dropbox (MIT)/ModelTurk/Wedjat/XYRegressorsNull.py",
		"/Users/michaellee/Dropbox (MIT)/ModelTurk/Wedjat/QLearningContinuous.py",
		"/Users/michaellee/Dropbox (MIT)/ModelTurk/Wedjat/MANN.py",
		"/Users/michaellee/Dropbox (MIT)/ModelTurk/Wedjat/RLModels.py",
		"/Users/michaellee/Dropbox (MIT)/ModelTurk/Wedjat/QLearningGaussianContinuous.py",
		"/Users/michaellee/Dropbox (MIT)/ModelTurk/Wedjat/TD_RLModels.py",
		"/Users/michaellee/Dropbox (MIT)/ModelTurk/Wedjat/RLModels_Continuous.py",
		"/Users/michaellee/Dropbox (MIT)/ModelTurk/Science/Localization/RegressionTask.py",
		"/Users/michaellee/Dropbox (MIT)/ModelTurk/Wedjat/XYModelsRewardMap.py",
		"/Users/michaellee/Dropbox (MIT)/ModelTurk/Wedjat/XYBasisNull.py",
		"/Users/michaellee/Dropbox (MIT)/ModelTurk/Wedjat/XYBasisRL.py",
		"/Users/michaellee/Dropbox (MIT)/ModelTurk/Wedjat/RandomModel.py",
		"/Users/michaellee/Dropbox (MIT)/ModelTurk/Science/Allocation/AllocationExperiment.py",
		"/Users/michaellee/Dropbox (MIT)/ModelTurk/Science/Localization/LocalizationContinuous.py",
		"/Users/michaellee/Dropbox (MIT)/ModelTurk/Science/Localization/Localization.py",
		"/Volumes/mil/ModelTurk/Science/Allocation/Run_SpecificAllocation.py",
		"/Users/michaellee/Dropbox (MIT)/ModelTurk/Wedjat/Model.py",
		"/Users/michaellee/Dropbox (MIT)/ModelTurk/Science/Allocation/Run_AllocationSim.py",
		"/Users/michaellee/Dropbox (MIT)/ModelTurk/TaskStreams/Experiment.py",
		"/Users/michaellee/Dropbox (MIT)/ModelTurk/Science/Localization/Run_LocalizationSim.py",
		"/Users/michaellee/Dropbox (MIT)/ModelTurk/Wedjat/XYModelsNull.py",
		"/Users/michaellee/Dropbox (MIT)/ModelTurk/Wedjat/NwayModelsNull.py",
		"/Users/michaellee/Dropbox (MIT)/ModelTurk/Wedjat/Ng2wayModelsNull.py",
		"/Users/michaellee/Dropbox (MIT)/ModelTurk/Science/Allocation/Run_AllocationSim_nocache.py",
		"/Users/michaellee/Dropbox (MIT)/ModelTurk/UserParams.py",
		"/Users/michaellee/Dropbox (Personal)/_Basics/edifices of the sun/EDIFICES OF THE SUN",
		"/Users/michaellee/Dropbox (MIT)/ModelTurk/Science/Allocation/Run_AllocationSim7.py",
		"/Users/michaellee/Dropbox (MIT)/ModelTurk/Science/Allocation/Run_AllocationSim6.py",
		"/Users/michaellee/Dropbox (MIT)/ModelTurk/Science/Allocation/Run_AllocationSim5.py",
		"/Users/michaellee/Dropbox (MIT)/ModelTurk/Science/Allocation/Run_AllocationSim4.py",
		"/Users/michaellee/Dropbox (MIT)/ModelTurk/Science/Allocation/Run_AllocationSim3.py",
		"/Users/michaellee/Dropbox (MIT)/ModelTurk/Science/Allocation/Run_AllocationSim2.py",
		"/Users/michaellee/Dropbox (MIT)/ModelTurk/Science/Allocation/plot_bestmodel_perf_vs_task.py",
		"/Volumes/mil/ModelTurk/Science/Allocation/Run_AllocationSim2.py",
		"/Volumes/mil/ModelTurk/Science/Allocation/plot_bestmodel_perf_vs_task.py",
		"/Volumes/mil/ModelTurk/Science/Allocation/Run_AllocationSim4.py",
		"/Volumes/mil/ModelTurk/Science/Allocation/Run_AllocationSim3.py",
		"/Volumes/mil/ModelTurk/Science/Allocation/Run_AllocationSim.py",
		"/Volumes/mil/ModelTurk/Science/Allocation/Run_AllocationSim5.py",
		"/Volumes/mil/ModelTurk/Wedjat/Model.py",
		"/Volumes/mil/ModelTurk/Wedjat/NwayModelsNull.py",
		"/Volumes/mil/ModelTurk/Science/Allocation/AllocationExperiment.py",
		"/Volumes/mil/ModelTurk/utils/util_functions.py",
		"/Volumes/mil/ModelTurk/TaskStreams/TaskStream.py",
		"/Volumes/mil/ModelTurk/TaskStreams/Experiment.py",
		"/Volumes/mil/ModelTurk/TaskStreams/parallelization_scraps.py",
		"/Volumes/mil/ModelTurk/TaskStreams/Generator.py",
		"/Users/michaellee/python_scratch/test_parallel.py",
		"/Volumes/mil/ModelTurk/TaskStreams/ExperimentV2.py",
		"/Volumes/mil/ModelTurk/TaskStreams/CreateAllocationExperiment.py",
		"/Volumes/mil/ModelTurk/Wedjat/ModelArchetype.py",
		"/Volumes/mil/ModelTurk/TaskStreams/TaskStreamTemplate.py",
		"/Volumes/mil/ModelTurk/Examples/allocationTaskStream_nullmodel.py",
		"/Volumes/mil/ModelTurk/Examples/allocationTask_svm_archetype.py",
		"/Volumes/mil/ModelTurk/TaskStreams/TaskStreamsTemplateV2.py",
		"/Volumes/mil/ModelTurk/Wedjat/NwayModels_TF.py",
		"/Volumes/mil/ModelTurk/Wedjat/NwayModels.py",
		"/Volumes/mil/ModelTurk/Examples/allocationTaskStream_evalArchetype.py",
		"/Volumes/mil/ModelTurk/Examples/allocationTaskStream_tfmodel.py",
		"/Volumes/mil/ModelTurk/AnalysisCode/viz.py",
		"/Volumes/mil/ModelTurk/TaskStreams/BehavioralTrace.py",
		"/Volumes/mil/ModelTurk/Wedjat/ModelTemplate.py",
		"/Volumes/mil/jupyter_notebooks/SalsaSecreta/ReadoutModelFull_masking.py",
		"/Volumes/mil/ModelTurk/TaskStreams/AllocationTaskStream.py",
		"/Volumes/mil/ModelTurk/TaskStreams/README.md",
		"/Volumes/mil/jupyter_notebooks/Allocation/ObjectMedleyTask_OnlineSVM_getslabels_rng0",
		"/Volumes/mil/jupyter_notebooks/Allocation/AlloTask.py",
		"/Volumes/mil/jupyter_notebooks/Allocation/AlloModels.py",
		"/Volumes/mil/jupyter_notebooks/SalsaSecreta/Task.py",
		"/Volumes/mil/Salsa/Task.py",
		"/Volumes/mil/jupyter_notebooks/Allocation/RunModel.py",
		"/Volumes/mil/jupyter_notebooks/SalsaSecreta/Evaluate_SVM.py",
		"/Volumes/mil/Salsa/batch_runs/EvaluateModelSpace.py",
		"/Volumes/mil/Salsa/Evaluate_SVM.py",
		"/Volumes/mil/Salsa/EncodingModel.py",
		"/Volumes/mil/Salsa/batch_runs/EvaluateMutator.py",
		"/Volumes/mil/Salsa/ReadoutModelFull_masking.py",
		"/Volumes/mildata/mldata/mldata/mldata/sets/MLdataTemplate.py",
		"/Volumes/mildata/mldata/mldata/mldata/sets/mut.py",
		"/Volumes/mil/jupyter_notebooks/SalsaSecreta/batch_runs/EvaluateModelSpace.py",
		"/Volumes/mil/jupyter_notebooks/SalsaSecreta/EncodingModel.py",
		"/Volumes/mil/matplotlibrc.py",
		"/Volumes/mil/jupyter_notebooks/SalsaSecreta/Trace.py",
		"/Volumes/mil/jupyter_notebooks/SalsaSecreta/ReadoutModelFull.py",
		"/Users/michaellee/Dropbox (MIT)/jupyter_notebooks/SalsaSecreta/Task (BRAIN-AND-COG-SIX-THIRTY-NINE.MIT.EDU's conflicted copy 2017-05-11).py",
		"/Users/michaellee/Dropbox (MIT)/jupyter_notebooks/SalsaSecreta/ReadoutModel.py",
		"/Users/michaellee/mh17/mturkutils/experiments/mutator_SR/web/general_SR_2way_nb.html",
		"/Users/michaellee/mh17/mturkutils/experiments/mutator_SR/clean_interface.py",
		"/Users/michaellee/mh17/mturkutils/experiments/mutator_SR/clean_batchrun.py",
		"/Users/michaellee/Dropbox (Personal)/_Basics/edifices of the sun/edifices_characters",
		"/Users/michaellee/Dropbox (Personal)/_Basics/edifices of the sun/edifices_outline.txt",
		"/Users/michaellee/Dropbox (Personal)/_Basics/edifices of the sun/edifices_world",
		"/Users/michaellee/Dropbox (Personal)/_Basics/edifices of the sun/Chapter6_Dragon.txt",
		"/Users/michaellee/Dropbox (Personal)/_Basics/edifices of the sun/Chapter7_End.txt",
		"/Users/michaellee/Dropbox (Personal)/_Basics/edifices of the sun/Chapter5_Anima.txt",
		"/Users/michaellee/Dropbox (Personal)/_Basics/edifices of the sun/Chapter3_Hole.txt",
		"/Users/michaellee/Dropbox (Personal)/_Basics/edifices of the sun/Chapter4_Dopa.txt",
		"/Users/michaellee/Dropbox (Personal)/_Basics/edifices of the sun/Chapter2_DanceDanceDance.txt",
		"/Users/michaellee/Dropbox (Personal)/_Basics/edifices of the sun/Chapter1_Falls.txt"
	],
	"find":
	{
		"height": 35.0
	},
	"find_in_files":
	{
		"height": 93.0,
		"where_history":
		[
			""
		]
	},
	"find_state":
	{
		"case_sensitive": true,
		"find_history":
		[
			"xyt",
			"refresh_task_flag",
			"ParamFile",
			"TASK_reader",
			"while(",
			"editParamsPromise",
			"yield",
			"resolveFunc",
			"waitforEvent",
			".next",
			"yield",
			"displayTrial",
			"todo",
			":",
			"names: [\"blank\",\"sample\",\"test\",\"touchfix\",\"eyefix\",\"reward\",\"photoreward\",\"punish\"],\n\tfront: \"blank\",\n\tsequenceblank: [\"blank\",\"blank\"], \n\ttsequenceblank: [0,50], \n\tsequencepre: [\"touchfix\"],\n\ttsequencepre: [0],\n\tscreen_name_sequence: [\"blank\",\"sample\",\"blank\",\"test\"], // blank, sample, blank, test\n\tscreen_timeon_sequence: NaN, \n\tscreen_name_post_sequence: [\"blank\",\"reward\",\"blank\"], // blank, reward\n\ttsequencepost: [0,50,100],\n\theadsupfraction: NaN,\n\toffsetleft: 0,\n\toffsettop: 0,\n\tobj: [],",
			"CANVAS",
			"frame.current",
			"current",
			"shown",
			"frame.shown",
			"displaytrial",
			"displayTrial",
			"sequencepre",
			"CANVAS.sequencepre",
			"CANVAS",
			"frame",
			"renderFixationUsingDot",
			"TASK =",
			"need2loadparameters",
			"correct",
			"canvastouchfix",
			"renderFixationUsingDot",
			"CANVAS",
			".t_SampleON",
			".t_SampleOn",
			".t_SampleOff",
			"doneTestingTask_listener",
			"renderBlank",
			"visiblecanvasobj",
			"CANVAS",
			"FLAGS.need2loadparameters",
			"FLAGS.need2load",
			"saveParameterstoDropbox",
			"FLAGS.need2saveParameters",
			"scaleCanvasforHiDPI",
			"FLAGS.need2loadParameters",
			"FLAGS.need2saveParameters",
			"FLAGS.need2loadParameters",
			"CURRTRIAL",
			"refreshCanvasSettings",
			"sequenceblank",
			"displayTrial",
			"tsequencepre",
			"sequencepost",
			"tsequencepost",
			"CANVAS.tsequence",
			".SampleON",
			".SampleOFF",
			".SampleON",
			"TASK_entry.SampleOFF",
			"CANVAS.sequence",
			"refreshCanvasSettings",
			"starting load of",
			"CANVAS.headsupfraction",
			"refreshCanvasSettings",
			"canvasheadsup",
			"setupCanvasHeadsUp",
			"TASK_reader.get",
			"dbx",
			"canvasheadsup",
			"setupCanvasHeadsUp",
			"loadparametersfromdropbox",
			"DB",
			"checkIfFileChangedOnDisk",
			"changedon",
			"FLAGS.need2loadParameters = DB.checkIfFileChangedOnDisk(ParamFilePath, ParamFileRev)\ncheckiffilechanged",
			"paramfilerev",
			"saveParameterTexttoDropbox",
			"paramfilerev",
			"loadParametersfromDropbox",
			"DropboxWriter",
			"DW",
			"RewardDuration",
			"refreshCanvasSettings",
			"currtrial.sampleindex",
			"timeout",
			"TASK.CurrentAutomatorStage",
			"get_trial",
			"CURRTRIAL.correctitem",
			"stage",
			"boundingBoxes",
			"renderImageOnCanvas",
			"boundingBoxesFixation",
			"boundingboxes",
			"correctitem",
			"boundingboxes",
			"touchhold_promise",
			"boundingBoxesTestOrder",
			"bufferTrialImages",
			"boundingBoxes",
			"CURRTRIAL.correctitem",
			"chosenbox",
			"touchhold_promise",
			"boundingboxesChoice",
			"boundingboxes",
			"bufferTrialImages",
			"boundingBoxesChoice",
			"boundingBoxes",
			"touchhold_promise",
			"CURRTRIAL.response",
			"buffertrialimages",
			"sync data",
			"cxyt",
			"return_event",
			"boundingBoxesChoice",
			"touchhold_promise",
			"CURRTRIAL.response",
			"touchhold_promise",
			"CURRTRIAL.response",
			"CURRTRIAL.correctitem",
			"bufferTrialImages",
			"correct_index",
			"renderBlankWithGridMarkers",
			"TestGridIndex",
			"renderImageOnCanvas",
			"bufferTrialImages",
			"CURRTRIAL",
			"get_trial"
		],
		"highlight": false,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"displayScreenSequence",
			"frame.current_frame_idx",
			"frame.was_shown",
			".t_SampleOFF",
			"screen_name_post_sequence",
			"CANVAS.screen_timeon_sequence",
			".t_SampleON",
			".t_SampleOff",
			"CANVAS.screen_name_sequence",
			"DI",
			"DropboxInterface",
			"DB",
			"_ObjectGridMapping",
			"ObjectGridMapping",
			"TRIAL_NUMBER_FROM_TASKSTREAM_START",
			"TASK",
			"checkIfParameterFileChangedOnDisk",
			"ParamFilePath",
			"ParamFileRev",
			"ParamFileName",
			"TRIAL_NUM_TASKSTREAM",
			"TASK.FixationRadius",
			"DEVICE.BatteryLDT",
			"SESSION.TrialDataFileName",
			"SESSION.CurrentDate",
			"SESSION.UnixTimestampAtStart",
			"SESSION.Subject",
			"DEVICE.source_ImageWidthPixels",
			"DEVICE.source_ImageHeightPixels",
			"DEVICE.YGridCenter",
			"DEVICE.XGridCenter",
			"DEVICE.CanvasRatio",
			"DEVICE.DevicePixelRatio",
			"Device.DevicePixelRatio",
			"TRIAL.trial_num_Session",
			"trial_num_TaskStream",
			"CURRTRIAL.trial_num_Session",
			"CURRTRIAL.trial_number_Session",
			"trial_number_TaskStream",
			"this.samplingRNGseed",
			"TASK.samplingRNGseed",
			"breathed",
			"save_idx_counter:save_idx_counter + len(train_indices)"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"sheets":
			[
			]
		},
		{
			"selected": 7,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "mkturk_bluetooth.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 9766,
						"regions":
						{
						},
						"selection":
						[
							[
								5168,
								5168
							]
						],
						"settings":
						{
							"WordCount":
							{
								"changes": -1,
								"modified": true,
								"selection": true,
								"status": -1,
								"syntax": "javascript"
							},
							"syntax": "Packages/JavaScript/JavaScript.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2026.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "mkturk_dropbox.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 16648,
						"regions":
						{
						},
						"selection":
						[
							[
								538,
								555
							]
						],
						"settings":
						{
							"WordCount":
							{
								"changes": -1,
								"modified": true,
								"selection": true,
								"status": -1,
								"syntax": "javascript"
							},
							"syntax": "Packages/JavaScript/JavaScript.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "mkturk.html",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 9715,
						"regions":
						{
						},
						"selection":
						[
							[
								8365,
								8365
							]
						],
						"settings":
						{
							"WordCount":
							{
								"changes": 0,
								"count": 228,
								"modified": false,
								"selection": false,
								"status": -1,
								"syntax": "plain text"
							},
							"syntax": "Packages/HTML/HTML.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 2077.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "mkturk_runtrial.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 9198,
						"regions":
						{
						},
						"selection":
						[
							[
								77,
								77
							]
						],
						"settings":
						{
							"WordCount":
							{
								"changes": -1,
								"modified": true,
								"selection": true,
								"status": -1,
								"syntax": "javascript"
							},
							"syntax": "Packages/JavaScript/JavaScript.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "mkturk_automator.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 11174,
						"regions":
						{
						},
						"selection":
						[
							[
								1185,
								1185
							]
						],
						"settings":
						{
							"WordCount":
							{
								"changes": -1,
								"modified": true,
								"selection": true,
								"status": -1,
								"syntax": "javascript"
							},
							"syntax": "Packages/JavaScript/JavaScript.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 34.0,
						"zoom_level": 1.0
					},
					"stack_index": 11,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "mkturk_TrialQueue.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6182,
						"regions":
						{
						},
						"selection":
						[
							[
								453,
								453
							]
						],
						"settings":
						{
							"WordCount":
							{
								"changes": -1,
								"modified": true,
								"selection": true,
								"status": -1,
								"syntax": "javascript"
							},
							"syntax": "Packages/JavaScript/JavaScript.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "mkturk_installsettings.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2157,
						"regions":
						{
						},
						"selection":
						[
							[
								2075,
								2075
							]
						],
						"settings":
						{
							"WordCount":
							{
								"changes": -1,
								"modified": true,
								"selection": true,
								"status": -1,
								"syntax": "javascript"
							},
							"syntax": "Packages/JavaScript/JavaScript.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "mkturk_globalvariables.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4668,
						"regions":
						{
						},
						"selection":
						[
							[
								456,
								456
							]
						],
						"settings":
						{
							"WordCount":
							{
								"changes": -1,
								"modified": true,
								"selection": true,
								"status": -1,
								"syntax": "javascript"
							},
							"syntax": "Packages/JavaScript/JavaScript.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 17.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "mkturk_ImageBuffer.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3167,
						"regions":
						{
						},
						"selection":
						[
							[
								1093,
								1093
							]
						],
						"settings":
						{
							"WordCount":
							{
								"changes": -1,
								"modified": true,
								"selection": true,
								"status": -1,
								"syntax": "javascript"
							},
							"syntax": "Packages/JavaScript/JavaScript.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 12,
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "mkturk_utils.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7739,
						"regions":
						{
						},
						"selection":
						[
							[
								7297,
								7305
							]
						],
						"settings":
						{
							"WordCount":
							{
								"changes": -1,
								"modified": true,
								"selection": true,
								"status": -1,
								"syntax": "javascript"
							},
							"syntax": "Packages/JavaScript/JavaScript.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3513.0,
						"zoom_level": 1.0
					},
					"stack_index": 14,
					"type": "text"
				},
				{
					"buffer": 10,
					"file": "seedrandom.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 13992,
						"regions":
						{
						},
						"selection":
						[
							[
								759,
								759
							]
						],
						"settings":
						{
							"WordCount":
							{
								"changes": -1,
								"modified": true,
								"selection": true,
								"status": -1,
								"syntax": "javascript"
							},
							"syntax": "Packages/JavaScript/JavaScript.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 4811.0,
						"zoom_level": 1.0
					},
					"stack_index": 13,
					"type": "text"
				}
			]
		},
		{
			"selected": 1,
			"sheets":
			[
				{
					"buffer": 11,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 341135,
						"regions":
						{
							"match":
							{
								"flags": 112,
								"regions":
								[
									[
										151,
										156
									],
									[
										417,
										422
									],
									[
										494,
										499
									],
									[
										537,
										542
									],
									[
										734,
										739
									],
									[
										763,
										768
									],
									[
										1026,
										1031
									],
									[
										1099,
										1104
									],
									[
										1153,
										1158
									],
									[
										1362,
										1367
									],
									[
										1429,
										1434
									],
									[
										1449,
										1454
									],
									[
										1650,
										1655
									],
									[
										1712,
										1717
									],
									[
										1731,
										1736
									],
									[
										2004,
										2009
									],
									[
										2055,
										2060
									],
									[
										2097,
										2102
									],
									[
										2108,
										2113
									],
									[
										2203,
										2208
									],
									[
										2462,
										2467
									],
									[
										2625,
										2630
									],
									[
										2734,
										2739
									],
									[
										2834,
										2839
									],
									[
										2846,
										2851
									],
									[
										2874,
										2879
									],
									[
										2936,
										2941
									],
									[
										2962,
										2967
									],
									[
										2974,
										2979
									],
									[
										3036,
										3041
									],
									[
										3136,
										3141
									],
									[
										3281,
										3286
									],
									[
										3629,
										3634
									],
									[
										4094,
										4117
									],
									[
										4399,
										4426
									],
									[
										4660,
										4687
									],
									[
										4865,
										4892
									],
									[
										5165,
										5192
									],
									[
										5551,
										5562
									],
									[
										5881,
										5891
									],
									[
										6162,
										6172
									],
									[
										6595,
										6618
									],
									[
										6899,
										6922
									],
									[
										7110,
										7133
									],
									[
										7401,
										7424
									],
									[
										7638,
										7661
									],
									[
										7886,
										7909
									],
									[
										7987,
										8010
									],
									[
										8338,
										8361
									],
									[
										8624,
										8647
									],
									[
										8838,
										8861
									],
									[
										9214,
										9230
									],
									[
										10032,
										10036
									],
									[
										10614,
										10618
									],
									[
										10670,
										10674
									],
									[
										10745,
										10749
									],
									[
										10800,
										10804
									],
									[
										11063,
										11067
									],
									[
										11251,
										11255
									],
									[
										11338,
										11342
									],
									[
										11559,
										11563
									],
									[
										11587,
										11591
									],
									[
										11594,
										11598
									],
									[
										11621,
										11625
									],
									[
										11636,
										11640
									],
									[
										11729,
										11733
									],
									[
										12082,
										12086
									],
									[
										12221,
										12225
									],
									[
										12380,
										12384
									],
									[
										12806,
										12810
									],
									[
										12874,
										12878
									],
									[
										12979,
										12983
									],
									[
										13034,
										13038
									],
									[
										13236,
										13240
									],
									[
										13360,
										13364
									],
									[
										13655,
										13659
									],
									[
										13705,
										13709
									],
									[
										13893,
										13897
									],
									[
										14050,
										14054
									],
									[
										14186,
										14190
									],
									[
										14328,
										14332
									],
									[
										14367,
										14371
									],
									[
										14454,
										14458
									],
									[
										14829,
										14833
									],
									[
										14939,
										14943
									],
									[
										15172,
										15176
									],
									[
										15366,
										15370
									],
									[
										15435,
										15439
									],
									[
										15484,
										15488
									],
									[
										15502,
										15506
									],
									[
										15527,
										15531
									],
									[
										15548,
										15552
									],
									[
										15643,
										15647
									],
									[
										15799,
										15803
									],
									[
										15831,
										15835
									],
									[
										16158,
										16162
									],
									[
										16254,
										16258
									],
									[
										16283,
										16287
									],
									[
										16750,
										16754
									],
									[
										16793,
										16797
									],
									[
										16849,
										16853
									],
									[
										17071,
										17075
									],
									[
										17222,
										17226
									],
									[
										17316,
										17320
									],
									[
										17560,
										17564
									],
									[
										17611,
										17615
									],
									[
										17729,
										17733
									],
									[
										17803,
										17807
									],
									[
										17957,
										17961
									],
									[
										18016,
										18020
									],
									[
										18048,
										18052
									],
									[
										18209,
										18213
									],
									[
										18453,
										18457
									],
									[
										18531,
										18535
									],
									[
										18721,
										18725
									],
									[
										18886,
										18890
									],
									[
										18904,
										18908
									],
									[
										19128,
										19132
									],
									[
										19314,
										19318
									],
									[
										19490,
										19494
									],
									[
										19677,
										19681
									],
									[
										19836,
										19840
									],
									[
										20092,
										20096
									],
									[
										20319,
										20323
									],
									[
										20526,
										20530
									],
									[
										20806,
										20810
									],
									[
										20957,
										20961
									],
									[
										20992,
										20996
									],
									[
										21054,
										21058
									],
									[
										21147,
										21151
									],
									[
										21196,
										21200
									],
									[
										21463,
										21467
									],
									[
										21526,
										21530
									],
									[
										21743,
										21747
									],
									[
										21945,
										21949
									],
									[
										21981,
										21985
									],
									[
										22011,
										22015
									],
									[
										22047,
										22051
									],
									[
										22080,
										22084
									],
									[
										22102,
										22106
									],
									[
										22130,
										22134
									],
									[
										22155,
										22159
									],
									[
										22227,
										22231
									],
									[
										22422,
										22426
									],
									[
										22487,
										22491
									],
									[
										22599,
										22603
									],
									[
										22652,
										22656
									],
									[
										22838,
										22842
									],
									[
										23104,
										23108
									],
									[
										23140,
										23144
									],
									[
										23190,
										23194
									],
									[
										23296,
										23300
									],
									[
										23352,
										23356
									],
									[
										23461,
										23465
									],
									[
										23542,
										23546
									],
									[
										23560,
										23564
									],
									[
										23577,
										23581
									],
									[
										23701,
										23705
									],
									[
										23747,
										23751
									],
									[
										23975,
										23979
									],
									[
										24026,
										24030
									],
									[
										24214,
										24218
									],
									[
										24354,
										24358
									],
									[
										24376,
										24380
									],
									[
										24396,
										24400
									],
									[
										24418,
										24422
									],
									[
										24438,
										24442
									],
									[
										24478,
										24482
									],
									[
										24572,
										24576
									],
									[
										24647,
										24651
									],
									[
										24880,
										24884
									],
									[
										25162,
										25166
									],
									[
										25236,
										25240
									],
									[
										25319,
										25323
									],
									[
										25693,
										25697
									],
									[
										25867,
										25871
									],
									[
										25911,
										25915
									],
									[
										26049,
										26053
									],
									[
										26207,
										26211
									],
									[
										26332,
										26336
									],
									[
										26594,
										26598
									],
									[
										26878,
										26882
									],
									[
										27194,
										27198
									],
									[
										27430,
										27434
									],
									[
										27696,
										27700
									],
									[
										27940,
										27944
									],
									[
										27974,
										27978
									],
									[
										28055,
										28059
									],
									[
										28081,
										28085
									],
									[
										28122,
										28126
									],
									[
										28193,
										28197
									],
									[
										28407,
										28411
									],
									[
										28808,
										28812
									],
									[
										28890,
										28894
									],
									[
										29205,
										29209
									],
									[
										29465,
										29469
									],
									[
										29593,
										29597
									],
									[
										29617,
										29621
									],
									[
										29637,
										29641
									],
									[
										29688,
										29692
									],
									[
										29809,
										29813
									],
									[
										29946,
										29950
									],
									[
										29981,
										29985
									],
									[
										30075,
										30079
									],
									[
										30440,
										30444
									],
									[
										30670,
										30674
									],
									[
										30908,
										30912
									],
									[
										31169,
										31173
									],
									[
										31266,
										31270
									],
									[
										31449,
										31453
									],
									[
										31632,
										31636
									],
									[
										31824,
										31828
									],
									[
										32122,
										32126
									],
									[
										32246,
										32250
									],
									[
										32384,
										32388
									],
									[
										32519,
										32523
									],
									[
										32646,
										32650
									],
									[
										32753,
										32757
									],
									[
										32855,
										32859
									],
									[
										32887,
										32891
									],
									[
										32905,
										32909
									],
									[
										33052,
										33056
									],
									[
										33209,
										33213
									],
									[
										33546,
										33552
									],
									[
										33564,
										33570
									],
									[
										33711,
										33717
									],
									[
										34076,
										34082
									],
									[
										34259,
										34265
									],
									[
										34451,
										34457
									],
									[
										34586,
										34592
									],
									[
										34641,
										34647
									],
									[
										34716,
										34722
									],
									[
										34794,
										34800
									],
									[
										34871,
										34877
									],
									[
										35148,
										35152
									],
									[
										35343,
										35347
									],
									[
										35371,
										35375
									],
									[
										35431,
										35435
									],
									[
										35458,
										35462
									],
									[
										35663,
										35667
									],
									[
										35704,
										35708
									],
									[
										35871,
										35875
									],
									[
										35905,
										35909
									],
									[
										36121,
										36125
									],
									[
										36183,
										36187
									],
									[
										36295,
										36299
									],
									[
										36310,
										36314
									],
									[
										36546,
										36550
									],
									[
										36607,
										36611
									],
									[
										36725,
										36729
									],
									[
										36970,
										36974
									],
									[
										37185,
										37189
									],
									[
										37252,
										37256
									],
									[
										37526,
										37530
									],
									[
										37611,
										37615
									],
									[
										37682,
										37686
									],
									[
										37930,
										37934
									],
									[
										38098,
										38102
									],
									[
										38151,
										38155
									],
									[
										38267,
										38271
									],
									[
										38285,
										38289
									],
									[
										38585,
										38589
									],
									[
										38840,
										38844
									],
									[
										38978,
										38982
									],
									[
										39113,
										39117
									],
									[
										39240,
										39244
									],
									[
										39347,
										39351
									],
									[
										39449,
										39453
									],
									[
										39893,
										39897
									],
									[
										39980,
										39984
									],
									[
										40260,
										40264
									],
									[
										40275,
										40279
									],
									[
										40512,
										40516
									],
									[
										40785,
										40789
									],
									[
										41052,
										41056
									],
									[
										41190,
										41194
									],
									[
										41325,
										41329
									],
									[
										41452,
										41456
									],
									[
										41559,
										41563
									],
									[
										41661,
										41665
									],
									[
										42070,
										42089
									],
									[
										42434,
										42447
									],
									[
										42779,
										42792
									],
									[
										43113,
										43132
									],
									[
										43180,
										43199
									],
									[
										43624,
										43635
									],
									[
										43990,
										44001
									],
									[
										44143,
										44154
									],
									[
										44188,
										44199
									],
									[
										44492,
										44503
									],
									[
										44717,
										44728
									],
									[
										45148,
										45158
									],
									[
										45429,
										45439
									],
									[
										45909,
										45925
									],
									[
										46336,
										46353
									],
									[
										46641,
										46658
									],
									[
										46985,
										47002
									],
									[
										47525,
										47534
									],
									[
										47829,
										47838
									],
									[
										48127,
										48136
									],
									[
										48352,
										48361
									],
									[
										48469,
										48478
									],
									[
										48550,
										48559
									],
									[
										48879,
										48896
									],
									[
										49126,
										49143
									],
									[
										49320,
										49337
									],
									[
										49628,
										49650
									],
									[
										49862,
										49884
									],
									[
										50208,
										50230
									],
									[
										50523,
										50546
									],
									[
										50844,
										50867
									],
									[
										51280,
										51286
									],
									[
										51440,
										51446
									],
									[
										51835,
										51841
									],
									[
										52143,
										52149
									],
									[
										52303,
										52309
									],
									[
										52698,
										52704
									],
									[
										52961,
										52981
									],
									[
										53216,
										53236
									],
									[
										53619,
										53634
									],
									[
										53810,
										53825
									],
									[
										53828,
										53843
									],
									[
										54059,
										54074
									],
									[
										54279,
										54294
									],
									[
										54415,
										54430
									],
									[
										54522,
										54537
									],
									[
										54727,
										54742
									],
									[
										55063,
										55078
									],
									[
										55450,
										55465
									],
									[
										55885,
										55898
									],
									[
										56102,
										56115
									],
									[
										56118,
										56131
									],
									[
										56345,
										56358
									],
									[
										56562,
										56575
									],
									[
										56723,
										56736
									],
									[
										56963,
										56976
									],
									[
										57281,
										57294
									],
									[
										57684,
										57697
									],
									[
										58008,
										58021
									],
									[
										58306,
										58319
									],
									[
										58510,
										58523
									],
									[
										58615,
										58628
									],
									[
										58660,
										58673
									],
									[
										59012,
										59025
									],
									[
										59078,
										59091
									],
									[
										59474,
										59487
									],
									[
										59831,
										59844
									],
									[
										59897,
										59910
									],
									[
										60292,
										60305
									],
									[
										60697,
										60733
									],
									[
										60775,
										60811
									],
									[
										61149,
										61166
									],
									[
										61342,
										61359
									],
									[
										61362,
										61379
									],
									[
										61595,
										61612
									],
									[
										61817,
										61834
									],
									[
										61955,
										61972
									],
									[
										62064,
										62081
									],
									[
										62271,
										62288
									],
									[
										62611,
										62628
									],
									[
										63000,
										63017
									],
									[
										63437,
										63450
									],
									[
										63654,
										63667
									],
									[
										63670,
										63683
									],
									[
										63897,
										63910
									],
									[
										64114,
										64127
									],
									[
										64275,
										64288
									],
									[
										64515,
										64528
									],
									[
										64833,
										64846
									],
									[
										65236,
										65249
									],
									[
										65560,
										65573
									],
									[
										65858,
										65871
									],
									[
										66062,
										66075
									],
									[
										66167,
										66180
									],
									[
										66212,
										66225
									],
									[
										66600,
										66617
									],
									[
										66921,
										66938
									],
									[
										67370,
										67387
									],
									[
										67691,
										67708
									],
									[
										68179,
										68191
									],
									[
										68640,
										68648
									],
									[
										68857,
										68865
									],
									[
										68873,
										68881
									],
									[
										69100,
										69108
									],
									[
										69317,
										69325
									],
									[
										69478,
										69486
									],
									[
										69718,
										69726
									],
									[
										69993,
										70001
									],
									[
										70036,
										70044
									],
									[
										70206,
										70214
									],
									[
										70595,
										70603
									],
									[
										70919,
										70927
									],
									[
										71217,
										71225
									],
									[
										71421,
										71429
									],
									[
										71526,
										71534
									],
									[
										71571,
										71579
									],
									[
										71864,
										71873
									],
									[
										72169,
										72178
									],
									[
										72627,
										72636
									],
									[
										72873,
										72882
									],
									[
										72895,
										72904
									],
									[
										72930,
										72939
									],
									[
										72973,
										72982
									],
									[
										73008,
										73017
									],
									[
										73046,
										73055
									],
									[
										73082,
										73091
									],
									[
										73124,
										73133
									],
									[
										73160,
										73169
									],
									[
										73194,
										73203
									],
									[
										73230,
										73239
									],
									[
										73263,
										73272
									],
									[
										73299,
										73308
									],
									[
										73330,
										73339
									],
									[
										73362,
										73371
									],
									[
										73403,
										73412
									],
									[
										73444,
										73453
									],
									[
										73482,
										73491
									],
									[
										73521,
										73530
									],
									[
										73852,
										73861
									],
									[
										73875,
										73884
									],
									[
										73898,
										73907
									],
									[
										73920,
										73929
									],
									[
										73943,
										73952
									],
									[
										74156,
										74165
									],
									[
										74201,
										74210
									],
									[
										74243,
										74252
									],
									[
										74378,
										74387
									],
									[
										74475,
										74484
									],
									[
										74680,
										74689
									],
									[
										74829,
										74838
									],
									[
										75159,
										75168
									],
									[
										75223,
										75232
									],
									[
										75337,
										75346
									],
									[
										75411,
										75420
									],
									[
										75448,
										75457
									],
									[
										75509,
										75518
									],
									[
										75530,
										75539
									],
									[
										75618,
										75627
									],
									[
										75707,
										75716
									],
									[
										75868,
										75877
									],
									[
										75923,
										75932
									],
									[
										75971,
										75980
									],
									[
										76078,
										76087
									],
									[
										76100,
										76109
									],
									[
										76136,
										76145
									],
									[
										76195,
										76204
									],
									[
										76318,
										76327
									],
									[
										76354,
										76363
									],
									[
										76402,
										76411
									],
									[
										76438,
										76447
									],
									[
										76572,
										76581
									],
									[
										76763,
										76772
									],
									[
										76955,
										76964
									],
									[
										77221,
										77230
									],
									[
										77278,
										77287
									],
									[
										77337,
										77346
									],
									[
										77393,
										77402
									],
									[
										77446,
										77455
									],
									[
										77493,
										77502
									],
									[
										77547,
										77556
									],
									[
										77597,
										77606
									],
									[
										77654,
										77663
									],
									[
										77721,
										77730
									],
									[
										77781,
										77790
									],
									[
										77830,
										77839
									],
									[
										77945,
										77954
									],
									[
										78007,
										78016
									],
									[
										78337,
										78346
									],
									[
										78399,
										78408
									],
									[
										78459,
										78468
									],
									[
										78791,
										78808
									],
									[
										79070,
										79087
									],
									[
										79621,
										79640
									],
									[
										79894,
										79913
									],
									[
										80143,
										80162
									],
									[
										80336,
										80355
									],
									[
										80746,
										80759
									],
									[
										81021,
										81034
									],
									[
										81064,
										81077
									],
									[
										81234,
										81247
									],
									[
										81623,
										81636
									],
									[
										81943,
										81956
									],
									[
										82147,
										82160
									],
									[
										82252,
										82265
									],
									[
										82297,
										82310
									],
									[
										82614,
										82640
									],
									[
										83065,
										83082
									],
									[
										83344,
										83361
									],
									[
										83747,
										83764
									],
									[
										84003,
										84020
									],
									[
										84387,
										84408
									],
									[
										84779,
										84800
									],
									[
										85086,
										85107
									],
									[
										85272,
										85293
									],
									[
										85511,
										85532
									],
									[
										85881,
										85899
									],
									[
										85917,
										85935
									],
									[
										86090,
										86108
									],
									[
										86469,
										86487
									],
									[
										86608,
										86626
									],
									[
										86663,
										86681
									],
									[
										86711,
										86729
									],
									[
										86818,
										86836
									],
									[
										87041,
										87059
									],
									[
										87091,
										87109
									],
									[
										87215,
										87233
									],
									[
										87515,
										87533
									],
									[
										87845,
										87863
									],
									[
										87881,
										87899
									],
									[
										88054,
										88072
									],
									[
										88433,
										88451
									],
									[
										88572,
										88590
									],
									[
										88627,
										88645
									],
									[
										88675,
										88693
									],
									[
										88782,
										88800
									],
									[
										89005,
										89023
									],
									[
										89055,
										89073
									],
									[
										89179,
										89197
									],
									[
										89479,
										89497
									],
									[
										89746,
										89763
									],
									[
										90051,
										90068
									],
									[
										90395,
										90412
									],
									[
										90760,
										90778
									],
									[
										90796,
										90814
									],
									[
										90969,
										90987
									],
									[
										91348,
										91366
									],
									[
										91487,
										91505
									],
									[
										91542,
										91560
									],
									[
										91590,
										91608
									],
									[
										91697,
										91715
									],
									[
										91920,
										91938
									],
									[
										91970,
										91988
									],
									[
										92094,
										92112
									],
									[
										92394,
										92412
									],
									[
										92661,
										92678
									],
									[
										92966,
										92983
									],
									[
										93310,
										93327
									],
									[
										93708,
										93727
									],
									[
										94068,
										94087
									],
									[
										94294,
										94313
									],
									[
										94332,
										94351
									],
									[
										94578,
										94597
									],
									[
										94631,
										94650
									],
									[
										94931,
										94943
									],
									[
										95108,
										95120
									],
									[
										95269,
										95281
									],
									[
										95478,
										95490
									],
									[
										95663,
										95675
									],
									[
										95892,
										95904
									],
									[
										96038,
										96050
									],
									[
										96053,
										96065
									],
									[
										96081,
										96093
									],
									[
										96132,
										96144
									],
									[
										96491,
										96495
									],
									[
										96595,
										96599
									],
									[
										96844,
										96848
									],
									[
										97051,
										97055
									],
									[
										97230,
										97234
									],
									[
										97242,
										97246
									],
									[
										97634,
										97638
									],
									[
										97660,
										97664
									],
									[
										97686,
										97690
									],
									[
										98017,
										98021
									],
									[
										98069,
										98073
									],
									[
										98090,
										98094
									],
									[
										98111,
										98115
									],
									[
										98385,
										98389
									],
									[
										98750,
										98767
									],
									[
										99006,
										99023
									],
									[
										99388,
										99406
									],
									[
										99424,
										99442
									],
									[
										99597,
										99615
									],
									[
										99976,
										99994
									],
									[
										100115,
										100133
									],
									[
										100170,
										100188
									],
									[
										100218,
										100236
									],
									[
										100381,
										100399
									],
									[
										100413,
										100431
									],
									[
										100636,
										100654
									],
									[
										100686,
										100704
									],
									[
										100810,
										100828
									],
									[
										101110,
										101128
									],
									[
										101377,
										101394
									],
									[
										101682,
										101699
									],
									[
										102026,
										102043
									],
									[
										102356,
										102369
									],
									[
										102522,
										102535
									],
									[
										102575,
										102588
									],
									[
										102605,
										102618
									],
									[
										102648,
										102661
									],
									[
										102678,
										102691
									],
									[
										102903,
										102916
									],
									[
										102993,
										103006
									],
									[
										103410,
										103423
									],
									[
										103734,
										103747
									],
									[
										103960,
										103973
									],
									[
										103998,
										104011
									],
									[
										104244,
										104257
									],
									[
										104297,
										104310
									],
									[
										104411,
										104424
									],
									[
										104449,
										104462
									],
									[
										104580,
										104593
									],
									[
										104633,
										104646
									],
									[
										104850,
										104863
									],
									[
										104888,
										104901
									],
									[
										104926,
										104939
									],
									[
										105024,
										105037
									],
									[
										105406,
										105425
									],
									[
										105766,
										105785
									],
									[
										105992,
										106011
									],
									[
										106030,
										106049
									],
									[
										106276,
										106295
									],
									[
										106329,
										106348
									],
									[
										106654,
										106671
									],
									[
										106910,
										106927
									],
									[
										107257,
										107270
									],
									[
										107423,
										107436
									],
									[
										107476,
										107489
									],
									[
										107506,
										107519
									],
									[
										107549,
										107562
									],
									[
										107579,
										107592
									],
									[
										107804,
										107817
									],
									[
										107896,
										107909
									],
									[
										108264,
										108277
									],
									[
										108575,
										108588
									],
									[
										108899,
										108912
									],
									[
										109249,
										109262
									],
									[
										109285,
										109298
									],
									[
										109326,
										109339
									],
									[
										109584,
										109597
									],
									[
										109640,
										109653
									],
									[
										109721,
										109734
									],
									[
										109812,
										109825
									],
									[
										109850,
										109863
									],
									[
										109981,
										109994
									],
									[
										110034,
										110047
									],
									[
										110251,
										110264
									],
									[
										110289,
										110302
									],
									[
										110327,
										110340
									],
									[
										110425,
										110438
									],
									[
										110807,
										110826
									],
									[
										111167,
										111186
									],
									[
										111449,
										111466
									],
									[
										111754,
										111771
									],
									[
										112098,
										112115
									],
									[
										112468,
										112489
									],
									[
										112860,
										112881
									],
									[
										113167,
										113188
									],
									[
										113346,
										113367
									],
									[
										113585,
										113606
									],
									[
										113920,
										113933
									],
									[
										114086,
										114099
									],
									[
										114139,
										114152
									],
									[
										114169,
										114182
									],
									[
										114212,
										114225
									],
									[
										114242,
										114255
									],
									[
										114467,
										114480
									],
									[
										114559,
										114572
									],
									[
										114927,
										114940
									],
									[
										115238,
										115251
									],
									[
										115562,
										115575
									],
									[
										115915,
										115928
									],
									[
										115951,
										115964
									],
									[
										115992,
										116005
									],
									[
										116250,
										116263
									],
									[
										116306,
										116319
									],
									[
										116387,
										116400
									],
									[
										116478,
										116491
									],
									[
										116516,
										116529
									],
									[
										116647,
										116660
									],
									[
										116700,
										116713
									],
									[
										116917,
										116930
									],
									[
										116955,
										116968
									],
									[
										116993,
										117006
									],
									[
										117091,
										117104
									],
									[
										117484,
										117501
									],
									[
										117740,
										117757
									],
									[
										118168,
										118185
									],
									[
										118424,
										118441
									],
									[
										118826,
										118848
									],
									[
										119080,
										119102
									],
									[
										119443,
										119465
									],
									[
										119697,
										119719
									],
									[
										119977,
										119994
									],
									[
										120282,
										120299
									],
									[
										120626,
										120643
									],
									[
										120959,
										120972
									],
									[
										121125,
										121138
									],
									[
										121178,
										121191
									],
									[
										121208,
										121221
									],
									[
										121251,
										121264
									],
									[
										121281,
										121294
									],
									[
										121334,
										121347
									],
									[
										121563,
										121576
									],
									[
										121935,
										121948
									],
									[
										122246,
										122259
									],
									[
										122570,
										122583
									],
									[
										122923,
										122936
									],
									[
										122950,
										122963
									],
									[
										122982,
										122995
									],
									[
										123014,
										123027
									],
									[
										123236,
										123249
									],
									[
										123283,
										123296
									],
									[
										123330,
										123343
									],
									[
										123423,
										123436
									],
									[
										123505,
										123518
									],
									[
										123543,
										123556
									],
									[
										123674,
										123687
									],
									[
										123727,
										123740
									],
									[
										123944,
										123957
									],
									[
										123982,
										123995
									],
									[
										124020,
										124033
									],
									[
										124118,
										124131
									],
									[
										124430,
										124443
									],
									[
										124596,
										124609
									],
									[
										124649,
										124662
									],
									[
										124679,
										124692
									],
									[
										124722,
										124735
									],
									[
										124752,
										124765
									],
									[
										124805,
										124818
									],
									[
										125034,
										125047
									],
									[
										125406,
										125419
									],
									[
										125717,
										125730
									],
									[
										126041,
										126054
									],
									[
										126394,
										126407
									],
									[
										126421,
										126434
									],
									[
										126453,
										126466
									],
									[
										126485,
										126498
									],
									[
										126707,
										126720
									],
									[
										126754,
										126767
									],
									[
										126801,
										126814
									],
									[
										126894,
										126907
									],
									[
										126976,
										126989
									],
									[
										127014,
										127027
									],
									[
										127145,
										127158
									],
									[
										127198,
										127211
									],
									[
										127415,
										127428
									],
									[
										127453,
										127466
									],
									[
										127491,
										127504
									],
									[
										127589,
										127602
									],
									[
										127912,
										127933
									],
									[
										128333,
										128354
									],
									[
										128696,
										128717
									],
									[
										128734,
										128755
									],
									[
										128865,
										128886
									],
									[
										128918,
										128939
									],
									[
										129135,
										129156
									],
									[
										129173,
										129194
									],
									[
										129211,
										129232
									],
									[
										129309,
										129330
									],
									[
										129795,
										129814
									],
									[
										130002,
										130021
									],
									[
										130238,
										130257
									],
									[
										130441,
										130460
									],
									[
										130806,
										130819
									],
									[
										130972,
										130985
									],
									[
										131025,
										131038
									],
									[
										131055,
										131068
									],
									[
										131098,
										131111
									],
									[
										131128,
										131141
									],
									[
										131181,
										131194
									],
									[
										131410,
										131423
									],
									[
										131782,
										131795
									],
									[
										132093,
										132106
									],
									[
										132417,
										132430
									],
									[
										132770,
										132783
									],
									[
										132797,
										132810
									],
									[
										132829,
										132842
									],
									[
										132861,
										132874
									],
									[
										133083,
										133096
									],
									[
										133130,
										133143
									],
									[
										133177,
										133190
									],
									[
										133270,
										133283
									],
									[
										133352,
										133365
									],
									[
										133390,
										133403
									],
									[
										133428,
										133441
									],
									[
										133569,
										133582
									],
									[
										133622,
										133635
									],
									[
										133675,
										133688
									],
									[
										133902,
										133915
									],
									[
										133940,
										133953
									],
									[
										133978,
										133991
									],
									[
										134076,
										134089
									],
									[
										134425,
										134446
									],
									[
										134817,
										134838
									],
									[
										135124,
										135145
									],
									[
										135296,
										135317
									],
									[
										135352,
										135373
									],
									[
										135591,
										135612
									],
									[
										135924,
										135950
									],
									[
										136140,
										136166
									],
									[
										136339,
										136365
									],
									[
										136597,
										136623
									],
									[
										136898,
										136924
									],
									[
										137294,
										137320
									],
									[
										137323,
										137349
									],
									[
										137717,
										137743
									],
									[
										137945,
										137971
									],
									[
										138218,
										138244
									],
									[
										138318,
										138344
									],
									[
										138649,
										138675
									],
									[
										139123,
										139149
									],
									[
										139554,
										139561
									],
									[
										139819,
										139826
									],
									[
										139857,
										139864
									],
									[
										140094,
										140101
									],
									[
										140270,
										140277
									],
									[
										140323,
										140330
									],
									[
										140563,
										140570
									],
									[
										140758,
										140765
									],
									[
										140972,
										140979
									],
									[
										141290,
										141297
									],
									[
										141369,
										141376
									],
									[
										141420,
										141427
									],
									[
										141454,
										141461
									],
									[
										141577,
										141584
									],
									[
										141637,
										141644
									],
									[
										141669,
										141676
									],
									[
										142002,
										142009
									],
									[
										142021,
										142028
									],
									[
										142257,
										142264
									],
									[
										142606,
										142613
									],
									[
										142995,
										143002
									],
									[
										143380,
										143387
									],
									[
										143485,
										143492
									],
									[
										143493,
										143500
									],
									[
										143610,
										143617
									],
									[
										143657,
										143664
									],
									[
										143699,
										143706
									],
									[
										143839,
										143846
									],
									[
										143882,
										143889
									],
									[
										144184,
										144205
									],
									[
										144523,
										144544
									],
									[
										144735,
										144756
									],
									[
										144759,
										144780
									],
									[
										145068,
										145089
									],
									[
										145454,
										145475
									],
									[
										145822,
										145843
									],
									[
										146259,
										146273
									],
									[
										146502,
										146516
									],
									[
										146762,
										146776
									],
									[
										146948,
										146962
									],
									[
										147192,
										147206
									],
									[
										147413,
										147427
									],
									[
										147683,
										147697
									],
									[
										147993,
										148007
									],
									[
										148278,
										148280
									],
									[
										148497,
										148499
									],
									[
										148811,
										148813
									],
									[
										148999,
										149001
									],
									[
										149370,
										149372
									],
									[
										149556,
										149558
									],
									[
										149872,
										149874
									],
									[
										149983,
										149985
									],
									[
										150197,
										150199
									],
									[
										150272,
										150274
									],
									[
										150575,
										150577
									],
									[
										150884,
										150886
									],
									[
										150971,
										150973
									],
									[
										151269,
										151271
									],
									[
										151667,
										151669
									],
									[
										152068,
										152070
									],
									[
										152257,
										152259
									],
									[
										152373,
										152375
									],
									[
										152771,
										152796
									],
									[
										153046,
										153071
									],
									[
										153257,
										153282
									],
									[
										153578,
										153603
									],
									[
										153896,
										153908
									],
									[
										154078,
										154090
									],
									[
										154121,
										154133
									],
									[
										154220,
										154232
									],
									[
										154364,
										154376
									],
									[
										154406,
										154418
									],
									[
										154680,
										154692
									],
									[
										154998,
										155010
									],
									[
										155225,
										155251
									],
									[
										155520,
										155532
									],
									[
										155693,
										155705
									],
									[
										155735,
										155747
									],
									[
										156009,
										156021
									],
									[
										156327,
										156339
									],
									[
										156885,
										156894
									],
									[
										157202,
										157211
									],
									[
										157404,
										157413
									],
									[
										157713,
										157737
									],
									[
										158030,
										158054
									],
									[
										158232,
										158256
									],
									[
										158490,
										158492
									],
									[
										158705,
										158707
									],
									[
										158968,
										158970
									],
									[
										159156,
										159158
									],
									[
										159527,
										159529
									],
									[
										159713,
										159715
									],
									[
										160029,
										160031
									],
									[
										160140,
										160142
									],
									[
										160354,
										160356
									],
									[
										160429,
										160431
									],
									[
										160704,
										160706
									],
									[
										160976,
										160978
									],
									[
										161285,
										161287
									],
									[
										161372,
										161374
									],
									[
										161659,
										161661
									],
									[
										162027,
										162029
									],
									[
										162428,
										162430
									],
									[
										162617,
										162619
									],
									[
										162733,
										162735
									],
									[
										163111,
										163136
									],
									[
										163421,
										163439
									],
									[
										163728,
										163746
									],
									[
										164245,
										164258
									],
									[
										164792,
										164805
									],
									[
										165099,
										165112
									],
									[
										165159,
										165172
									],
									[
										165566,
										165581
									],
									[
										165767,
										165782
									],
									[
										166145,
										166163
									],
									[
										166452,
										166470
									],
									[
										166969,
										166982
									],
									[
										167516,
										167529
									],
									[
										167823,
										167836
									],
									[
										167883,
										167896
									],
									[
										168230,
										168251
									],
									[
										168622,
										168643
									],
									[
										168977,
										168998
									],
									[
										169353,
										169374
									],
									[
										169842,
										169864
									],
									[
										169939,
										169961
									],
									[
										170219,
										170235
									],
									[
										170565,
										170586
									],
									[
										170880,
										170901
									],
									[
										171312,
										171327
									],
									[
										171479,
										171494
									],
									[
										171660,
										171675
									],
									[
										171807,
										171822
									],
									[
										172012,
										172027
									],
									[
										172159,
										172174
									],
									[
										172350,
										172365
									],
									[
										172593,
										172608
									],
									[
										172728,
										172743
									],
									[
										172932,
										172947
									],
									[
										173100,
										173115
									],
									[
										173198,
										173213
									],
									[
										173602,
										173617
									],
									[
										173827,
										173842
									],
									[
										174223,
										174238
									],
									[
										174370,
										174385
									],
									[
										174721,
										174736
									],
									[
										174946,
										174961
									],
									[
										175335,
										175355
									],
									[
										175519,
										175539
									],
									[
										175570,
										175590
									],
									[
										176051,
										176060
									],
									[
										176075,
										176084
									],
									[
										176279,
										176288
									],
									[
										176603,
										176619
									],
									[
										176658,
										176674
									],
									[
										176932,
										176948
									],
									[
										177168,
										177184
									],
									[
										177530,
										177543
									],
									[
										177793,
										177806
									],
									[
										177819,
										177832
									],
									[
										178034,
										178047
									],
									[
										178248,
										178261
									],
									[
										178274,
										178287
									],
									[
										178488,
										178501
									],
									[
										178817,
										178830
									],
									[
										178843,
										178856
									],
									[
										179226,
										179238
									],
									[
										179506,
										179518
									],
									[
										179749,
										179761
									],
									[
										179884,
										179896
									],
									[
										180088,
										180100
									],
									[
										180256,
										180268
									],
									[
										180354,
										180366
									],
									[
										180849,
										180861
									],
									[
										181129,
										181141
									],
									[
										181372,
										181384
									],
									[
										181507,
										181519
									],
									[
										181711,
										181723
									],
									[
										181879,
										181891
									],
									[
										181977,
										181989
									],
									[
										182472,
										182484
									],
									[
										182752,
										182764
									],
									[
										182995,
										183007
									],
									[
										183130,
										183142
									],
									[
										183334,
										183346
									],
									[
										183502,
										183514
									],
									[
										183600,
										183612
									],
									[
										184030,
										184042
									],
									[
										184386,
										184398
									],
									[
										184706,
										184718
									],
									[
										184905,
										184917
									],
									[
										185083,
										185095
									],
									[
										185325,
										185337
									],
									[
										185609,
										185621
									],
									[
										185933,
										185945
									],
									[
										186325,
										186338
									],
									[
										186609,
										186622
									],
									[
										186756,
										186769
									],
									[
										187056,
										187077
									],
									[
										187371,
										187392
									],
									[
										187690,
										187699
									],
									[
										187712,
										187721
									],
									[
										187747,
										187756
									],
									[
										187790,
										187799
									],
									[
										187825,
										187834
									],
									[
										187863,
										187872
									],
									[
										187899,
										187908
									],
									[
										187941,
										187950
									],
									[
										187977,
										187986
									],
									[
										188011,
										188020
									],
									[
										188047,
										188056
									],
									[
										188080,
										188089
									],
									[
										188116,
										188125
									],
									[
										188147,
										188156
									],
									[
										188179,
										188188
									],
									[
										188220,
										188229
									],
									[
										188261,
										188270
									],
									[
										188299,
										188308
									],
									[
										188338,
										188347
									],
									[
										188669,
										188678
									],
									[
										188692,
										188701
									],
									[
										188715,
										188724
									],
									[
										188737,
										188746
									],
									[
										188760,
										188769
									],
									[
										188904,
										188913
									],
									[
										188928,
										188937
									],
									[
										188952,
										188961
									],
									[
										188976,
										188985
									],
									[
										189148,
										189157
									],
									[
										189171,
										189180
									],
									[
										189305,
										189314
									],
									[
										189402,
										189411
									],
									[
										189607,
										189616
									],
									[
										189756,
										189765
									],
									[
										190086,
										190095
									],
									[
										190150,
										190159
									],
									[
										190264,
										190273
									],
									[
										190338,
										190347
									],
									[
										190375,
										190384
									],
									[
										190436,
										190445
									],
									[
										190457,
										190466
									],
									[
										190545,
										190554
									],
									[
										190659,
										190668
									],
									[
										190833,
										190842
									],
									[
										190888,
										190897
									],
									[
										190963,
										190972
									],
									[
										191178,
										191187
									],
									[
										191217,
										191226
									],
									[
										191251,
										191260
									],
									[
										191273,
										191282
									],
									[
										191309,
										191318
									],
									[
										191368,
										191377
									],
									[
										191491,
										191500
									],
									[
										191527,
										191536
									],
									[
										191575,
										191584
									],
									[
										191611,
										191620
									],
									[
										191745,
										191754
									],
									[
										191949,
										191958
									],
									[
										192154,
										192163
									],
									[
										192433,
										192442
									],
									[
										192490,
										192499
									],
									[
										192549,
										192558
									],
									[
										192605,
										192614
									],
									[
										192658,
										192667
									],
									[
										192705,
										192714
									],
									[
										192759,
										192768
									],
									[
										192809,
										192818
									],
									[
										192866,
										192875
									],
									[
										192933,
										192942
									],
									[
										192993,
										193002
									],
									[
										193042,
										193051
									],
									[
										193157,
										193166
									],
									[
										193219,
										193228
									],
									[
										193549,
										193558
									],
									[
										193611,
										193620
									],
									[
										193671,
										193680
									],
									[
										194082,
										194107
									],
									[
										194370,
										194395
									],
									[
										194449,
										194474
									],
									[
										194862,
										194887
									],
									[
										195400,
										195425
									],
									[
										195907,
										195932
									],
									[
										195951,
										195976
									],
									[
										196326,
										196351
									],
									[
										196614,
										196639
									],
									[
										196925,
										196944
									],
									[
										196980,
										196999
									],
									[
										197199,
										197218
									],
									[
										197254,
										197273
									],
									[
										197589,
										197608
									],
									[
										198037,
										198062
									],
									[
										198575,
										198600
									],
									[
										199082,
										199107
									],
									[
										199126,
										199151
									],
									[
										199583,
										199606
									],
									[
										199770,
										199793
									],
									[
										200030,
										200053
									],
									[
										200398,
										200413
									],
									[
										200882,
										200897
									],
									[
										201159,
										201174
									],
									[
										201342,
										201357
									],
									[
										201377,
										201392
									],
									[
										201560,
										201575
									],
									[
										201849,
										201864
									],
									[
										201937,
										201952
									],
									[
										202165,
										202180
									],
									[
										202446,
										202471
									],
									[
										202629,
										202654
									],
									[
										203009,
										203015
									],
									[
										203503,
										203509
									],
									[
										203514,
										203520
									],
									[
										203619,
										203625
									],
									[
										203636,
										203642
									],
									[
										203647,
										203653
									],
									[
										203752,
										203758
									],
									[
										203769,
										203775
									],
									[
										203780,
										203786
									],
									[
										203883,
										203889
									],
									[
										203900,
										203906
									],
									[
										203911,
										203917
									],
									[
										204018,
										204024
									],
									[
										204035,
										204041
									],
									[
										204046,
										204052
									],
									[
										204151,
										204157
									],
									[
										204168,
										204174
									],
									[
										204179,
										204185
									],
									[
										204284,
										204290
									],
									[
										204301,
										204307
									],
									[
										204312,
										204318
									],
									[
										204422,
										204428
									],
									[
										204439,
										204445
									],
									[
										204450,
										204456
									],
									[
										204555,
										204561
									],
									[
										204713,
										204719
									],
									[
										204725,
										204731
									],
									[
										204736,
										204742
									],
									[
										204787,
										204793
									],
									[
										205153,
										205159
									],
									[
										205491,
										205497
									],
									[
										205842,
										205848
									],
									[
										206016,
										206022
									],
									[
										206310,
										206316
									],
									[
										206487,
										206493
									],
									[
										206826,
										206832
									],
									[
										207111,
										207117
									],
									[
										207379,
										207385
									],
									[
										207521,
										207527
									],
									[
										207546,
										207552
									],
									[
										207728,
										207734
									],
									[
										207751,
										207757
									],
									[
										207762,
										207768
									],
									[
										207804,
										207810
									],
									[
										207814,
										207820
									],
									[
										207954,
										207960
									],
									[
										208129,
										208135
									],
									[
										208158,
										208164
									],
									[
										208413,
										208419
									],
									[
										208569,
										208575
									],
									[
										208606,
										208612
									],
									[
										208747,
										208753
									],
									[
										208787,
										208793
									],
									[
										208826,
										208832
									],
									[
										208975,
										208981
									],
									[
										209293,
										209299
									],
									[
										209490,
										209496
									],
									[
										209657,
										209663
									],
									[
										209676,
										209682
									],
									[
										209838,
										209844
									],
									[
										210013,
										210019
									],
									[
										210034,
										210040
									],
									[
										210218,
										210224
									],
									[
										210367,
										210373
									],
									[
										210395,
										210401
									],
									[
										210453,
										210459
									],
									[
										210575,
										210581
									],
									[
										210632,
										210638
									],
									[
										210658,
										210664
									],
									[
										210821,
										210827
									],
									[
										210969,
										210975
									],
									[
										211002,
										211008
									],
									[
										211176,
										211182
									],
									[
										211235,
										211241
									],
									[
										211261,
										211267
									],
									[
										211357,
										211363
									],
									[
										211468,
										211474
									],
									[
										211501,
										211507
									],
									[
										211993,
										211999
									],
									[
										212218,
										212224
									],
									[
										212327,
										212333
									],
									[
										212401,
										212407
									],
									[
										212585,
										212591
									],
									[
										212650,
										212656
									],
									[
										212811,
										212817
									],
									[
										212837,
										212843
									],
									[
										212931,
										212937
									],
									[
										212970,
										212976
									],
									[
										212980,
										212986
									],
									[
										213030,
										213036
									],
									[
										213187,
										213193
									],
									[
										213194,
										213200
									],
									[
										213240,
										213246
									],
									[
										213260,
										213266
									],
									[
										213293,
										213299
									],
									[
										213314,
										213320
									],
									[
										213348,
										213354
									],
									[
										213378,
										213384
									],
									[
										213405,
										213411
									],
									[
										213437,
										213443
									],
									[
										213463,
										213469
									],
									[
										213504,
										213510
									],
									[
										213591,
										213597
									],
									[
										213791,
										213797
									],
									[
										214056,
										214062
									],
									[
										214154,
										214160
									],
									[
										214353,
										214359
									],
									[
										214618,
										214624
									],
									[
										214748,
										214754
									],
									[
										214865,
										214871
									],
									[
										214914,
										214920
									],
									[
										214929,
										214935
									],
									[
										215018,
										215024
									],
									[
										215070,
										215076
									],
									[
										215112,
										215118
									],
									[
										215139,
										215145
									],
									[
										215173,
										215179
									],
									[
										215195,
										215201
									],
									[
										215231,
										215237
									],
									[
										215253,
										215259
									],
									[
										215291,
										215297
									],
									[
										215326,
										215332
									],
									[
										215366,
										215372
									],
									[
										215400,
										215406
									],
									[
										215465,
										215471
									],
									[
										215486,
										215492
									],
									[
										215580,
										215586
									],
									[
										215599,
										215605
									],
									[
										215646,
										215652
									],
									[
										215672,
										215678
									],
									[
										215727,
										215733
									],
									[
										215752,
										215758
									],
									[
										215824,
										215830
									],
									[
										215872,
										215878
									],
									[
										215897,
										215903
									],
									[
										215952,
										215958
									],
									[
										215977,
										215983
									],
									[
										216140,
										216146
									],
									[
										216221,
										216227
									],
									[
										216274,
										216280
									],
									[
										216291,
										216297
									],
									[
										216450,
										216456
									],
									[
										216482,
										216488
									],
									[
										216492,
										216498
									],
									[
										216530,
										216536
									],
									[
										216675,
										216681
									],
									[
										216691,
										216697
									],
									[
										216795,
										216801
									],
									[
										216856,
										216862
									],
									[
										216917,
										216923
									],
									[
										217176,
										217182
									],
									[
										217186,
										217192
									],
									[
										217227,
										217233
									],
									[
										217332,
										217338
									],
									[
										217348,
										217354
									],
									[
										217534,
										217540
									],
									[
										217600,
										217606
									],
									[
										217770,
										217776
									],
									[
										217803,
										217809
									],
									[
										217835,
										217841
									],
									[
										218031,
										218037
									],
									[
										218124,
										218130
									],
									[
										218230,
										218236
									],
									[
										218301,
										218307
									],
									[
										218385,
										218391
									],
									[
										218467,
										218473
									],
									[
										218582,
										218588
									],
									[
										218696,
										218702
									],
									[
										218779,
										218785
									],
									[
										218831,
										218837
									],
									[
										218888,
										218894
									],
									[
										218938,
										218944
									],
									[
										218985,
										218991
									],
									[
										219032,
										219038
									],
									[
										219078,
										219084
									],
									[
										219217,
										219223
									],
									[
										219593,
										219599
									],
									[
										219628,
										219634
									],
									[
										219638,
										219644
									],
									[
										219649,
										219655
									],
									[
										219682,
										219688
									],
									[
										219692,
										219698
									],
									[
										219754,
										219760
									],
									[
										219823,
										219829
									],
									[
										219943,
										219949
									],
									[
										219984,
										219990
									],
									[
										220092,
										220098
									],
									[
										220289,
										220295
									],
									[
										220523,
										220529
									],
									[
										220618,
										220624
									],
									[
										220650,
										220656
									],
									[
										220744,
										220750
									],
									[
										220760,
										220766
									],
									[
										220833,
										220839
									],
									[
										220865,
										220871
									],
									[
										220954,
										220960
									],
									[
										220972,
										220978
									],
									[
										221045,
										221051
									],
									[
										221077,
										221083
									],
									[
										221127,
										221133
									],
									[
										221145,
										221151
									],
									[
										221320,
										221326
									],
									[
										221352,
										221358
									],
									[
										221410,
										221416
									],
									[
										221426,
										221432
									],
									[
										221598,
										221604
									],
									[
										221630,
										221636
									],
									[
										221832,
										221838
									],
									[
										221864,
										221870
									],
									[
										221922,
										221928
									],
									[
										221938,
										221944
									],
									[
										222160,
										222166
									],
									[
										222189,
										222195
									],
									[
										222258,
										222264
									],
									[
										222286,
										222292
									],
									[
										222443,
										222449
									],
									[
										222500,
										222506
									],
									[
										222557,
										222563
									],
									[
										222614,
										222620
									],
									[
										222758,
										222764
									],
									[
										222895,
										222901
									],
									[
										223171,
										223177
									],
									[
										223290,
										223296
									],
									[
										223624,
										223630
									],
									[
										223912,
										223918
									],
									[
										224299,
										224305
									],
									[
										224310,
										224316
									],
									[
										224689,
										224695
									],
									[
										224866,
										224872
									],
									[
										225205,
										225211
									],
									[
										225490,
										225496
									],
									[
										225737,
										225743
									],
									[
										225762,
										225768
									],
									[
										225944,
										225950
									],
									[
										225967,
										225973
									],
									[
										225978,
										225984
									],
									[
										226030,
										226036
									],
									[
										226219,
										226225
									],
									[
										226259,
										226265
									],
									[
										226298,
										226304
									],
									[
										226447,
										226453
									],
									[
										226765,
										226771
									],
									[
										226962,
										226968
									],
									[
										227129,
										227135
									],
									[
										227148,
										227154
									],
									[
										227310,
										227316
									],
									[
										227485,
										227491
									],
									[
										227506,
										227512
									],
									[
										227690,
										227696
									],
									[
										227839,
										227845
									],
									[
										227867,
										227873
									],
									[
										227925,
										227931
									],
									[
										228047,
										228053
									],
									[
										228104,
										228110
									],
									[
										228130,
										228136
									],
									[
										228293,
										228299
									],
									[
										228441,
										228447
									],
									[
										228474,
										228480
									],
									[
										228648,
										228654
									],
									[
										228707,
										228713
									],
									[
										228733,
										228739
									],
									[
										228829,
										228835
									],
									[
										228940,
										228946
									],
									[
										228973,
										228979
									],
									[
										229465,
										229471
									],
									[
										229732,
										229738
									],
									[
										229806,
										229812
									],
									[
										229990,
										229996
									],
									[
										230055,
										230061
									],
									[
										230216,
										230222
									],
									[
										230242,
										230248
									],
									[
										230385,
										230391
									],
									[
										230608,
										230614
									],
									[
										230662,
										230668
									],
									[
										230726,
										230732
									],
									[
										230785,
										230791
									],
									[
										231062,
										231068
									],
									[
										231137,
										231143
									],
									[
										231386,
										231392
									],
									[
										231612,
										231618
									],
									[
										231935,
										231941
									],
									[
										231977,
										231983
									],
									[
										232015,
										232021
									],
									[
										232341,
										232347
									],
									[
										232402,
										232408
									],
									[
										232671,
										232677
									],
									[
										232912,
										232918
									],
									[
										233124,
										233130
									],
									[
										233171,
										233177
									],
									[
										233218,
										233224
									],
									[
										233264,
										233270
									],
									[
										233532,
										233538
									],
									[
										233543,
										233549
									],
									[
										233586,
										233592
									],
									[
										233648,
										233654
									],
									[
										233871,
										233877
									],
									[
										233979,
										233985
									],
									[
										234192,
										234198
									],
									[
										234221,
										234227
									],
									[
										234290,
										234296
									],
									[
										234318,
										234324
									],
									[
										234475,
										234481
									],
									[
										234532,
										234538
									],
									[
										234589,
										234595
									],
									[
										234646,
										234652
									],
									[
										234952,
										234968
									],
									[
										235026,
										235042
									],
									[
										235434,
										235445
									],
									[
										235737,
										235748
									],
									[
										235967,
										235978
									],
									[
										236400,
										236424
									],
									[
										236530,
										236554
									],
									[
										236769,
										236793
									],
									[
										237178,
										237190
									],
									[
										237381,
										237393
									],
									[
										237434,
										237446
									],
									[
										238009,
										238020
									],
									[
										238035,
										238046
									],
									[
										238258,
										238269
									],
									[
										238544,
										238550
									],
									[
										238555,
										238561
									],
									[
										238967,
										238973
									],
									[
										239144,
										239150
									],
									[
										239483,
										239489
									],
									[
										239768,
										239774
									],
									[
										239984,
										239990
									],
									[
										240009,
										240015
									],
									[
										240191,
										240197
									],
									[
										240214,
										240220
									],
									[
										240225,
										240231
									],
									[
										240277,
										240283
									],
									[
										240466,
										240472
									],
									[
										240506,
										240512
									],
									[
										240545,
										240551
									],
									[
										240694,
										240700
									],
									[
										241012,
										241018
									],
									[
										241209,
										241215
									],
									[
										241376,
										241382
									],
									[
										241395,
										241401
									],
									[
										241557,
										241563
									],
									[
										241732,
										241738
									],
									[
										241753,
										241759
									],
									[
										241937,
										241943
									],
									[
										242086,
										242092
									],
									[
										242114,
										242120
									],
									[
										242172,
										242178
									],
									[
										242294,
										242300
									],
									[
										242351,
										242357
									],
									[
										242377,
										242383
									],
									[
										242540,
										242546
									],
									[
										242688,
										242694
									],
									[
										242721,
										242727
									],
									[
										242895,
										242901
									],
									[
										242954,
										242960
									],
									[
										242980,
										242986
									],
									[
										243076,
										243082
									],
									[
										243187,
										243193
									],
									[
										243220,
										243226
									],
									[
										243712,
										243718
									],
									[
										243979,
										243985
									],
									[
										244053,
										244059
									],
									[
										244237,
										244243
									],
									[
										244302,
										244308
									],
									[
										244463,
										244469
									],
									[
										244489,
										244495
									],
									[
										244632,
										244638
									],
									[
										244855,
										244861
									],
									[
										244909,
										244915
									],
									[
										244973,
										244979
									],
									[
										245032,
										245038
									],
									[
										245309,
										245315
									],
									[
										245384,
										245390
									],
									[
										245633,
										245639
									],
									[
										245859,
										245865
									],
									[
										246182,
										246188
									],
									[
										246224,
										246230
									],
									[
										246262,
										246268
									],
									[
										246588,
										246594
									],
									[
										246649,
										246655
									],
									[
										246918,
										246924
									],
									[
										247159,
										247165
									],
									[
										247371,
										247377
									],
									[
										247418,
										247424
									],
									[
										247465,
										247471
									],
									[
										247511,
										247517
									],
									[
										247779,
										247785
									],
									[
										247790,
										247796
									],
									[
										247833,
										247839
									],
									[
										247895,
										247901
									],
									[
										248118,
										248124
									],
									[
										248226,
										248232
									],
									[
										248439,
										248445
									],
									[
										248468,
										248474
									],
									[
										248537,
										248543
									],
									[
										248565,
										248571
									],
									[
										248722,
										248728
									],
									[
										248779,
										248785
									],
									[
										248836,
										248842
									],
									[
										248893,
										248899
									],
									[
										249206,
										249212
									],
									[
										249217,
										249223
									],
									[
										249629,
										249635
									],
									[
										249806,
										249812
									],
									[
										250145,
										250151
									],
									[
										250430,
										250436
									],
									[
										250646,
										250652
									],
									[
										250671,
										250677
									],
									[
										250853,
										250859
									],
									[
										250876,
										250882
									],
									[
										250887,
										250893
									],
									[
										250939,
										250945
									],
									[
										251128,
										251134
									],
									[
										251168,
										251174
									],
									[
										251207,
										251213
									],
									[
										251356,
										251362
									],
									[
										251674,
										251680
									],
									[
										251871,
										251877
									],
									[
										252038,
										252044
									],
									[
										252057,
										252063
									],
									[
										252219,
										252225
									],
									[
										252394,
										252400
									],
									[
										252415,
										252421
									],
									[
										252599,
										252605
									],
									[
										252748,
										252754
									],
									[
										252776,
										252782
									],
									[
										252834,
										252840
									],
									[
										252956,
										252962
									],
									[
										253013,
										253019
									],
									[
										253039,
										253045
									],
									[
										253202,
										253208
									],
									[
										253350,
										253356
									],
									[
										253383,
										253389
									],
									[
										253557,
										253563
									],
									[
										253616,
										253622
									],
									[
										253642,
										253648
									],
									[
										253738,
										253744
									],
									[
										253849,
										253855
									],
									[
										253882,
										253888
									],
									[
										254374,
										254380
									],
									[
										254641,
										254647
									],
									[
										254715,
										254721
									],
									[
										254899,
										254905
									],
									[
										254964,
										254970
									],
									[
										255125,
										255131
									],
									[
										255151,
										255157
									],
									[
										255294,
										255300
									],
									[
										255517,
										255523
									],
									[
										255571,
										255577
									],
									[
										255635,
										255641
									],
									[
										255694,
										255700
									],
									[
										255971,
										255977
									],
									[
										256046,
										256052
									],
									[
										256295,
										256301
									],
									[
										256521,
										256527
									],
									[
										256844,
										256850
									],
									[
										256886,
										256892
									],
									[
										256924,
										256930
									],
									[
										257250,
										257256
									],
									[
										257311,
										257317
									],
									[
										257580,
										257586
									],
									[
										257821,
										257827
									],
									[
										258033,
										258039
									],
									[
										258080,
										258086
									],
									[
										258127,
										258133
									],
									[
										258173,
										258179
									],
									[
										258441,
										258447
									],
									[
										258452,
										258458
									],
									[
										258495,
										258501
									],
									[
										258557,
										258563
									],
									[
										258780,
										258786
									],
									[
										258888,
										258894
									],
									[
										259101,
										259107
									],
									[
										259130,
										259136
									],
									[
										259199,
										259205
									],
									[
										259227,
										259233
									],
									[
										259384,
										259390
									],
									[
										259441,
										259447
									],
									[
										259498,
										259504
									],
									[
										259555,
										259561
									],
									[
										259897,
										259919
									],
									[
										260225,
										260247
									],
									[
										260855,
										260869
									],
									[
										261483,
										261490
									],
									[
										261666,
										261673
									],
									[
										261903,
										261910
									],
									[
										261929,
										261936
									],
									[
										261964,
										261971
									],
									[
										262011,
										262018
									],
									[
										262205,
										262212
									],
									[
										262297,
										262304
									],
									[
										262452,
										262459
									],
									[
										262663,
										262670
									],
									[
										262790,
										262797
									],
									[
										262923,
										262930
									],
									[
										263160,
										263167
									],
									[
										263186,
										263193
									],
									[
										263265,
										263272
									],
									[
										263473,
										263480
									],
									[
										263768,
										263775
									],
									[
										263927,
										263934
									],
									[
										263952,
										263959
									],
									[
										264070,
										264077
									],
									[
										264083,
										264090
									],
									[
										264230,
										264237
									],
									[
										264586,
										264593
									],
									[
										264661,
										264668
									],
									[
										265020,
										265027
									],
									[
										265473,
										265480
									],
									[
										265547,
										265554
									],
									[
										265861,
										265868
									],
									[
										266164,
										266171
									],
									[
										266285,
										266292
									],
									[
										266316,
										266323
									],
									[
										266514,
										266521
									],
									[
										266540,
										266547
									],
									[
										266591,
										266598
									],
									[
										266621,
										266628
									],
									[
										266654,
										266661
									],
									[
										266733,
										266740
									],
									[
										266777,
										266784
									],
									[
										266805,
										266812
									],
									[
										266816,
										266823
									],
									[
										266888,
										266895
									],
									[
										266905,
										266912
									],
									[
										266940,
										266947
									],
									[
										267145,
										267152
									],
									[
										267331,
										267338
									],
									[
										267360,
										267367
									],
									[
										267466,
										267473
									],
									[
										267479,
										267486
									],
									[
										267795,
										267802
									],
									[
										268019,
										268026
									],
									[
										268189,
										268196
									],
									[
										268207,
										268214
									],
									[
										268243,
										268250
									],
									[
										268441,
										268448
									],
									[
										268687,
										268694
									],
									[
										268700,
										268707
									],
									[
										268996,
										269015
									],
									[
										269271,
										269277
									],
									[
										269604,
										269610
									],
									[
										269811,
										269817
									],
									[
										270141,
										270147
									],
									[
										270191,
										270197
									],
									[
										270389,
										270395
									],
									[
										270542,
										270548
									],
									[
										270726,
										270732
									],
									[
										270998,
										271020
									],
									[
										271326,
										271348
									],
									[
										271417,
										271439
									],
									[
										271686,
										271691
									],
									[
										271942,
										271947
									],
									[
										272019,
										272024
									],
									[
										272062,
										272067
									],
									[
										272267,
										272272
									],
									[
										272308,
										272313
									],
									[
										272539,
										272544
									],
									[
										272616,
										272621
									],
									[
										272658,
										272663
									],
									[
										272864,
										272869
									],
									[
										272944,
										272949
									],
									[
										272964,
										272969
									],
									[
										273178,
										273183
									],
									[
										273253,
										273258
									],
									[
										273272,
										273277
									],
									[
										273558,
										273563
									],
									[
										273622,
										273627
									],
									[
										273664,
										273669
									],
									[
										273675,
										273680
									],
									[
										273770,
										273775
									],
									[
										274041,
										274046
									],
									[
										274216,
										274221
									],
									[
										274337,
										274342
									],
									[
										274437,
										274442
									],
									[
										274449,
										274454
									],
									[
										274477,
										274482
									],
									[
										274539,
										274544
									],
									[
										274565,
										274570
									],
									[
										274577,
										274582
									],
									[
										274639,
										274644
									],
									[
										274739,
										274744
									],
									[
										274884,
										274889
									],
									[
										275232,
										275237
									],
									[
										275642,
										275648
									],
									[
										275707,
										275713
									],
									[
										275757,
										275763
									],
									[
										275764,
										275770
									],
									[
										275775,
										275781
									],
									[
										275874,
										275880
									],
									[
										275889,
										275895
									],
									[
										275929,
										275935
									],
									[
										275944,
										275950
									],
									[
										275994,
										276000
									],
									[
										276066,
										276072
									],
									[
										276111,
										276117
									],
									[
										276338,
										276344
									],
									[
										276832,
										276838
									],
									[
										276843,
										276849
									],
									[
										276948,
										276954
									],
									[
										276965,
										276971
									],
									[
										276976,
										276982
									],
									[
										277081,
										277087
									],
									[
										277098,
										277104
									],
									[
										277109,
										277115
									],
									[
										277212,
										277218
									],
									[
										277229,
										277235
									],
									[
										277240,
										277246
									],
									[
										277347,
										277353
									],
									[
										277364,
										277370
									],
									[
										277375,
										277381
									],
									[
										277480,
										277486
									],
									[
										277497,
										277503
									],
									[
										277508,
										277514
									],
									[
										277613,
										277619
									],
									[
										277630,
										277636
									],
									[
										277641,
										277647
									],
									[
										277751,
										277757
									],
									[
										277768,
										277774
									],
									[
										277779,
										277785
									],
									[
										277884,
										277890
									],
									[
										278052,
										278058
									],
									[
										278063,
										278069
									],
									[
										278433,
										278439
									],
									[
										278771,
										278777
									],
									[
										279122,
										279128
									],
									[
										279296,
										279302
									],
									[
										279590,
										279596
									],
									[
										279767,
										279773
									],
									[
										280106,
										280112
									],
									[
										280391,
										280397
									],
									[
										280659,
										280665
									],
									[
										280770,
										280776
									],
									[
										280795,
										280801
									],
									[
										280977,
										280983
									],
									[
										281000,
										281006
									],
									[
										281011,
										281017
									],
									[
										281053,
										281059
									],
									[
										281063,
										281069
									],
									[
										281203,
										281209
									],
									[
										281378,
										281384
									],
									[
										281407,
										281413
									],
									[
										281621,
										281627
									],
									[
										281684,
										281690
									],
									[
										281734,
										281740
									],
									[
										281741,
										281747
									],
									[
										281752,
										281758
									],
									[
										281851,
										281857
									],
									[
										281866,
										281872
									],
									[
										281906,
										281912
									],
									[
										281921,
										281927
									],
									[
										281971,
										281977
									],
									[
										282043,
										282049
									],
									[
										282088,
										282094
									],
									[
										282247,
										282253
									],
									[
										282403,
										282409
									],
									[
										282440,
										282446
									],
									[
										282581,
										282587
									],
									[
										282621,
										282627
									],
									[
										282660,
										282666
									],
									[
										282809,
										282815
									],
									[
										283097,
										283103
									],
									[
										283294,
										283300
									],
									[
										283461,
										283467
									],
									[
										283480,
										283486
									],
									[
										283642,
										283648
									],
									[
										283817,
										283823
									],
									[
										283838,
										283844
									],
									[
										284022,
										284028
									],
									[
										284171,
										284177
									],
									[
										284199,
										284205
									],
									[
										284257,
										284263
									],
									[
										284379,
										284385
									],
									[
										284436,
										284442
									],
									[
										284462,
										284468
									],
									[
										284625,
										284631
									],
									[
										284773,
										284779
									],
									[
										284806,
										284812
									],
									[
										284980,
										284986
									],
									[
										285039,
										285045
									],
									[
										285065,
										285071
									],
									[
										285161,
										285167
									],
									[
										285272,
										285278
									],
									[
										285305,
										285311
									],
									[
										285797,
										285803
									],
									[
										286022,
										286028
									],
									[
										286131,
										286137
									],
									[
										286205,
										286211
									],
									[
										286389,
										286395
									],
									[
										286454,
										286460
									],
									[
										286615,
										286621
									],
									[
										286641,
										286647
									],
									[
										286735,
										286741
									],
									[
										286774,
										286780
									],
									[
										286784,
										286790
									],
									[
										286834,
										286840
									],
									[
										286991,
										286997
									],
									[
										286998,
										287004
									],
									[
										287044,
										287050
									],
									[
										287064,
										287070
									],
									[
										287097,
										287103
									],
									[
										287118,
										287124
									],
									[
										287152,
										287158
									],
									[
										287182,
										287188
									],
									[
										287209,
										287215
									],
									[
										287241,
										287247
									],
									[
										287267,
										287273
									],
									[
										287308,
										287314
									],
									[
										287395,
										287401
									],
									[
										287595,
										287601
									],
									[
										287860,
										287866
									],
									[
										287958,
										287964
									],
									[
										288157,
										288163
									],
									[
										288422,
										288428
									],
									[
										288552,
										288558
									],
									[
										288669,
										288675
									],
									[
										288718,
										288724
									],
									[
										288733,
										288739
									],
									[
										288822,
										288828
									],
									[
										288874,
										288880
									],
									[
										288916,
										288922
									],
									[
										288943,
										288949
									],
									[
										288977,
										288983
									],
									[
										288999,
										289005
									],
									[
										289035,
										289041
									],
									[
										289057,
										289063
									],
									[
										289095,
										289101
									],
									[
										289130,
										289136
									],
									[
										289170,
										289176
									],
									[
										289204,
										289210
									],
									[
										289269,
										289275
									],
									[
										289290,
										289296
									],
									[
										289384,
										289390
									],
									[
										289403,
										289409
									],
									[
										289450,
										289456
									],
									[
										289476,
										289482
									],
									[
										289531,
										289537
									],
									[
										289556,
										289562
									],
									[
										289628,
										289634
									],
									[
										289676,
										289682
									],
									[
										289701,
										289707
									],
									[
										289756,
										289762
									],
									[
										289781,
										289787
									],
									[
										289944,
										289950
									],
									[
										290025,
										290031
									],
									[
										290078,
										290084
									],
									[
										290095,
										290101
									],
									[
										290254,
										290260
									],
									[
										290286,
										290292
									],
									[
										290296,
										290302
									],
									[
										290334,
										290340
									],
									[
										290479,
										290485
									],
									[
										290495,
										290501
									],
									[
										290599,
										290605
									],
									[
										290660,
										290666
									],
									[
										290761,
										290767
									],
									[
										290827,
										290833
									],
									[
										290997,
										291003
									],
									[
										291030,
										291036
									],
									[
										291062,
										291068
									],
									[
										291258,
										291264
									],
									[
										291351,
										291357
									],
									[
										291457,
										291463
									],
									[
										291528,
										291534
									],
									[
										291612,
										291618
									],
									[
										291694,
										291700
									],
									[
										291809,
										291815
									],
									[
										291923,
										291929
									],
									[
										292006,
										292012
									],
									[
										292058,
										292064
									],
									[
										292115,
										292121
									],
									[
										292165,
										292171
									],
									[
										292212,
										292218
									],
									[
										292259,
										292265
									],
									[
										292305,
										292311
									],
									[
										292444,
										292450
									],
									[
										292820,
										292826
									],
									[
										292855,
										292861
									],
									[
										292865,
										292871
									],
									[
										292876,
										292882
									],
									[
										292909,
										292915
									],
									[
										292919,
										292925
									],
									[
										292981,
										292987
									],
									[
										293050,
										293056
									],
									[
										293170,
										293176
									],
									[
										293211,
										293217
									],
									[
										293319,
										293325
									],
									[
										293516,
										293522
									],
									[
										293750,
										293756
									],
									[
										293845,
										293851
									],
									[
										293877,
										293883
									],
									[
										293971,
										293977
									],
									[
										293987,
										293993
									],
									[
										294060,
										294066
									],
									[
										294092,
										294098
									],
									[
										294181,
										294187
									],
									[
										294199,
										294205
									],
									[
										294272,
										294278
									],
									[
										294304,
										294310
									],
									[
										294354,
										294360
									],
									[
										294372,
										294378
									],
									[
										294549,
										294555
									],
									[
										294589,
										294595
									],
									[
										294647,
										294653
									],
									[
										294663,
										294669
									],
									[
										294885,
										294891
									],
									[
										294914,
										294920
									],
									[
										294983,
										294989
									],
									[
										295011,
										295017
									],
									[
										295168,
										295174
									],
									[
										295225,
										295231
									],
									[
										295282,
										295288
									],
									[
										295339,
										295345
									],
									[
										295483,
										295489
									],
									[
										295620,
										295626
									],
									[
										295896,
										295902
									],
									[
										296015,
										296021
									],
									[
										296349,
										296355
									],
									[
										296637,
										296643
									],
									[
										297026,
										297044
									],
									[
										297193,
										297211
									],
									[
										297515,
										297526
									],
									[
										297551,
										297562
									],
									[
										297898,
										297909
									],
									[
										298065,
										298076
									],
									[
										298085,
										298096
									],
									[
										298375,
										298387
									],
									[
										298574,
										298586
									],
									[
										298742,
										298754
									],
									[
										298974,
										298986
									],
									[
										299258,
										299270
									],
									[
										299582,
										299594
									],
									[
										299958,
										299969
									],
									[
										300035,
										300046
									],
									[
										300220,
										300231
									],
									[
										300368,
										300379
									],
									[
										300445,
										300456
									],
									[
										300558,
										300569
									],
									[
										300638,
										300649
									],
									[
										300872,
										300883
									],
									[
										300947,
										300958
									],
									[
										301205,
										301216
									],
									[
										301333,
										301344
									],
									[
										301345,
										301356
									],
									[
										301640,
										301645
									],
									[
										301885,
										301890
									],
									[
										301966,
										301971
									],
									[
										302155,
										302160
									],
									[
										302307,
										302312
									],
									[
										302388,
										302393
									],
									[
										302505,
										302510
									],
									[
										302589,
										302594
									],
									[
										302827,
										302832
									],
									[
										302906,
										302911
									],
									[
										303168,
										303173
									],
									[
										303271,
										303276
									],
									[
										303300,
										303305
									],
									[
										303316,
										303321
									],
									[
										303641,
										303648
									],
									[
										303865,
										303872
									],
									[
										303919,
										303926
									],
									[
										303940,
										303947
									],
									[
										304042,
										304049
									],
									[
										304108,
										304115
									],
									[
										304161,
										304168
									],
									[
										304456,
										304463
									],
									[
										304588,
										304595
									],
									[
										304686,
										304693
									],
									[
										304999,
										305006
									],
									[
										305091,
										305098
									],
									[
										305140,
										305147
									],
									[
										305190,
										305197
									],
									[
										305205,
										305212
									],
									[
										305262,
										305269
									],
									[
										305361,
										305368
									],
									[
										305705,
										305712
									],
									[
										305834,
										305841
									],
									[
										306092,
										306099
									],
									[
										306216,
										306223
									],
									[
										306437,
										306444
									],
									[
										306686,
										306693
									],
									[
										306825,
										306832
									],
									[
										306932,
										306939
									],
									[
										307048,
										307055
									],
									[
										307193,
										307200
									],
									[
										307283,
										307290
									],
									[
										307396,
										307403
									],
									[
										307517,
										307524
									],
									[
										307736,
										307743
									],
									[
										307950,
										307957
									],
									[
										307979,
										307986
									],
									[
										308103,
										308110
									],
									[
										308323,
										308330
									],
									[
										308569,
										308576
									],
									[
										308706,
										308713
									],
									[
										308810,
										308817
									],
									[
										308925,
										308932
									],
									[
										309069,
										309076
									],
									[
										309158,
										309165
									],
									[
										309358,
										309365
									],
									[
										309432,
										309439
									],
									[
										309497,
										309504
									],
									[
										309562,
										309569
									],
									[
										309639,
										309646
									],
									[
										309880,
										309887
									],
									[
										310131,
										310138
									],
									[
										310193,
										310200
									],
									[
										310260,
										310267
									],
									[
										310353,
										310360
									],
									[
										310408,
										310415
									],
									[
										310613,
										310620
									],
									[
										310791,
										310798
									],
									[
										310919,
										310926
									],
									[
										311138,
										311145
									],
									[
										311264,
										311271
									],
									[
										311499,
										311506
									],
									[
										311549,
										311556
									],
									[
										311760,
										311767
									],
									[
										311926,
										311933
									],
									[
										311966,
										311973
									],
									[
										312082,
										312089
									],
									[
										312271,
										312278
									],
									[
										312410,
										312417
									],
									[
										312757,
										312764
									],
									[
										312822,
										312829
									],
									[
										313111,
										313118
									],
									[
										313166,
										313173
									],
									[
										313363,
										313370
									],
									[
										313599,
										313606
									],
									[
										313718,
										313725
									],
									[
										313864,
										313871
									],
									[
										314036,
										314043
									],
									[
										314249,
										314256
									],
									[
										314571,
										314578
									],
									[
										314828,
										314835
									],
									[
										315058,
										315065
									],
									[
										315247,
										315254
									],
									[
										315327,
										315334
									],
									[
										315702,
										315709
									],
									[
										316080,
										316087
									],
									[
										316133,
										316140
									],
									[
										316228,
										316235
									],
									[
										316499,
										316506
									],
									[
										316674,
										316681
									],
									[
										316795,
										316802
									],
									[
										316911,
										316918
									],
									[
										316939,
										316946
									],
									[
										317145,
										317152
									],
									[
										317287,
										317294
									],
									[
										317405,
										317412
									],
									[
										317431,
										317438
									],
									[
										317493,
										317500
									],
									[
										317544,
										317551
									],
									[
										317576,
										317583
									],
									[
										317847,
										317854
									],
									[
										318188,
										318195
									],
									[
										318516,
										318529
									],
									[
										318662,
										318675
									],
									[
										318834,
										318847
									],
									[
										319140,
										319153
									],
									[
										319397,
										319410
									],
									[
										319707,
										319720
									],
									[
										319760,
										319773
									],
									[
										319855,
										319868
									],
									[
										320126,
										320139
									],
									[
										320301,
										320314
									],
									[
										320422,
										320435
									],
									[
										320538,
										320551
									],
									[
										320566,
										320579
									],
									[
										320887,
										320893
									],
									[
										320944,
										320950
									],
									[
										320955,
										320961
									],
									[
										321069,
										321075
									],
									[
										321124,
										321130
									],
									[
										321174,
										321180
									],
									[
										321246,
										321252
									],
									[
										321291,
										321297
									],
									[
										321523,
										321529
									],
									[
										321534,
										321540
									],
									[
										321946,
										321952
									],
									[
										322123,
										322129
									],
									[
										322462,
										322468
									],
									[
										322747,
										322753
									],
									[
										322963,
										322969
									],
									[
										322988,
										322994
									],
									[
										323170,
										323176
									],
									[
										323193,
										323199
									],
									[
										323204,
										323210
									],
									[
										323256,
										323262
									],
									[
										323456,
										323462
									],
									[
										323513,
										323519
									],
									[
										323524,
										323530
									],
									[
										323638,
										323644
									],
									[
										323693,
										323699
									],
									[
										323743,
										323749
									],
									[
										323815,
										323821
									],
									[
										323860,
										323866
									],
									[
										323988,
										323994
									],
									[
										324028,
										324034
									],
									[
										324067,
										324073
									],
									[
										324216,
										324222
									],
									[
										324507,
										324513
									],
									[
										324708,
										324714
									],
									[
										324881,
										324887
									],
									[
										324900,
										324906
									],
									[
										325062,
										325068
									],
									[
										325251,
										325257
									],
									[
										325272,
										325278
									],
									[
										325460,
										325466
									],
									[
										325623,
										325629
									],
									[
										325651,
										325657
									],
									[
										325709,
										325715
									],
									[
										325831,
										325837
									],
									[
										325888,
										325894
									],
									[
										325914,
										325920
									],
									[
										326081,
										326087
									],
									[
										326243,
										326249
									],
									[
										326276,
										326282
									],
									[
										326450,
										326456
									],
									[
										326509,
										326515
									],
									[
										326535,
										326541
									],
									[
										326635,
										326641
									],
									[
										326760,
										326766
									],
									[
										326793,
										326799
									],
									[
										327285,
										327291
									],
									[
										327552,
										327558
									],
									[
										327626,
										327632
									],
									[
										327810,
										327816
									],
									[
										327875,
										327881
									],
									[
										328036,
										328042
									],
									[
										328062,
										328068
									],
									[
										328205,
										328211
									],
									[
										328428,
										328434
									],
									[
										328482,
										328488
									],
									[
										328546,
										328552
									],
									[
										328605,
										328611
									],
									[
										328882,
										328888
									],
									[
										328957,
										328963
									],
									[
										329206,
										329212
									],
									[
										329432,
										329438
									],
									[
										329755,
										329761
									],
									[
										329797,
										329803
									],
									[
										329835,
										329841
									],
									[
										330161,
										330167
									],
									[
										330328,
										330334
									],
									[
										330540,
										330546
									],
									[
										330587,
										330593
									],
									[
										330634,
										330640
									],
									[
										330680,
										330686
									],
									[
										330958,
										330964
									],
									[
										330969,
										330975
									],
									[
										331012,
										331018
									],
									[
										331084,
										331090
									],
									[
										331317,
										331323
									],
									[
										331435,
										331441
									],
									[
										331641,
										331647
									],
									[
										331682,
										331688
									],
									[
										331763,
										331769
									],
									[
										331803,
										331809
									],
									[
										331960,
										331966
									],
									[
										332017,
										332023
									],
									[
										332074,
										332080
									],
									[
										332131,
										332137
									],
									[
										332435,
										332447
									],
									[
										332644,
										332656
									],
									[
										332822,
										332834
									],
									[
										333054,
										333066
									],
									[
										333352,
										333364
									],
									[
										333676,
										333688
									],
									[
										334076,
										334088
									],
									[
										334255,
										334267
									],
									[
										334457,
										334469
									],
									[
										334618,
										334630
									],
									[
										334756,
										334768
									],
									[
										334893,
										334905
									],
									[
										335204,
										335216
									],
									[
										335567,
										335584
									],
									[
										335899,
										335910
									],
									[
										335960,
										335971
									],
									[
										336001,
										336012
									],
									[
										336149,
										336160
									],
									[
										336200,
										336211
									],
									[
										336382,
										336393
									],
									[
										336616,
										336627
									],
									[
										336932,
										336941
									],
									[
										337023,
										337032
									],
									[
										337033,
										337042
									],
									[
										337343,
										337352
									],
									[
										337498,
										337507
									],
									[
										337654,
										337663
									],
									[
										337837,
										337846
									],
									[
										337923,
										337932
									],
									[
										338143,
										338152
									],
									[
										338175,
										338184
									],
									[
										338570,
										338587
									],
									[
										338775,
										338792
									],
									[
										338997,
										339014
									],
									[
										339312,
										339329
									],
									[
										339363,
										339380
									],
									[
										339773,
										339776
									],
									[
										339875,
										339878
									],
									[
										340124,
										340127
									],
									[
										340294,
										340297
									],
									[
										340471,
										340474
									],
									[
										340483,
										340486
									],
									[
										340758,
										340761
									],
									[
										341008,
										341011
									]
								],
								"scope": ""
							}
						},
						"selection":
						[
							[
								340125,
								340125
							]
						],
						"settings":
						{
							"WordCount":
							{
								"changes": 887,
								"count": 13532,
								"modified": false,
								"selection": false,
								"status": -1,
								"syntax": "plain text"
							},
							"detect_indentation": false,
							"line_numbers": false,
							"output_tag": 167,
							"result_base_dir": "",
							"result_file_regex": "^([^ \t].*):$",
							"result_line_regex": "^ +([0-9]+):",
							"scroll_past_end": true,
							"syntax": "Packages/Default/Find Results.hidden-tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 147033.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 12,
					"file": "mkturk_screenfunctions.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 11520,
						"regions":
						{
						},
						"selection":
						[
							[
								1177,
								1177
							]
						],
						"settings":
						{
							"WordCount":
							{
								"changes": -1,
								"modified": true,
								"selection": true,
								"status": -1,
								"syntax": "javascript"
							},
							"syntax": "Packages/JavaScript/JavaScript.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 170.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 13,
					"file": "mkturk_eventlisteners.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7071,
						"regions":
						{
						},
						"selection":
						[
							[
								2239,
								2248
							]
						],
						"settings":
						{
							"WordCount":
							{
								"changes": -1,
								"modified": true,
								"selection": true,
								"status": -1,
								"syntax": "javascript"
							},
							"syntax": "Packages/JavaScript/JavaScript.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 360.0,
						"zoom_level": 1.0
					},
					"stack_index": 10,
					"type": "text"
				},
				{
					"buffer": 14,
					"file": "screen_sequence.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 621,
						"regions":
						{
						},
						"selection":
						[
							[
								180,
								180
							]
						],
						"settings":
						{
							"WordCount":
							{
								"changes": 34,
								"count": 2,
								"modified": true,
								"selection": true,
								"status": -1,
								"syntax": "javascript"
							},
							"auto_name": "class ScreenSequence",
							"syntax": "Packages/JavaScript/JavaScript.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 25.0
	},
	"input":
	{
		"height": 33.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			],
			[
				1,
				0,
				2,
				1
			],
			[
				2,
				0,
				3,
				1
			]
		],
		"cols":
		[
			0.0,
			0.0260416666667,
			0.823958333333,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "",
	"replace":
	{
		"height": 46.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 1,
	"settings":
	{
	},
	"show_minimap": false,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": false,
	"side_bar_width": 343.0,
	"status_bar_visible": true,
	"template_settings":
	{
		"max_columns": 3
	}
}
